// Author: Bernardo Ortiz
// bernardo.ortiz.vanderdys@gmail.com
// cell: 949/400-5158
// addr: 67 Rockwood	Irvine, CA 92614

#include "OS.h"
using namespace concurrency;

	UINT8 luma_type[0x10]= { 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 };
	_fp16 cof[0x100] = { 0x00 , 0x01 , 0x02 , 0x03 , 0x04 , 0x05 , 0x06 , 0x07 , 0x08 , 0x09 , 0x0a , 0x0b , 0x0c , 0x0d , 0x0e , 0x0f ,
						  0x10 , 0x11 , 0x12 , 0x13 , 0x14 , 0x15 , 0x16 , 0x17 , 0x18 , 0x19 , 0x1a , 0x1b , 0x1c , 0x1d , 0x1e , 0x1f ,
						  0x20 , 0x21 , 0x22 , 0x23 , 0x24 , 0x25 , 0x26 , 0x27 , 0x28 , 0x29 , 0x2a , 0x2b , 0x2c , 0x2d , 0x2e , 0x2f ,
						  0x30 , 0x31 , 0x32 , 0x33 , 0x34 , 0x35 , 0x36 , 0x37 , 0x38 , 0x39 , 0x3a , 0x3b , 0x3c , 0x3d , 0x3e , 0x3f ,
						  0x40 , 0x41 , 0x42 , 0x43 , 0x44 , 0x45 , 0x46 , 0x47 , 0x48 , 0x49 , 0x4a , 0x4b , 0x4c , 0x4d , 0x4e , 0x4f ,
						  0x50 , 0x51 , 0x52 , 0x53 , 0x54 , 0x55 , 0x56 , 0x57 , 0x58 , 0x59 , 0x5a , 0x5b , 0x5c , 0x5d , 0x5e , 0x5f ,
						  0x60 , 0x61 , 0x62 , 0x63 , 0x64 , 0x65 , 0x66 , 0x67 , 0x68 , 0x69 , 0x6a , 0x6b , 0x6c , 0x6d , 0x6e , 0x6f ,
						  0x70 , 0x71 , 0x72 , 0x73 , 0x74 , 0x75 , 0x76 , 0x77 , 0x78 , 0x79 , 0x7a , 0x7b , 0x7c , 0x7d , 0x7e , 0x7f ,
						  0x80 , 0x81 , 0x82 , 0x83 , 0x84 , 0x85 , 0x86 , 0x87 , 0x88 , 0x89 , 0x8a , 0x8b , 0x8c , 0x8d , 0x8e , 0x8f ,
						  0x90 , 0x91 , 0x92 , 0x93 , 0x94 , 0x95 , 0x96 , 0x97 , 0x98 , 0x99 , 0x9a , 0x9b , 0x9c , 0x9d , 0x9e , 0x9f ,
						  0xa0 , 0xa1 , 0xa2 , 0xa3 , 0xa4 , 0xa5 , 0xa6 , 0xa7 , 0xa8 , 0xa9 , 0xaa , 0xab , 0xac , 0xad , 0xae , 0xaf ,
						  0xb0 , 0xb1 , 0xb2 , 0xb3 , 0xb4 , 0xb5 , 0xb6 , 0xb7 , 0xb8 , 0xb9 , 0xba , 0xbb , 0xbc , 0xbd , 0xbe , 0xbf ,
						  0xc0 , 0xc1 , 0xc2 , 0xc3 , 0xc4 , 0xc5 , 0xc6 , 0xc7 , 0xc8 , 0xc9 , 0xca , 0xcb , 0xcc , 0xcd , 0xce , 0xcf ,
						  0xd0 , 0xd1 , 0xd2 , 0xd3 , 0xd4 , 0xd5 , 0xd6 , 0xd7 , 0xd8 , 0xd9 , 0xda , 0xdb , 0xdc , 0xdd , 0xde , 0xdf ,
						  0xe0 , 0xe1 , 0xe2 , 0xe3 , 0xe4 , 0xe5 , 0xe6 , 0xe7 , 0xe8 , 0xe9 , 0xea , 0xeb , 0xec , 0xed , 0xee , 0xef ,
						  0xf0 , 0xf1 , 0xf2 , 0xf3 , 0xf4 , 0xf5 , 0xf6 , 0xf7 , 0xf8 , 0xf9 , 0xfa , 0xfb , 0xfc , 0xfd , 0xfe , 0xff };

	INT8 mvx0[4]= { - 8, - 8, - 16, - 16};
	INT8 mvx1[4]= { - 7, - 7, - 15, - 15};
	INT8 mvx2[4]= { - 6, - 6, - 14, - 14};
	INT8 mvx3[4]= { - 5, - 5, - 13, - 13};
	INT8 mvx4[4]= { - 4, - 4, - 12, - 12};
	INT8 mvx5[4]= { - 3, - 3, - 11, - 11};
	INT8 mvx6[4]= { - 2, - 2, - 10, - 10};
	INT8 mvx7[4]= { - 1, - 1, - 9, - 9};
	INT8 mvy[4]= { - 8, - 16, - 8, - 16};
	INT8 mvy7[4]= { 7 , 15 , 7 , 15 };
	INT8 mvy6[4]= { 6 , 14 , 6 , 14 };
	INT8 mvy5[4]= { 5 , 13 , 5 , 13 };
	INT8 mvy4[4]= { 4 , 12 , 4 , 12 };
	INT8 mvy3[4]= { 3 , 11 , 3 , 11 };
	INT8 mvy2[4]= { 2 , 10 , 2 , 10 };
	INT8 mvy1[4]= { 1 , 9 , 1 , 9 };
	INT8 mvy0[4]= { 0 , 8 , 0 , 8 };

_fp16 *in1 = (_fp16 *)malloc(0x800000 * sizeof(_fp16));
_fp16 *in2 = (_fp16 *)malloc(0x800000 * sizeof(_fp16));
_fp16 *out = (_fp16 *)malloc(0x800000 * sizeof(_fp16));

void get_luma(UINT8 luma_type, _fp16 *out, _fp16 *in, UINT16 x, UINT16 y){
	switch(luma_type){
	case 0 :
{ 
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *out_ptr0 = &out[(j<< 3)];
					_fp16 *in_ptr1 = &in[((y + j)<< 12)+ x ];
					out_ptr0[0x000] = in_ptr1[0x000];
					out_ptr0[0x001] = in_ptr1[0x001];
					out_ptr0[0x002] = in_ptr1[0x002];
					out_ptr0[0x003] = in_ptr1[0x003];
					out_ptr0[0x004] = in_ptr1[0x004];
					out_ptr0[0x005] = in_ptr1[0x005];
					out_ptr0[0x006] = in_ptr1[0x006];
					out_ptr0[0x007] = in_ptr1[0x007];
				}
			}
		} 
		break;
	case 1 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x - 0x2000];
					_fp16 *in_ptr1 = in_ptr0+ 0x00005000;
					_fp16 *in_ptr2 = in_ptr0+ 0x00001000;
					_fp16 *in_ptr3 = in_ptr0+ 0x00004000;
					_fp16 *in_ptr4 = in_ptr0+ 0x00002000;
					_fp16 *in_ptr5 = in_ptr0+ 0x00003000;
					_fp16 *out_ptr6 = &out[(j<< 3)];
					 _fp16 out_reg = in_ptr0[0x000 + 0x0] + in_ptr1[0x000] ;
					 out_reg-= 5*(in_ptr2[0x000 + 0x0] + in_ptr3[0x000]);
					 out_reg+= 20*(in_ptr4[0x000] + in_ptr5[0x000]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x000] = round(0.5*(out_reg + in_ptr4[0x000]));
					  out_reg = in_ptr0[0x001 + 0x0] + in_ptr1[0x001] ;
					 out_reg-= 5*(in_ptr2[0x001 + 0x0] + in_ptr3[0x001]);
					 out_reg+= 20*(in_ptr4[0x001] + in_ptr5[0x001]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x001] = round(0.5*(out_reg + in_ptr4[0x001]));
					  out_reg = in_ptr0[0x002 + 0x0] + in_ptr1[0x002] ;
					 out_reg-= 5*(in_ptr2[0x002 + 0x0] + in_ptr3[0x002]);
					 out_reg+= 20*(in_ptr4[0x002] + in_ptr5[0x002]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x002] = round(0.5*(out_reg + in_ptr4[0x002]));
					  out_reg = in_ptr0[0x003 + 0x0] + in_ptr1[0x003] ;
					 out_reg-= 5*(in_ptr2[0x003 + 0x0] + in_ptr3[0x003]);
					 out_reg+= 20*(in_ptr4[0x003] + in_ptr5[0x003]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x003] = round(0.5*(out_reg + in_ptr4[0x003]));
					  out_reg = in_ptr0[0x004 + 0x0] + in_ptr1[0x004] ;
					 out_reg-= 5*(in_ptr2[0x004 + 0x0] + in_ptr3[0x004]);
					 out_reg+= 20*(in_ptr4[0x004] + in_ptr5[0x004]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x004] = round(0.5*(out_reg + in_ptr4[0x004]));
					  out_reg = in_ptr0[0x005 + 0x0] + in_ptr1[0x005] ;
					 out_reg-= 5*(in_ptr2[0x005 + 0x0] + in_ptr3[0x005]);
					 out_reg+= 20*(in_ptr4[0x005] + in_ptr5[0x005]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x005] = round(0.5*(out_reg + in_ptr4[0x005]));
					  out_reg = in_ptr0[0x006 + 0x0] + in_ptr1[0x006] ;
					 out_reg-= 5*(in_ptr2[0x006 + 0x0] + in_ptr3[0x006]);
					 out_reg+= 20*(in_ptr4[0x006] + in_ptr5[0x006]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x006] = round(0.5*(out_reg + in_ptr4[0x006]));
					  out_reg = in_ptr0[0x007 + 0x0] + in_ptr1[0x007] ;
					 out_reg-= 5*(in_ptr2[0x007 + 0x0] + in_ptr3[0x007]);
					 out_reg+= 20*(in_ptr4[0x007] + in_ptr5[0x007]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x007] = round(0.5*(out_reg + in_ptr4[0x007]));
				}
			}
		} 
		break;
	case 2 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x - 0x2000];
					_fp16 *in_ptr1 = in_ptr0+ 0x00005000;
					_fp16 *in_ptr2 = in_ptr0+ 0x00001000;
					_fp16 *in_ptr3 = in_ptr0+ 0x00004000;
					_fp16 *in_ptr4 = in_ptr0+ 0x00002000;
					_fp16 *in_ptr5 = in_ptr0+ 0x00003000;
					_fp16 *out_ptr6 = &out[(j<< 3)];
					 _fp16 out_reg = in_ptr0[0x000 + 0x0] + in_ptr1[0x000] ;
					 out_reg-= 5*(in_ptr2[0x000 + 0x0] + in_ptr3[0x000]);
					 out_reg+= 20*(in_ptr4[0x000] + in_ptr5[0x000]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x000] = round(out_reg);
					  out_reg = in_ptr0[0x001 + 0x0] + in_ptr1[0x001] ;
					 out_reg-= 5*(in_ptr2[0x001 + 0x0] + in_ptr3[0x001]);
					 out_reg+= 20*(in_ptr4[0x001] + in_ptr5[0x001]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x001] = round(out_reg);
					  out_reg = in_ptr0[0x002 + 0x0] + in_ptr1[0x002] ;
					 out_reg-= 5*(in_ptr2[0x002 + 0x0] + in_ptr3[0x002]);
					 out_reg+= 20*(in_ptr4[0x002] + in_ptr5[0x002]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x002] = round(out_reg);
					  out_reg = in_ptr0[0x003 + 0x0] + in_ptr1[0x003] ;
					 out_reg-= 5*(in_ptr2[0x003 + 0x0] + in_ptr3[0x003]);
					 out_reg+= 20*(in_ptr4[0x003] + in_ptr5[0x003]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x003] = round(out_reg);
					  out_reg = in_ptr0[0x004 + 0x0] + in_ptr1[0x004] ;
					 out_reg-= 5*(in_ptr2[0x004 + 0x0] + in_ptr3[0x004]);
					 out_reg+= 20*(in_ptr4[0x004] + in_ptr5[0x004]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x004] = round(out_reg);
					  out_reg = in_ptr0[0x005 + 0x0] + in_ptr1[0x005] ;
					 out_reg-= 5*(in_ptr2[0x005 + 0x0] + in_ptr3[0x005]);
					 out_reg+= 20*(in_ptr4[0x005] + in_ptr5[0x005]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x005] = round(out_reg);
					  out_reg = in_ptr0[0x006 + 0x0] + in_ptr1[0x006] ;
					 out_reg-= 5*(in_ptr2[0x006 + 0x0] + in_ptr3[0x006]);
					 out_reg+= 20*(in_ptr4[0x006] + in_ptr5[0x006]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x006] = round(out_reg);
					  out_reg = in_ptr0[0x007 + 0x0] + in_ptr1[0x007] ;
					 out_reg-= 5*(in_ptr2[0x007 + 0x0] + in_ptr3[0x007]);
					 out_reg+= 20*(in_ptr4[0x007] + in_ptr5[0x007]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x007] = round(out_reg);
				}
			}
		} 
		break;
	case 3 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x - 0x2000];
					_fp16 *in_ptr1 = in_ptr0+ 0x00005000;
					_fp16 *in_ptr2 = in_ptr0+ 0x00001000;
					_fp16 *in_ptr3 = in_ptr0+ 0x00004000;
					_fp16 *in_ptr4 = in_ptr0+ 0x00002000;
					_fp16 *in_ptr5 = in_ptr0+ 0x00003000;
					_fp16 *out_ptr6 = &out[(j<< 3)];
					 _fp16 out_reg = in_ptr0[0x000 + 0x0] + in_ptr1[0x000] ;
					 out_reg-= 5*(in_ptr2[0x000 + 0x0] + in_ptr3[0x000]);
					 out_reg+= 20*(in_ptr4[0x000] + in_ptr5[0x000]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x000] = round(0.5*(out_reg + in_ptr5[0x000]));
					  out_reg = in_ptr0[0x001 + 0x0] + in_ptr1[0x001] ;
					 out_reg-= 5*(in_ptr2[0x001 + 0x0] + in_ptr3[0x001]);
					 out_reg+= 20*(in_ptr4[0x001] + in_ptr5[0x001]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x001] = round(0.5*(out_reg + in_ptr5[0x001]));
					  out_reg = in_ptr0[0x002 + 0x0] + in_ptr1[0x002] ;
					 out_reg-= 5*(in_ptr2[0x002 + 0x0] + in_ptr3[0x002]);
					 out_reg+= 20*(in_ptr4[0x002] + in_ptr5[0x002]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x002] = round(0.5*(out_reg + in_ptr5[0x002]));
					  out_reg = in_ptr0[0x003 + 0x0] + in_ptr1[0x003] ;
					 out_reg-= 5*(in_ptr2[0x003 + 0x0] + in_ptr3[0x003]);
					 out_reg+= 20*(in_ptr4[0x003] + in_ptr5[0x003]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x003] = round(0.5*(out_reg + in_ptr5[0x003]));
					  out_reg = in_ptr0[0x004 + 0x0] + in_ptr1[0x004] ;
					 out_reg-= 5*(in_ptr2[0x004 + 0x0] + in_ptr3[0x004]);
					 out_reg+= 20*(in_ptr4[0x004] + in_ptr5[0x004]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x004] = round(0.5*(out_reg + in_ptr5[0x004]));
					  out_reg = in_ptr0[0x005 + 0x0] + in_ptr1[0x005] ;
					 out_reg-= 5*(in_ptr2[0x005 + 0x0] + in_ptr3[0x005]);
					 out_reg+= 20*(in_ptr4[0x005] + in_ptr5[0x005]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x005] = round(0.5*(out_reg + in_ptr5[0x005]));
					  out_reg = in_ptr0[0x006 + 0x0] + in_ptr1[0x006] ;
					 out_reg-= 5*(in_ptr2[0x006 + 0x0] + in_ptr3[0x006]);
					 out_reg+= 20*(in_ptr4[0x006] + in_ptr5[0x006]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x006] = round(0.5*(out_reg + in_ptr5[0x006]));
					  out_reg = in_ptr0[0x007 + 0x0] + in_ptr1[0x007] ;
					 out_reg-= 5*(in_ptr2[0x007 + 0x0] + in_ptr3[0x007]);
					 out_reg+= 20*(in_ptr4[0x007] + in_ptr5[0x007]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr6[0x007] = round(0.5*(out_reg + in_ptr5[0x007]));
				}
			}
		} 
		break;
	case 4 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x ];
					_fp16 *out_ptr1 = &out[(j<< 3)];
					 _fp16 out_reg = in_ptr0[0x000 + 0x0] + in_ptr0[0x000 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x000 + 0x1] + in_ptr0[0x000 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x000 + 0x4] + in_ptr0[0x000 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x000] = round(0.5*(out_reg + in_ptr0[0x000 + 0x3]));
					  out_reg = in_ptr0[0x001 + 0x0] + in_ptr0[0x001 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x001 + 0x1] + in_ptr0[0x001 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x001 + 0x4] + in_ptr0[0x001 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x001] = round(0.5*(out_reg + in_ptr0[0x001 + 0x3]));
					  out_reg = in_ptr0[0x002 + 0x0] + in_ptr0[0x002 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x002 + 0x1] + in_ptr0[0x002 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x002 + 0x4] + in_ptr0[0x002 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x002] = round(0.5*(out_reg + in_ptr0[0x002 + 0x3]));
					  out_reg = in_ptr0[0x003 + 0x0] + in_ptr0[0x003 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x003 + 0x1] + in_ptr0[0x003 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x003 + 0x4] + in_ptr0[0x003 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x003] = round(0.5*(out_reg + in_ptr0[0x003 + 0x3]));
					  out_reg = in_ptr0[0x004 + 0x0] + in_ptr0[0x004 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x004 + 0x1] + in_ptr0[0x004 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x004 + 0x4] + in_ptr0[0x004 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x004] = round(0.5*(out_reg + in_ptr0[0x004 + 0x3]));
					  out_reg = in_ptr0[0x005 + 0x0] + in_ptr0[0x005 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x005 + 0x1] + in_ptr0[0x005 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x005 + 0x4] + in_ptr0[0x005 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x005] = round(0.5*(out_reg + in_ptr0[0x005 + 0x3]));
					  out_reg = in_ptr0[0x006 + 0x0] + in_ptr0[0x006 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x006 + 0x1] + in_ptr0[0x006 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x006 + 0x4] + in_ptr0[0x006 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x006] = round(0.5*(out_reg + in_ptr0[0x006 + 0x3]));
					  out_reg = in_ptr0[0x007 + 0x0] + in_ptr0[0x007 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x007 + 0x1] + in_ptr0[0x007 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x007 + 0x4] + in_ptr0[0x007 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x007] = round(0.5*(out_reg + in_ptr0[0x007 + 0x3]));
				}
			}
		} 
		break;
	case 5 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x ];
					_fp16 *in_ptr1 = in_ptr0- 0x00001ffe;
					_fp16 *in_ptr2 = in_ptr0+ 0x00003002;
					_fp16 *in_ptr3 = in_ptr0- 0x00000ffe;
					_fp16 *in_ptr4 = in_ptr0+ 0x00002002;
					_fp16 *in_ptr5 = in_ptr0+ 0x00001002;
					_fp16 *out_ptr6 = &out[(j<< 3)];
					 _fp16 temp11 = in_ptr0[0x000 + 0x0] + in_ptr0[0x000 + 0x5] ;
					 temp11-= 5*(in_ptr0[0x000 + 0x1] + in_ptr0[0x000 + 0x4]);
					 temp11+= 20*(in_ptr0[0x000 + 0x4] + in_ptr0[0x000 + 0x3]);
					temp11 = max(temp11,0);
					temp11 = min(temp11,0xff);
					 _fp16 temp11_2 = in_ptr1[0x000 + 0x0] + in_ptr2[0x000] ;
					 temp11_2-= 5*(in_ptr3[0x000 + 0x0] + in_ptr4[0x000]);
					 temp11_2+= 20*(in_ptr0[0x000] + in_ptr5[0x000]);
					temp11_2 = max(temp11_2,fzero);
					temp11_2 = min(temp11_2,fmax);
					out_ptr6[0x000] = round(0.5*(temp11 + temp11_2));
					  temp11 = in_ptr0[0x001 + 0x0] + in_ptr0[0x001 + 0x5] ;
					 temp11-= 5*(in_ptr0[0x001 + 0x1] + in_ptr0[0x001 + 0x4]);
					 temp11+= 20*(in_ptr0[0x001 + 0x4] + in_ptr0[0x001 + 0x3]);
					temp11 = max(temp11,0);
					temp11 = min(temp11,0xff);
					  temp11_2 = in_ptr1[0x001 + 0x0] + in_ptr2[0x001] ;
					 temp11_2-= 5*(in_ptr3[0x001 + 0x0] + in_ptr4[0x001]);
					 temp11_2+= 20*(in_ptr0[0x001] + in_ptr5[0x001]);
					temp11_2 = max(temp11_2,fzero);
					temp11_2 = min(temp11_2,fmax);
					out_ptr6[0x001] = round(0.5*(temp11 + temp11_2));
					  temp11 = in_ptr0[0x002 + 0x0] + in_ptr0[0x002 + 0x5] ;
					 temp11-= 5*(in_ptr0[0x002 + 0x1] + in_ptr0[0x002 + 0x4]);
					 temp11+= 20*(in_ptr0[0x002 + 0x4] + in_ptr0[0x002 + 0x3]);
					temp11 = max(temp11,0);
					temp11 = min(temp11,0xff);
					  temp11_2 = in_ptr1[0x002 + 0x0] + in_ptr2[0x002] ;
					 temp11_2-= 5*(in_ptr3[0x002 + 0x0] + in_ptr4[0x002]);
					 temp11_2+= 20*(in_ptr0[0x002] + in_ptr5[0x002]);
					temp11_2 = max(temp11_2,fzero);
					temp11_2 = min(temp11_2,fmax);
					out_ptr6[0x002] = round(0.5*(temp11 + temp11_2));
					  temp11 = in_ptr0[0x003 + 0x0] + in_ptr0[0x003 + 0x5] ;
					 temp11-= 5*(in_ptr0[0x003 + 0x1] + in_ptr0[0x003 + 0x4]);
					 temp11+= 20*(in_ptr0[0x003 + 0x4] + in_ptr0[0x003 + 0x3]);
					temp11 = max(temp11,0);
					temp11 = min(temp11,0xff);
					  temp11_2 = in_ptr1[0x003 + 0x0] + in_ptr2[0x003] ;
					 temp11_2-= 5*(in_ptr3[0x003 + 0x0] + in_ptr4[0x003]);
					 temp11_2+= 20*(in_ptr0[0x003] + in_ptr5[0x003]);
					temp11_2 = max(temp11_2,fzero);
					temp11_2 = min(temp11_2,fmax);
					out_ptr6[0x003] = round(0.5*(temp11 + temp11_2));
					  temp11 = in_ptr0[0x004 + 0x0] + in_ptr0[0x004 + 0x5] ;
					 temp11-= 5*(in_ptr0[0x004 + 0x1] + in_ptr0[0x004 + 0x4]);
					 temp11+= 20*(in_ptr0[0x004 + 0x4] + in_ptr0[0x004 + 0x3]);
					temp11 = max(temp11,0);
					temp11 = min(temp11,0xff);
					  temp11_2 = in_ptr1[0x004 + 0x0] + in_ptr2[0x004] ;
					 temp11_2-= 5*(in_ptr3[0x004 + 0x0] + in_ptr4[0x004]);
					 temp11_2+= 20*(in_ptr0[0x004] + in_ptr5[0x004]);
					temp11_2 = max(temp11_2,fzero);
					temp11_2 = min(temp11_2,fmax);
					out_ptr6[0x004] = round(0.5*(temp11 + temp11_2));
					  temp11 = in_ptr0[0x005 + 0x0] + in_ptr0[0x005 + 0x5] ;
					 temp11-= 5*(in_ptr0[0x005 + 0x1] + in_ptr0[0x005 + 0x4]);
					 temp11+= 20*(in_ptr0[0x005 + 0x4] + in_ptr0[0x005 + 0x3]);
					temp11 = max(temp11,0);
					temp11 = min(temp11,0xff);
					  temp11_2 = in_ptr1[0x005 + 0x0] + in_ptr2[0x005] ;
					 temp11_2-= 5*(in_ptr3[0x005 + 0x0] + in_ptr4[0x005]);
					 temp11_2+= 20*(in_ptr0[0x005] + in_ptr5[0x005]);
					temp11_2 = max(temp11_2,fzero);
					temp11_2 = min(temp11_2,fmax);
					out_ptr6[0x005] = round(0.5*(temp11 + temp11_2));
					  temp11 = in_ptr0[0x006 + 0x0] + in_ptr0[0x006 + 0x5] ;
					 temp11-= 5*(in_ptr0[0x006 + 0x1] + in_ptr0[0x006 + 0x4]);
					 temp11+= 20*(in_ptr0[0x006 + 0x4] + in_ptr0[0x006 + 0x3]);
					temp11 = max(temp11,0);
					temp11 = min(temp11,0xff);
					  temp11_2 = in_ptr1[0x006 + 0x0] + in_ptr2[0x006] ;
					 temp11_2-= 5*(in_ptr3[0x006 + 0x0] + in_ptr4[0x006]);
					 temp11_2+= 20*(in_ptr0[0x006] + in_ptr5[0x006]);
					temp11_2 = max(temp11_2,fzero);
					temp11_2 = min(temp11_2,fmax);
					out_ptr6[0x006] = round(0.5*(temp11 + temp11_2));
					  temp11 = in_ptr0[0x007 + 0x0] + in_ptr0[0x007 + 0x5] ;
					 temp11-= 5*(in_ptr0[0x007 + 0x1] + in_ptr0[0x007 + 0x4]);
					 temp11+= 20*(in_ptr0[0x007 + 0x4] + in_ptr0[0x007 + 0x3]);
					temp11 = max(temp11,0);
					temp11 = min(temp11,0xff);
					  temp11_2 = in_ptr1[0x007 + 0x0] + in_ptr2[0x007] ;
					 temp11_2-= 5*(in_ptr3[0x007 + 0x0] + in_ptr4[0x007]);
					 temp11_2+= 20*(in_ptr0[0x007] + in_ptr5[0x007]);
					temp11_2 = max(temp11_2,fzero);
					temp11_2 = min(temp11_2,fmax);
					out_ptr6[0x007] = round(0.5*(temp11 + temp11_2));
				}
			}
		} 
		break;
	case 6 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			for (UINT8 j= 0 ; j< 8 ; j++){
				_fp16 temp12[13];
//				for (UINT8 i= 0 ; i< 0xd ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x - 0x2000];
					_fp16 *in_ptr1 = in_ptr0+ 0x00005000;
					_fp16 *in_ptr2 = in_ptr0+ 0x00001000;
					_fp16 *in_ptr3 = in_ptr0+ 0x00004000;
					_fp16 *in_ptr4 = in_ptr0+ 0x00002000;
					_fp16 *in_ptr5 = in_ptr0+ 0x00003000;
					temp12[0x000] = in_ptr0[0x000 + 0x0] + in_ptr1[0x000] - 5* (in_ptr2[0x000 + 0x0] + in_ptr3[0x000])+ 20* (in_ptr4[0x000] + in_ptr5[0x000]);
					temp12[0x001] = in_ptr0[0x001 + 0x0] + in_ptr1[0x001] - 5* (in_ptr2[0x001 + 0x0] + in_ptr3[0x001])+ 20* (in_ptr4[0x001] + in_ptr5[0x001]);
					temp12[0x002] = in_ptr0[0x002 + 0x0] + in_ptr1[0x002] - 5* (in_ptr2[0x002 + 0x0] + in_ptr3[0x002])+ 20* (in_ptr4[0x002] + in_ptr5[0x002]);
					temp12[0x003] = in_ptr0[0x003 + 0x0] + in_ptr1[0x003] - 5* (in_ptr2[0x003 + 0x0] + in_ptr3[0x003])+ 20* (in_ptr4[0x003] + in_ptr5[0x003]);
					temp12[0x004] = in_ptr0[0x004 + 0x0] + in_ptr1[0x004] - 5* (in_ptr2[0x004 + 0x0] + in_ptr3[0x004])+ 20* (in_ptr4[0x004] + in_ptr5[0x004]);
					temp12[0x005] = in_ptr0[0x005 + 0x0] + in_ptr1[0x005] - 5* (in_ptr2[0x005 + 0x0] + in_ptr3[0x005])+ 20* (in_ptr4[0x005] + in_ptr5[0x005]);
					temp12[0x006] = in_ptr0[0x006 + 0x0] + in_ptr1[0x006] - 5* (in_ptr2[0x006 + 0x0] + in_ptr3[0x006])+ 20* (in_ptr4[0x006] + in_ptr5[0x006]);
					temp12[0x007] = in_ptr0[0x007 + 0x0] + in_ptr1[0x007] - 5* (in_ptr2[0x007 + 0x0] + in_ptr3[0x007])+ 20* (in_ptr4[0x007] + in_ptr5[0x007]);
					temp12[0x008] = in_ptr0[0x008 + 0x0] + in_ptr1[0x008] - 5* (in_ptr2[0x008 + 0x0] + in_ptr3[0x008])+ 20* (in_ptr4[0x008] + in_ptr5[0x008]);
					temp12[0x009] = in_ptr0[0x009 + 0x0] + in_ptr1[0x009] - 5* (in_ptr2[0x009 + 0x0] + in_ptr3[0x009])+ 20* (in_ptr4[0x009] + in_ptr5[0x009]);
					temp12[0x00a] = in_ptr0[0x00a + 0x0] + in_ptr1[0x00a] - 5* (in_ptr2[0x00a + 0x0] + in_ptr3[0x00a])+ 20* (in_ptr4[0x00a] + in_ptr5[0x00a]);
					temp12[0x00b] = in_ptr0[0x00b + 0x0] + in_ptr1[0x00b] - 5* (in_ptr2[0x00b + 0x0] + in_ptr3[0x00b])+ 20* (in_ptr4[0x00b] + in_ptr5[0x00b]);
					temp12[0x00c] = in_ptr0[0x00c + 0x0] + in_ptr1[0x00c] - 5* (in_ptr2[0x00c + 0x0] + in_ptr3[0x00c])+ 20* (in_ptr4[0x00c] + in_ptr5[0x00c]);
				}
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *out_ptr0 = &out[(j<< 3)];
					 _fp16 temp12_2 = temp12[0x000] + temp12[+ 5] ;
					 temp12_2-= 5*(temp12[0x000 + 1] + temp12[+ 4]);
					 temp12_2+= 20*(temp12[0x000 + 2] + temp12[+ 3]);
					temp12_2 = max(temp12_2,fzero);
					 _fp16 temp123 = min(temp12_2,fmax);
					temp12_2 = round(0.03125*(temp12[0x000 + 2]);
					temp12_2 = max(temp12_2,fzero);
					temp12_2 = min(temp12_2,fmax);
					out_ptr0[0x000] = round(0.5*(temp123 + temp12_2));
					  temp12_2 = temp12[0x001] + temp12[+ 5] ;
					 temp12_2-= 5*(temp12[0x001 + 1] + temp12[+ 4]);
					 temp12_2+= 20*(temp12[0x001 + 2] + temp12[+ 3]);
					temp12_2 = max(temp12_2,fzero);
					  temp123 = min(temp12_2,fmax);
					temp12_2 = round(0.03125*(temp12[0x001 + 2]);
					temp12_2 = max(temp12_2,fzero);
					temp12_2 = min(temp12_2,fmax);
					out_ptr0[0x001] = round(0.5*(temp123 + temp12_2));
					  temp12_2 = temp12[0x002] + temp12[+ 5] ;
					 temp12_2-= 5*(temp12[0x002 + 1] + temp12[+ 4]);
					 temp12_2+= 20*(temp12[0x002 + 2] + temp12[+ 3]);
					temp12_2 = max(temp12_2,fzero);
					  temp123 = min(temp12_2,fmax);
					temp12_2 = round(0.03125*(temp12[0x002 + 2]);
					temp12_2 = max(temp12_2,fzero);
					temp12_2 = min(temp12_2,fmax);
					out_ptr0[0x002] = round(0.5*(temp123 + temp12_2));
					  temp12_2 = temp12[0x003] + temp12[+ 5] ;
					 temp12_2-= 5*(temp12[0x003 + 1] + temp12[+ 4]);
					 temp12_2+= 20*(temp12[0x003 + 2] + temp12[+ 3]);
					temp12_2 = max(temp12_2,fzero);
					  temp123 = min(temp12_2,fmax);
					temp12_2 = round(0.03125*(temp12[0x003 + 2]);
					temp12_2 = max(temp12_2,fzero);
					temp12_2 = min(temp12_2,fmax);
					out_ptr0[0x003] = round(0.5*(temp123 + temp12_2));
					  temp12_2 = temp12[0x004] + temp12[+ 5] ;
					 temp12_2-= 5*(temp12[0x004 + 1] + temp12[+ 4]);
					 temp12_2+= 20*(temp12[0x004 + 2] + temp12[+ 3]);
					temp12_2 = max(temp12_2,fzero);
					  temp123 = min(temp12_2,fmax);
					temp12_2 = round(0.03125*(temp12[0x004 + 2]);
					temp12_2 = max(temp12_2,fzero);
					temp12_2 = min(temp12_2,fmax);
					out_ptr0[0x004] = round(0.5*(temp123 + temp12_2));
					  temp12_2 = temp12[0x005] + temp12[+ 5] ;
					 temp12_2-= 5*(temp12[0x005 + 1] + temp12[+ 4]);
					 temp12_2+= 20*(temp12[0x005 + 2] + temp12[+ 3]);
					temp12_2 = max(temp12_2,fzero);
					  temp123 = min(temp12_2,fmax);
					temp12_2 = round(0.03125*(temp12[0x005 + 2]);
					temp12_2 = max(temp12_2,fzero);
					temp12_2 = min(temp12_2,fmax);
					out_ptr0[0x005] = round(0.5*(temp123 + temp12_2));
					  temp12_2 = temp12[0x006] + temp12[+ 5] ;
					 temp12_2-= 5*(temp12[0x006 + 1] + temp12[+ 4]);
					 temp12_2+= 20*(temp12[0x006 + 2] + temp12[+ 3]);
					temp12_2 = max(temp12_2,fzero);
					  temp123 = min(temp12_2,fmax);
					temp12_2 = round(0.03125*(temp12[0x006 + 2]);
					temp12_2 = max(temp12_2,fzero);
					temp12_2 = min(temp12_2,fmax);
					out_ptr0[0x006] = round(0.5*(temp123 + temp12_2));
					  temp12_2 = temp12[0x007] + temp12[+ 5] ;
					 temp12_2-= 5*(temp12[0x007 + 1] + temp12[+ 4]);
					 temp12_2+= 20*(temp12[0x007 + 2] + temp12[+ 3]);
					temp12_2 = max(temp12_2,fzero);
					  temp123 = min(temp12_2,fmax);
					temp12_2 = round(0.03125*(temp12[0x007 + 2]);
					temp12_2 = max(temp12_2,fzero);
					temp12_2 = min(temp12_2,fmax);
					out_ptr0[0x007] = round(0.5*(temp123 + temp12_2));
				}
			}
		} 
		break;
	case 7 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x ];
					_fp16 *in_ptr1 = in_ptr0- 0x00001ffe;
					_fp16 *in_ptr2 = in_ptr0+ 0x00003002;
					_fp16 *in_ptr3 = in_ptr0- 0x00000ffe;
					_fp16 *in_ptr4 = in_ptr0+ 0x00002002;
					_fp16 *in_ptr5 = in_ptr0+ 0x00001002;
					_fp16 *out_ptr6 = &out[(j<< 3)];
					 _fp16 temp13 = in_ptr0[0x000 + 0x0] + in_ptr0[0x000 + 0x5] ;
					 temp13-= 5*(in_ptr0[0x000 + 0x1] + in_ptr0[0x000 + 0x4]);
					 temp13+= 20*(in_ptr0[0x000 + 0x4] + in_ptr0[0x000 + 0x3]);
					temp13 = round(0.03125*temp13);
					temp13 = max(temp13,fzero);
					temp13 = min(temp13,0fmax);
					 _fp16 temp13_2 = in_ptr1[0x000 + 0x0] + in_ptr2[0x000] ;
					 temp13_2-= 5*(in_ptr3[0x000 + 0x0] + in_ptr4[0x000]);
					 temp13_2+= 20*(in_ptr0[0x000] + in_ptr5[0x000]);
					temp13_2 = round(0.03125*temp13_2);
					temp13_2 = max(temp13_2,fzero);
					temp13_2 = min(temp13_2,fmax);
					out_ptr6[0x000] = round(0.5*(temp13 + temp13_2));
					  temp13 = in_ptr0[0x001 + 0x0] + in_ptr0[0x001 + 0x5] ;
					 temp13-= 5*(in_ptr0[0x001 + 0x1] + in_ptr0[0x001 + 0x4]);
					 temp13+= 20*(in_ptr0[0x001 + 0x4] + in_ptr0[0x001 + 0x3]);
					temp13 = round(0.03125*temp13);
					temp13 = max(temp13,fzero);
					temp13 = min(temp13,0fmax);
					  temp13_2 = in_ptr1[0x001 + 0x0] + in_ptr2[0x001] ;
					 temp13_2-= 5*(in_ptr3[0x001 + 0x0] + in_ptr4[0x001]);
					 temp13_2+= 20*(in_ptr0[0x001] + in_ptr5[0x001]);
					temp13_2 = round(0.03125*temp13_2);
					temp13_2 = max(temp13_2,fzero);
					temp13_2 = min(temp13_2,fmax);
					out_ptr6[0x001] = round(0.5*(temp13 + temp13_2));
					  temp13 = in_ptr0[0x002 + 0x0] + in_ptr0[0x002 + 0x5] ;
					 temp13-= 5*(in_ptr0[0x002 + 0x1] + in_ptr0[0x002 + 0x4]);
					 temp13+= 20*(in_ptr0[0x002 + 0x4] + in_ptr0[0x002 + 0x3]);
					temp13 = round(0.03125*temp13);
					temp13 = max(temp13,fzero);
					temp13 = min(temp13,0fmax);
					  temp13_2 = in_ptr1[0x002 + 0x0] + in_ptr2[0x002] ;
					 temp13_2-= 5*(in_ptr3[0x002 + 0x0] + in_ptr4[0x002]);
					 temp13_2+= 20*(in_ptr0[0x002] + in_ptr5[0x002]);
					temp13_2 = round(0.03125*temp13_2);
					temp13_2 = max(temp13_2,fzero);
					temp13_2 = min(temp13_2,fmax);
					out_ptr6[0x002] = round(0.5*(temp13 + temp13_2));
					  temp13 = in_ptr0[0x003 + 0x0] + in_ptr0[0x003 + 0x5] ;
					 temp13-= 5*(in_ptr0[0x003 + 0x1] + in_ptr0[0x003 + 0x4]);
					 temp13+= 20*(in_ptr0[0x003 + 0x4] + in_ptr0[0x003 + 0x3]);
					temp13 = round(0.03125*temp13);
					temp13 = max(temp13,fzero);
					temp13 = min(temp13,0fmax);
					  temp13_2 = in_ptr1[0x003 + 0x0] + in_ptr2[0x003] ;
					 temp13_2-= 5*(in_ptr3[0x003 + 0x0] + in_ptr4[0x003]);
					 temp13_2+= 20*(in_ptr0[0x003] + in_ptr5[0x003]);
					temp13_2 = round(0.03125*temp13_2);
					temp13_2 = max(temp13_2,fzero);
					temp13_2 = min(temp13_2,fmax);
					out_ptr6[0x003] = round(0.5*(temp13 + temp13_2));
					  temp13 = in_ptr0[0x004 + 0x0] + in_ptr0[0x004 + 0x5] ;
					 temp13-= 5*(in_ptr0[0x004 + 0x1] + in_ptr0[0x004 + 0x4]);
					 temp13+= 20*(in_ptr0[0x004 + 0x4] + in_ptr0[0x004 + 0x3]);
					temp13 = round(0.03125*temp13);
					temp13 = max(temp13,fzero);
					temp13 = min(temp13,0fmax);
					  temp13_2 = in_ptr1[0x004 + 0x0] + in_ptr2[0x004] ;
					 temp13_2-= 5*(in_ptr3[0x004 + 0x0] + in_ptr4[0x004]);
					 temp13_2+= 20*(in_ptr0[0x004] + in_ptr5[0x004]);
					temp13_2 = round(0.03125*temp13_2);
					temp13_2 = max(temp13_2,fzero);
					temp13_2 = min(temp13_2,fmax);
					out_ptr6[0x004] = round(0.5*(temp13 + temp13_2));
					  temp13 = in_ptr0[0x005 + 0x0] + in_ptr0[0x005 + 0x5] ;
					 temp13-= 5*(in_ptr0[0x005 + 0x1] + in_ptr0[0x005 + 0x4]);
					 temp13+= 20*(in_ptr0[0x005 + 0x4] + in_ptr0[0x005 + 0x3]);
					temp13 = round(0.03125*temp13);
					temp13 = max(temp13,fzero);
					temp13 = min(temp13,0fmax);
					  temp13_2 = in_ptr1[0x005 + 0x0] + in_ptr2[0x005] ;
					 temp13_2-= 5*(in_ptr3[0x005 + 0x0] + in_ptr4[0x005]);
					 temp13_2+= 20*(in_ptr0[0x005] + in_ptr5[0x005]);
					temp13_2 = round(0.03125*temp13_2);
					temp13_2 = max(temp13_2,fzero);
					temp13_2 = min(temp13_2,fmax);
					out_ptr6[0x005] = round(0.5*(temp13 + temp13_2));
					  temp13 = in_ptr0[0x006 + 0x0] + in_ptr0[0x006 + 0x5] ;
					 temp13-= 5*(in_ptr0[0x006 + 0x1] + in_ptr0[0x006 + 0x4]);
					 temp13+= 20*(in_ptr0[0x006 + 0x4] + in_ptr0[0x006 + 0x3]);
					temp13 = round(0.03125*temp13);
					temp13 = max(temp13,fzero);
					temp13 = min(temp13,0fmax);
					  temp13_2 = in_ptr1[0x006 + 0x0] + in_ptr2[0x006] ;
					 temp13_2-= 5*(in_ptr3[0x006 + 0x0] + in_ptr4[0x006]);
					 temp13_2+= 20*(in_ptr0[0x006] + in_ptr5[0x006]);
					temp13_2 = round(0.03125*temp13_2);
					temp13_2 = max(temp13_2,fzero);
					temp13_2 = min(temp13_2,fmax);
					out_ptr6[0x006] = round(0.5*(temp13 + temp13_2));
					  temp13 = in_ptr0[0x007 + 0x0] + in_ptr0[0x007 + 0x5] ;
					 temp13-= 5*(in_ptr0[0x007 + 0x1] + in_ptr0[0x007 + 0x4]);
					 temp13+= 20*(in_ptr0[0x007 + 0x4] + in_ptr0[0x007 + 0x3]);
					temp13 = round(0.03125*temp13);
					temp13 = max(temp13,fzero);
					temp13 = min(temp13,0fmax);
					  temp13_2 = in_ptr1[0x007 + 0x0] + in_ptr2[0x007] ;
					 temp13_2-= 5*(in_ptr3[0x007 + 0x0] + in_ptr4[0x007]);
					 temp13_2+= 20*(in_ptr0[0x007] + in_ptr5[0x007]);
					temp13_2 = round(0.03125*temp13_2);
					temp13_2 = max(temp13_2,fzero);
					temp13_2 = min(temp13_2,fmax);
					out_ptr6[0x007] = round(0.5*(temp13 + temp13_2));
				}
			}
		} 
		break;
	case 8 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x ];
					_fp16 *out_ptr1 = &out[(j<< 3)];
					 _fp16 out_reg = in_ptr0[0x000 + 0x0] + in_ptr0[0x000 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x000 + 0x1] + in_ptr0[0x000 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x000 + 0x4] + in_ptr0[0x000 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x000] = round(out_reg);
					  out_reg = in_ptr0[0x001 + 0x0] + in_ptr0[0x001 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x001 + 0x1] + in_ptr0[0x001 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x001 + 0x4] + in_ptr0[0x001 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x001] = round(out_reg);
					  out_reg = in_ptr0[0x002 + 0x0] + in_ptr0[0x002 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x002 + 0x1] + in_ptr0[0x002 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x002 + 0x4] + in_ptr0[0x002 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x002] = round(out_reg);
					  out_reg = in_ptr0[0x003 + 0x0] + in_ptr0[0x003 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x003 + 0x1] + in_ptr0[0x003 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x003 + 0x4] + in_ptr0[0x003 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x003] = round(out_reg);
					  out_reg = in_ptr0[0x004 + 0x0] + in_ptr0[0x004 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x004 + 0x1] + in_ptr0[0x004 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x004 + 0x4] + in_ptr0[0x004 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x004] = round(out_reg);
					  out_reg = in_ptr0[0x005 + 0x0] + in_ptr0[0x005 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x005 + 0x1] + in_ptr0[0x005 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x005 + 0x4] + in_ptr0[0x005 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x005] = round(out_reg);
					  out_reg = in_ptr0[0x006 + 0x0] + in_ptr0[0x006 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x006 + 0x1] + in_ptr0[0x006 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x006 + 0x4] + in_ptr0[0x006 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x006] = round(out_reg);
					  out_reg = in_ptr0[0x007 + 0x0] + in_ptr0[0x007 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x007 + 0x1] + in_ptr0[0x007 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x007 + 0x4] + in_ptr0[0x007 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x007] = round(out_reg);
				}
			}
		} 
		break;
	case 9 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			_fp16 temp21[0x80];
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 0xd ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x - 0x2000];
					_fp16 *in_ptr1 = in_ptr0+ 0x00005000;
					_fp16 *in_ptr2 = in_ptr0+ 0x00001000;
					_fp16 *in_ptr3 = in_ptr0+ 0x00004000;
					_fp16 *in_ptr4 = in_ptr0+ 0x00002000;
					_fp16 *in_ptr5 = in_ptr0+ 0x00003000;
					_fp16 *temp21_ptr6 = &temp21[(j<< 4)];
					 _fp16 temp21_1 = in_ptr0[0x000 + 0x0] + in_ptr1[0x000] ;
					 temp21_1-= 5*(in_ptr2[0x000 + 0x0] + in_ptr3[0x000]);
					 temp21_1+= 20*(in_ptr4[0x000] + in_ptr5[0x000]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x000] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x001 + 0x0] + in_ptr1[0x001] ;
					 temp21_1-= 5*(in_ptr2[0x001 + 0x0] + in_ptr3[0x001]);
					 temp21_1+= 20*(in_ptr4[0x001] + in_ptr5[0x001]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x001] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x002 + 0x0] + in_ptr1[0x002] ;
					 temp21_1-= 5*(in_ptr2[0x002 + 0x0] + in_ptr3[0x002]);
					 temp21_1+= 20*(in_ptr4[0x002] + in_ptr5[0x002]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x002] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x003 + 0x0] + in_ptr1[0x003] ;
					 temp21_1-= 5*(in_ptr2[0x003 + 0x0] + in_ptr3[0x003]);
					 temp21_1+= 20*(in_ptr4[0x003] + in_ptr5[0x003]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x003] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x004 + 0x0] + in_ptr1[0x004] ;
					 temp21_1-= 5*(in_ptr2[0x004 + 0x0] + in_ptr3[0x004]);
					 temp21_1+= 20*(in_ptr4[0x004] + in_ptr5[0x004]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x004] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x005 + 0x0] + in_ptr1[0x005] ;
					 temp21_1-= 5*(in_ptr2[0x005 + 0x0] + in_ptr3[0x005]);
					 temp21_1+= 20*(in_ptr4[0x005] + in_ptr5[0x005]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x005] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x006 + 0x0] + in_ptr1[0x006] ;
					 temp21_1-= 5*(in_ptr2[0x006 + 0x0] + in_ptr3[0x006]);
					 temp21_1+= 20*(in_ptr4[0x006] + in_ptr5[0x006]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x006] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x007 + 0x0] + in_ptr1[0x007] ;
					 temp21_1-= 5*(in_ptr2[0x007 + 0x0] + in_ptr3[0x007]);
					 temp21_1+= 20*(in_ptr4[0x007] + in_ptr5[0x007]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x007] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x008 + 0x0] + in_ptr1[0x008] ;
					 temp21_1-= 5*(in_ptr2[0x008 + 0x0] + in_ptr3[0x008]);
					 temp21_1+= 20*(in_ptr4[0x008] + in_ptr5[0x008]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x008] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x009 + 0x0] + in_ptr1[0x009] ;
					 temp21_1-= 5*(in_ptr2[0x009 + 0x0] + in_ptr3[0x009]);
					 temp21_1+= 20*(in_ptr4[0x009] + in_ptr5[0x009]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x009] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x00a + 0x0] + in_ptr1[0x00a] ;
					 temp21_1-= 5*(in_ptr2[0x00a + 0x0] + in_ptr3[0x00a]);
					 temp21_1+= 20*(in_ptr4[0x00a] + in_ptr5[0x00a]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x00a] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x00b + 0x0] + in_ptr1[0x00b] ;
					 temp21_1-= 5*(in_ptr2[0x00b + 0x0] + in_ptr3[0x00b]);
					 temp21_1+= 20*(in_ptr4[0x00b] + in_ptr5[0x00b]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x00b] = min(temp21_1,fmax);
					  temp21_1 = in_ptr0[0x00c + 0x0] + in_ptr1[0x00c] ;
					 temp21_1-= 5*(in_ptr2[0x00c + 0x0] + in_ptr3[0x00c]);
					 temp21_1+= 20*(in_ptr4[0x00c] + in_ptr5[0x00c]);
					temp21_1 = max(temp21_1,fzero);
					temp21_ptr6[0x00c] = min(temp21_1,fmax);
				}
			}
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *temp21_ptr0 = &temp21[(j<< 4)];
					_fp16 *out_ptr1 = &out[(j<< 3)];
					 _fp16 temp21_2 = temp21_ptr0[0x000] + temp21_ptr0[0x005] ;
					 temp21_2-= 5*(temp21_ptr0[0x001] + temp21_ptr0[0x004]);
					 temp21_2+= 20*(temp21_ptr0[0x002] + temp21_ptr0[0x003]);
					temp21_2 = max(temp21_2,fzero);
					temp21_2 = min(temp21_2,fmax);
					out_ptr1[0x000] = round(0.5*(((temp21_ptr0[0x000] + 0x10)*0.03125)+ temp21_2));
					  temp21_2 = temp21_ptr0[0x001] + temp21_ptr0[0x006] ;
					 temp21_2-= 5*(temp21_ptr0[0x002] + temp21_ptr0[0x005]);
					 temp21_2+= 20*(temp21_ptr0[0x003] + temp21_ptr0[0x004]);
					temp21_2 = max(temp21_2,fzero);
					temp21_2 = min(temp21_2,fmax);
					out_ptr1[0x001] = round(0.5*(((temp21_ptr0[0x001] + 0x10)*0.03125)+ temp21_2));
					  temp21_2 = temp21_ptr0[0x002] + temp21_ptr0[0x007] ;
					 temp21_2-= 5*(temp21_ptr0[0x003] + temp21_ptr0[0x006]);
					 temp21_2+= 20*(temp21_ptr0[0x004] + temp21_ptr0[0x005]);
					temp21_2 = max(temp21_2,fzero);
					temp21_2 = min(temp21_2,fmax);
					out_ptr1[0x002] = round(0.5*(((temp21_ptr0[0x002] + 0x10)*0.03125)+ temp21_2));
					  temp21_2 = temp21_ptr0[0x003] + temp21_ptr0[0x008] ;
					 temp21_2-= 5*(temp21_ptr0[0x004] + temp21_ptr0[0x007]);
					 temp21_2+= 20*(temp21_ptr0[0x005] + temp21_ptr0[0x006]);
					temp21_2 = max(temp21_2,fzero);
					temp21_2 = min(temp21_2,fmax);
					out_ptr1[0x003] = round(0.5*(((temp21_ptr0[0x003] + 0x10)*0.03125)+ temp21_2));
					  temp21_2 = temp21_ptr0[0x004] + temp21_ptr0[0x009] ;
					 temp21_2-= 5*(temp21_ptr0[0x005] + temp21_ptr0[0x008]);
					 temp21_2+= 20*(temp21_ptr0[0x006] + temp21_ptr0[0x007]);
					temp21_2 = max(temp21_2,fzero);
					temp21_2 = min(temp21_2,fmax);
					out_ptr1[0x004] = round(0.5*(((temp21_ptr0[0x004] + 0x10)*0.03125)+ temp21_2));
					  temp21_2 = temp21_ptr0[0x005] + temp21_ptr0[0x00a] ;
					 temp21_2-= 5*(temp21_ptr0[0x006] + temp21_ptr0[0x009]);
					 temp21_2+= 20*(temp21_ptr0[0x007] + temp21_ptr0[0x008]);
					temp21_2 = max(temp21_2,fzero);
					temp21_2 = min(temp21_2,fmax);
					out_ptr1[0x005] = round(0.5*(((temp21_ptr0[0x005] + 0x10)*0.03125)+ temp21_2));
					  temp21_2 = temp21_ptr0[0x006] + temp21_ptr0[0x00b] ;
					 temp21_2-= 5*(temp21_ptr0[0x007] + temp21_ptr0[0x00a]);
					 temp21_2+= 20*(temp21_ptr0[0x008] + temp21_ptr0[0x009]);
					temp21_2 = max(temp21_2,fzero);
					temp21_2 = min(temp21_2,fmax);
					out_ptr1[0x006] = round(0.5*(((temp21_ptr0[0x006] + 0x10)*0.03125)+ temp21_2));
					  temp21_2 = temp21_ptr0[0x007] + temp21_ptr0[0x00c] ;
					 temp21_2-= 5*(temp21_ptr0[0x008] + temp21_ptr0[0x00b]);
					 temp21_2+= 20*(temp21_ptr0[0x009] + temp21_ptr0[0x00a]);
					temp21_2 = max(temp21_2,fzero);
					temp21_2 = min(temp21_2,fmax);
					out_ptr1[0x007] = round(0.5*(((temp21_ptr0[0x007] + 0x10)*0.03125)+ temp21_2));
				}
			}
		} 
		break;
	case 10 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			_fp16 temp22[0x80];
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 0xd ; i++){
					{	// 5 
					_fp16 *temp22_ptr0 = &temp22[(j<< 4)];
					_fp16 *in_ptr1 = &in[((y + j)<< 12)+ x ];
					temp22_ptr0[0x000] = in_ptr1[0x000 + 0x0] + in_ptr1[0x000 + 0x5] - 5* (in_ptr1[0x000 + 0x1] + in_ptr1[0x000 + 0x4])+ 20* (in_ptr1[0x000 + 0x4] + in_ptr1[0x000 + 0x3]);
					temp22_ptr0[0x001] = in_ptr1[0x001 + 0x0] + in_ptr1[0x001 + 0x5] - 5* (in_ptr1[0x001 + 0x1] + in_ptr1[0x001 + 0x4])+ 20* (in_ptr1[0x001 + 0x4] + in_ptr1[0x001 + 0x3]);
					temp22_ptr0[0x002] = in_ptr1[0x002 + 0x0] + in_ptr1[0x002 + 0x5] - 5* (in_ptr1[0x002 + 0x1] + in_ptr1[0x002 + 0x4])+ 20* (in_ptr1[0x002 + 0x4] + in_ptr1[0x002 + 0x3]);
					temp22_ptr0[0x003] = in_ptr1[0x003 + 0x0] + in_ptr1[0x003 + 0x5] - 5* (in_ptr1[0x003 + 0x1] + in_ptr1[0x003 + 0x4])+ 20* (in_ptr1[0x003 + 0x4] + in_ptr1[0x003 + 0x3]);
					temp22_ptr0[0x004] = in_ptr1[0x004 + 0x0] + in_ptr1[0x004 + 0x5] - 5* (in_ptr1[0x004 + 0x1] + in_ptr1[0x004 + 0x4])+ 20* (in_ptr1[0x004 + 0x4] + in_ptr1[0x004 + 0x3]);
					temp22_ptr0[0x005] = in_ptr1[0x005 + 0x0] + in_ptr1[0x005 + 0x5] - 5* (in_ptr1[0x005 + 0x1] + in_ptr1[0x005 + 0x4])+ 20* (in_ptr1[0x005 + 0x4] + in_ptr1[0x005 + 0x3]);
					temp22_ptr0[0x006] = in_ptr1[0x006 + 0x0] + in_ptr1[0x006 + 0x5] - 5* (in_ptr1[0x006 + 0x1] + in_ptr1[0x006 + 0x4])+ 20* (in_ptr1[0x006 + 0x4] + in_ptr1[0x006 + 0x3]);
					temp22_ptr0[0x007] = in_ptr1[0x007 + 0x0] + in_ptr1[0x007 + 0x5] - 5* (in_ptr1[0x007 + 0x1] + in_ptr1[0x007 + 0x4])+ 20* (in_ptr1[0x007 + 0x4] + in_ptr1[0x007 + 0x3]);
					temp22_ptr0[0x008] = in_ptr1[0x008 + 0x0] + in_ptr1[0x008 + 0x5] - 5* (in_ptr1[0x008 + 0x1] + in_ptr1[0x008 + 0x4])+ 20* (in_ptr1[0x008 + 0x4] + in_ptr1[0x008 + 0x3]);
					temp22_ptr0[0x009] = in_ptr1[0x009 + 0x0] + in_ptr1[0x009 + 0x5] - 5* (in_ptr1[0x009 + 0x1] + in_ptr1[0x009 + 0x4])+ 20* (in_ptr1[0x009 + 0x4] + in_ptr1[0x009 + 0x3]);
					temp22_ptr0[0x00a] = in_ptr1[0x00a + 0x0] + in_ptr1[0x00a + 0x5] - 5* (in_ptr1[0x00a + 0x1] + in_ptr1[0x00a + 0x4])+ 20* (in_ptr1[0x00a + 0x4] + in_ptr1[0x00a + 0x3]);
					temp22_ptr0[0x00b] = in_ptr1[0x00b + 0x0] + in_ptr1[0x00b + 0x5] - 5* (in_ptr1[0x00b + 0x1] + in_ptr1[0x00b + 0x4])+ 20* (in_ptr1[0x00b + 0x4] + in_ptr1[0x00b + 0x3]);
					temp22_ptr0[0x00c] = in_ptr1[0x00c + 0x0] + in_ptr1[0x00c + 0x5] - 5* (in_ptr1[0x00c + 0x1] + in_ptr1[0x00c + 0x4])+ 20* (in_ptr1[0x00c + 0x4] + in_ptr1[0x00c + 0x3]);
				}
			}
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *temp22_ptr0 = &temp22[(j<< 4)];
					_fp16 *out_ptr1 = &out[(j<< 3)];
					 _fp16 temp22_2 = temp22_ptr0[0x000] + temp22_ptr0[0x050] ;
					 temp22_2-= 5*(temp22_ptr0[0x010] + temp22_ptr0[0x040]);
					 temp22_2+= 20*(temp22_ptr0[0x020] + temp22_ptr0[0x030]);
					temp22_2 = max(temp22_2,fzero);
					temp22_2 = min(temp22_2,fmax);
					out_ptr1[0x000] = round(out_ptr1[0x000]);
					  temp22_2 = temp22_ptr0[0x001] + temp22_ptr0[0x051] ;
					 temp22_2-= 5*(temp22_ptr0[0x011] + temp22_ptr0[0x041]);
					 temp22_2+= 20*(temp22_ptr0[0x021] + temp22_ptr0[0x031]);
					temp22_2 = max(temp22_2,fzero);
					temp22_2 = min(temp22_2,fmax);
					out_ptr1[0x001] = round(out_ptr1[0x001]);
					  temp22_2 = temp22_ptr0[0x002] + temp22_ptr0[0x052] ;
					 temp22_2-= 5*(temp22_ptr0[0x012] + temp22_ptr0[0x042]);
					 temp22_2+= 20*(temp22_ptr0[0x022] + temp22_ptr0[0x032]);
					temp22_2 = max(temp22_2,fzero);
					temp22_2 = min(temp22_2,fmax);
					out_ptr1[0x002] = round(out_ptr1[0x002]);
					  temp22_2 = temp22_ptr0[0x003] + temp22_ptr0[0x053] ;
					 temp22_2-= 5*(temp22_ptr0[0x013] + temp22_ptr0[0x043]);
					 temp22_2+= 20*(temp22_ptr0[0x023] + temp22_ptr0[0x033]);
					temp22_2 = max(temp22_2,fzero);
					temp22_2 = min(temp22_2,fmax);
					out_ptr1[0x003] = round(out_ptr1[0x003]);
					  temp22_2 = temp22_ptr0[0x004] + temp22_ptr0[0x054] ;
					 temp22_2-= 5*(temp22_ptr0[0x014] + temp22_ptr0[0x044]);
					 temp22_2+= 20*(temp22_ptr0[0x024] + temp22_ptr0[0x034]);
					temp22_2 = max(temp22_2,fzero);
					temp22_2 = min(temp22_2,fmax);
					out_ptr1[0x004] = round(out_ptr1[0x004]);
					  temp22_2 = temp22_ptr0[0x005] + temp22_ptr0[0x055] ;
					 temp22_2-= 5*(temp22_ptr0[0x015] + temp22_ptr0[0x045]);
					 temp22_2+= 20*(temp22_ptr0[0x025] + temp22_ptr0[0x035]);
					temp22_2 = max(temp22_2,fzero);
					temp22_2 = min(temp22_2,fmax);
					out_ptr1[0x005] = round(out_ptr1[0x005]);
					  temp22_2 = temp22_ptr0[0x006] + temp22_ptr0[0x056] ;
					 temp22_2-= 5*(temp22_ptr0[0x016] + temp22_ptr0[0x046]);
					 temp22_2+= 20*(temp22_ptr0[0x026] + temp22_ptr0[0x036]);
					temp22_2 = max(temp22_2,fzero);
					temp22_2 = min(temp22_2,fmax);
					out_ptr1[0x006] = round(out_ptr1[0x006]);
					  temp22_2 = temp22_ptr0[0x007] + temp22_ptr0[0x057] ;
					 temp22_2-= 5*(temp22_ptr0[0x017] + temp22_ptr0[0x047]);
					 temp22_2+= 20*(temp22_ptr0[0x027] + temp22_ptr0[0x037]);
					temp22_2 = max(temp22_2,fzero);
					temp22_2 = min(temp22_2,fmax);
					out_ptr1[0x007] = round(out_ptr1[0x007]);
				}
			}
		} 
		break;
	case 11 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			_fp16 temp23[0x80];
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 0xd ; i++){
					{	// 5 
					_fp16 *temp23_ptr0 = &temp23[(j<< 4)];
					_fp16 *in_ptr1 = &in[((y + j)<< 12)+ x ];
					temp23_ptr0[0x000] = in_ptr1[0x000 + 0x0] + in_ptr1[0x000 + 0x5] - 5* (in_ptr1[0x000 + 0x1] + in_ptr1[0x000 + 0x4])+ 20* (in_ptr1[0x000 + 0x4] + in_ptr1[0x000 + 0x3]);
					temp23_ptr0[0x001] = in_ptr1[0x001 + 0x0] + in_ptr1[0x001 + 0x5] - 5* (in_ptr1[0x001 + 0x1] + in_ptr1[0x001 + 0x4])+ 20* (in_ptr1[0x001 + 0x4] + in_ptr1[0x001 + 0x3]);
					temp23_ptr0[0x002] = in_ptr1[0x002 + 0x0] + in_ptr1[0x002 + 0x5] - 5* (in_ptr1[0x002 + 0x1] + in_ptr1[0x002 + 0x4])+ 20* (in_ptr1[0x002 + 0x4] + in_ptr1[0x002 + 0x3]);
					temp23_ptr0[0x003] = in_ptr1[0x003 + 0x0] + in_ptr1[0x003 + 0x5] - 5* (in_ptr1[0x003 + 0x1] + in_ptr1[0x003 + 0x4])+ 20* (in_ptr1[0x003 + 0x4] + in_ptr1[0x003 + 0x3]);
					temp23_ptr0[0x004] = in_ptr1[0x004 + 0x0] + in_ptr1[0x004 + 0x5] - 5* (in_ptr1[0x004 + 0x1] + in_ptr1[0x004 + 0x4])+ 20* (in_ptr1[0x004 + 0x4] + in_ptr1[0x004 + 0x3]);
					temp23_ptr0[0x005] = in_ptr1[0x005 + 0x0] + in_ptr1[0x005 + 0x5] - 5* (in_ptr1[0x005 + 0x1] + in_ptr1[0x005 + 0x4])+ 20* (in_ptr1[0x005 + 0x4] + in_ptr1[0x005 + 0x3]);
					temp23_ptr0[0x006] = in_ptr1[0x006 + 0x0] + in_ptr1[0x006 + 0x5] - 5* (in_ptr1[0x006 + 0x1] + in_ptr1[0x006 + 0x4])+ 20* (in_ptr1[0x006 + 0x4] + in_ptr1[0x006 + 0x3]);
					temp23_ptr0[0x007] = in_ptr1[0x007 + 0x0] + in_ptr1[0x007 + 0x5] - 5* (in_ptr1[0x007 + 0x1] + in_ptr1[0x007 + 0x4])+ 20* (in_ptr1[0x007 + 0x4] + in_ptr1[0x007 + 0x3]);
					temp23_ptr0[0x008] = in_ptr1[0x008 + 0x0] + in_ptr1[0x008 + 0x5] - 5* (in_ptr1[0x008 + 0x1] + in_ptr1[0x008 + 0x4])+ 20* (in_ptr1[0x008 + 0x4] + in_ptr1[0x008 + 0x3]);
					temp23_ptr0[0x009] = in_ptr1[0x009 + 0x0] + in_ptr1[0x009 + 0x5] - 5* (in_ptr1[0x009 + 0x1] + in_ptr1[0x009 + 0x4])+ 20* (in_ptr1[0x009 + 0x4] + in_ptr1[0x009 + 0x3]);
					temp23_ptr0[0x00a] = in_ptr1[0x00a + 0x0] + in_ptr1[0x00a + 0x5] - 5* (in_ptr1[0x00a + 0x1] + in_ptr1[0x00a + 0x4])+ 20* (in_ptr1[0x00a + 0x4] + in_ptr1[0x00a + 0x3]);
					temp23_ptr0[0x00b] = in_ptr1[0x00b + 0x0] + in_ptr1[0x00b + 0x5] - 5* (in_ptr1[0x00b + 0x1] + in_ptr1[0x00b + 0x4])+ 20* (in_ptr1[0x00b + 0x4] + in_ptr1[0x00b + 0x3]);
					temp23_ptr0[0x00c] = in_ptr1[0x00c + 0x0] + in_ptr1[0x00c + 0x5] - 5* (in_ptr1[0x00c + 0x1] + in_ptr1[0x00c + 0x4])+ 20* (in_ptr1[0x00c + 0x4] + in_ptr1[0x00c + 0x3]);
				}
			}
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *temp23_ptr0 = &temp23[(j<< 4)];
					_fp16 *in_ptr1 = &in[((y + j)<< 12)+ x + 0x3000];
					_fp16 *out_ptr2 = &out[(j<< 3)];
					 _fp16 temp23_2 = temp23_ptr0[0x000] + temp23_ptr0[0x050] ;
					 temp23_2-= 5*(temp23_ptr0[0x010] + temp23_ptr0[0x040]);
					 temp23_2+= 20*(temp23_ptr0[0x020] + temp23_ptr0[0x030]);
					temp23_2 = (temp23_2 + 0x200)>> 10 ;
					temp23_2 = max(temp23_2,fzero);
					 _fp16 temp23_3 = min(temp23_2,fmax);
					temp23_2 = round(0.03125*in_ptr1[0x000]);
					temp23_2 = max(temp23_2,fzero);
					temp23_2 = min(temp23_2,fmax);
					out_ptr2[0x000] = round(0.5*(temp23_3 + temp23_2));
					  temp23_2 = temp23_ptr0[0x001] + temp23_ptr0[0x051] ;
					 temp23_2-= 5*(temp23_ptr0[0x011] + temp23_ptr0[0x041]);
					 temp23_2+= 20*(temp23_ptr0[0x021] + temp23_ptr0[0x031]);
					temp23_2 = (temp23_2 + 0x200)>> 10 ;
					temp23_2 = max(temp23_2,fzero);
					  temp23_3 = min(temp23_2,fmax);
					temp23_2 = round(0.03125*in_ptr1[0x001]);
					temp23_2 = max(temp23_2,fzero);
					temp23_2 = min(temp23_2,fmax);
					out_ptr2[0x001] = round(0.5*(temp23_3 + temp23_2));
					  temp23_2 = temp23_ptr0[0x002] + temp23_ptr0[0x052] ;
					 temp23_2-= 5*(temp23_ptr0[0x012] + temp23_ptr0[0x042]);
					 temp23_2+= 20*(temp23_ptr0[0x022] + temp23_ptr0[0x032]);
					temp23_2 = (temp23_2 + 0x200)>> 10 ;
					temp23_2 = max(temp23_2,fzero);
					  temp23_3 = min(temp23_2,fmax);
					temp23_2 = round(0.03125*in_ptr1[0x002]);
					temp23_2 = max(temp23_2,fzero);
					temp23_2 = min(temp23_2,fmax);
					out_ptr2[0x002] = round(0.5*(temp23_3 + temp23_2));
					  temp23_2 = temp23_ptr0[0x003] + temp23_ptr0[0x053] ;
					 temp23_2-= 5*(temp23_ptr0[0x013] + temp23_ptr0[0x043]);
					 temp23_2+= 20*(temp23_ptr0[0x023] + temp23_ptr0[0x033]);
					temp23_2 = (temp23_2 + 0x200)>> 10 ;
					temp23_2 = max(temp23_2,fzero);
					  temp23_3 = min(temp23_2,fmax);
					temp23_2 = round(0.03125*in_ptr1[0x003]);
					temp23_2 = max(temp23_2,fzero);
					temp23_2 = min(temp23_2,fmax);
					out_ptr2[0x003] = round(0.5*(temp23_3 + temp23_2));
					  temp23_2 = temp23_ptr0[0x004] + temp23_ptr0[0x054] ;
					 temp23_2-= 5*(temp23_ptr0[0x014] + temp23_ptr0[0x044]);
					 temp23_2+= 20*(temp23_ptr0[0x024] + temp23_ptr0[0x034]);
					temp23_2 = (temp23_2 + 0x200)>> 10 ;
					temp23_2 = max(temp23_2,fzero);
					  temp23_3 = min(temp23_2,fmax);
					temp23_2 = round(0.03125*in_ptr1[0x004]);
					temp23_2 = max(temp23_2,fzero);
					temp23_2 = min(temp23_2,fmax);
					out_ptr2[0x004] = round(0.5*(temp23_3 + temp23_2));
					  temp23_2 = temp23_ptr0[0x005] + temp23_ptr0[0x055] ;
					 temp23_2-= 5*(temp23_ptr0[0x015] + temp23_ptr0[0x045]);
					 temp23_2+= 20*(temp23_ptr0[0x025] + temp23_ptr0[0x035]);
					temp23_2 = (temp23_2 + 0x200)>> 10 ;
					temp23_2 = max(temp23_2,fzero);
					  temp23_3 = min(temp23_2,fmax);
					temp23_2 = round(0.03125*in_ptr1[0x005]);
					temp23_2 = max(temp23_2,fzero);
					temp23_2 = min(temp23_2,fmax);
					out_ptr2[0x005] = round(0.5*(temp23_3 + temp23_2));
					  temp23_2 = temp23_ptr0[0x006] + temp23_ptr0[0x056] ;
					 temp23_2-= 5*(temp23_ptr0[0x016] + temp23_ptr0[0x046]);
					 temp23_2+= 20*(temp23_ptr0[0x026] + temp23_ptr0[0x036]);
					temp23_2 = (temp23_2 + 0x200)>> 10 ;
					temp23_2 = max(temp23_2,fzero);
					  temp23_3 = min(temp23_2,fmax);
					temp23_2 = round(0.03125*in_ptr1[0x006]);
					temp23_2 = max(temp23_2,fzero);
					temp23_2 = min(temp23_2,fmax);
					out_ptr2[0x006] = round(0.5*(temp23_3 + temp23_2));
					  temp23_2 = temp23_ptr0[0x007] + temp23_ptr0[0x057] ;
					 temp23_2-= 5*(temp23_ptr0[0x017] + temp23_ptr0[0x047]);
					 temp23_2+= 20*(temp23_ptr0[0x027] + temp23_ptr0[0x037]);
					temp23_2 = (temp23_2 + 0x200)>> 10 ;
					temp23_2 = max(temp23_2,fzero);
					  temp23_3 = min(temp23_2,fmax);
					temp23_2 = round(0.03125*in_ptr1[0x007]);
					temp23_2 = max(temp23_2,fzero);
					temp23_2 = min(temp23_2,fmax);
					out_ptr2[0x007] = round(0.5*(temp23_3 + temp23_2));
				}
			}
		} 
		break;
	case 12 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x ];
					_fp16 *out_ptr1 = &out[(j<< 3)];
					 _fp16 out_reg = in_ptr0[0x000 + 0x0] + in_ptr0[0x000 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x000 + 0x1] + in_ptr0[0x000 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x000 + 0x4] + in_ptr0[0x000 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x000] = round(0.5*(out_reg + in_ptr0[0x000 + 0x3]));
					  out_reg = in_ptr0[0x001 + 0x0] + in_ptr0[0x001 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x001 + 0x1] + in_ptr0[0x001 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x001 + 0x4] + in_ptr0[0x001 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x001] = round(0.5*(out_reg + in_ptr0[0x001 + 0x3]));
					  out_reg = in_ptr0[0x002 + 0x0] + in_ptr0[0x002 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x002 + 0x1] + in_ptr0[0x002 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x002 + 0x4] + in_ptr0[0x002 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x002] = round(0.5*(out_reg + in_ptr0[0x002 + 0x3]));
					  out_reg = in_ptr0[0x003 + 0x0] + in_ptr0[0x003 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x003 + 0x1] + in_ptr0[0x003 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x003 + 0x4] + in_ptr0[0x003 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x003] = round(0.5*(out_reg + in_ptr0[0x003 + 0x3]));
					  out_reg = in_ptr0[0x004 + 0x0] + in_ptr0[0x004 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x004 + 0x1] + in_ptr0[0x004 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x004 + 0x4] + in_ptr0[0x004 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x004] = round(0.5*(out_reg + in_ptr0[0x004 + 0x3]));
					  out_reg = in_ptr0[0x005 + 0x0] + in_ptr0[0x005 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x005 + 0x1] + in_ptr0[0x005 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x005 + 0x4] + in_ptr0[0x005 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x005] = round(0.5*(out_reg + in_ptr0[0x005 + 0x3]));
					  out_reg = in_ptr0[0x006 + 0x0] + in_ptr0[0x006 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x006 + 0x1] + in_ptr0[0x006 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x006 + 0x4] + in_ptr0[0x006 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x006] = round(0.5*(out_reg + in_ptr0[0x006 + 0x3]));
					  out_reg = in_ptr0[0x007 + 0x0] + in_ptr0[0x007 + 0x5] ;
					 out_reg-= 5*(in_ptr0[0x007 + 0x1] + in_ptr0[0x007 + 0x4]);
					 out_reg+= 20*(in_ptr0[0x007 + 0x4] + in_ptr0[0x007 + 0x3]);
					out_reg = max(out_reg,fzero);
					out_reg = min(out_reg,fmax);
					out_ptr1[0x007] = round(0.5*(out_reg + in_ptr0[0x007 + 0x3]));
				}
			}
		} 
		break;
	case 13 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			_fp16 temp31[0x80];
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 0xd ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x ];
					_fp16 *temp31_ptr1 = &temp31[(j<< 4)];
					 _fp16 temp31_reg = in_ptr0[0x000 + 0x0] + in_ptr0[0x000 + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x000 + 0x1] + in_ptr0[0x000 + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x000 + 0x4] + in_ptr0[0x000 + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x000] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x001 + 0x0] + in_ptr0[0x001 + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x001 + 0x1] + in_ptr0[0x001 + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x001 + 0x4] + in_ptr0[0x001 + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x001] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x002 + 0x0] + in_ptr0[0x002 + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x002 + 0x1] + in_ptr0[0x002 + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x002 + 0x4] + in_ptr0[0x002 + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x002] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x003 + 0x0] + in_ptr0[0x003 + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x003 + 0x1] + in_ptr0[0x003 + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x003 + 0x4] + in_ptr0[0x003 + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x003] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x004 + 0x0] + in_ptr0[0x004 + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x004 + 0x1] + in_ptr0[0x004 + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x004 + 0x4] + in_ptr0[0x004 + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x004] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x005 + 0x0] + in_ptr0[0x005 + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x005 + 0x1] + in_ptr0[0x005 + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x005 + 0x4] + in_ptr0[0x005 + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x005] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x006 + 0x0] + in_ptr0[0x006 + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x006 + 0x1] + in_ptr0[0x006 + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x006 + 0x4] + in_ptr0[0x006 + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x006] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x007 + 0x0] + in_ptr0[0x007 + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x007 + 0x1] + in_ptr0[0x007 + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x007 + 0x4] + in_ptr0[0x007 + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x007] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x008 + 0x0] + in_ptr0[0x008 + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x008 + 0x1] + in_ptr0[0x008 + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x008 + 0x4] + in_ptr0[0x008 + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x008] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x009 + 0x0] + in_ptr0[0x009 + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x009 + 0x1] + in_ptr0[0x009 + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x009 + 0x4] + in_ptr0[0x009 + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x009] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x00a + 0x0] + in_ptr0[0x00a + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x00a + 0x1] + in_ptr0[0x00a + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x00a + 0x4] + in_ptr0[0x00a + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x00a] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x00b + 0x0] + in_ptr0[0x00b + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x00b + 0x1] + in_ptr0[0x00b + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x00b + 0x4] + in_ptr0[0x00b + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x00b] = min(temp31_reg,fmax);
					  temp31_reg = in_ptr0[0x00c + 0x0] + in_ptr0[0x00c + 0x5] ;
					 temp31_reg-= 5*(in_ptr0[0x00c + 0x1] + in_ptr0[0x00c + 0x4]);
					 temp31_reg+= 20*(in_ptr0[0x00c + 0x4] + in_ptr0[0x00c + 0x3]);
					temp31_reg = round(.03125*temp31_reg);
					temp31_reg = max(temp31_reg,fzero);
					temp31_ptr1[0x00c] = min(temp31_reg,fmax);
				}
			}
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *temp31_ptr0 = &temp31[(j<< 4)];
					_fp16 *out_ptr1 = &out[(j<< 3)];
					 _fp16 temp31_2 = temp31_ptr0[0x000] + temp31_ptr0[0x050] ;
					 temp31_2-= 5*(temp31_ptr0[0x010] + temp31_ptr0[0x040]);
					 temp31_2+= 20*(temp31_ptr0[0x020] + temp31_ptr0[0x030]);
					temp31_2 = round(0.03125*temp31_2);
					temp31_2 = max(temp31_2,fzero);
					temp31_2 = min(temp31_2,fmax);
					out_ptr1[0x000] = round(0.5*(temp31_ptr0[0x000] + temp31_2));
					  temp31_2 = temp31_ptr0[0x001] + temp31_ptr0[0x051] ;
					 temp31_2-= 5*(temp31_ptr0[0x011] + temp31_ptr0[0x041]);
					 temp31_2+= 20*(temp31_ptr0[0x021] + temp31_ptr0[0x031]);
					temp31_2 = round(0.03125*temp31_2);
					temp31_2 = max(temp31_2,fzero);
					temp31_2 = min(temp31_2,fmax);
					out_ptr1[0x001] = round(0.5*(temp31_ptr0[0x001] + temp31_2));
					  temp31_2 = temp31_ptr0[0x002] + temp31_ptr0[0x052] ;
					 temp31_2-= 5*(temp31_ptr0[0x012] + temp31_ptr0[0x042]);
					 temp31_2+= 20*(temp31_ptr0[0x022] + temp31_ptr0[0x032]);
					temp31_2 = round(0.03125*temp31_2);
					temp31_2 = max(temp31_2,fzero);
					temp31_2 = min(temp31_2,fmax);
					out_ptr1[0x002] = round(0.5*(temp31_ptr0[0x002] + temp31_2));
					  temp31_2 = temp31_ptr0[0x003] + temp31_ptr0[0x053] ;
					 temp31_2-= 5*(temp31_ptr0[0x013] + temp31_ptr0[0x043]);
					 temp31_2+= 20*(temp31_ptr0[0x023] + temp31_ptr0[0x033]);
					temp31_2 = round(0.03125*temp31_2);
					temp31_2 = max(temp31_2,fzero);
					temp31_2 = min(temp31_2,fmax);
					out_ptr1[0x003] = round(0.5*(temp31_ptr0[0x003] + temp31_2));
					  temp31_2 = temp31_ptr0[0x004] + temp31_ptr0[0x054] ;
					 temp31_2-= 5*(temp31_ptr0[0x014] + temp31_ptr0[0x044]);
					 temp31_2+= 20*(temp31_ptr0[0x024] + temp31_ptr0[0x034]);
					temp31_2 = round(0.03125*temp31_2);
					temp31_2 = max(temp31_2,fzero);
					temp31_2 = min(temp31_2,fmax);
					out_ptr1[0x004] = round(0.5*(temp31_ptr0[0x004] + temp31_2));
					  temp31_2 = temp31_ptr0[0x005] + temp31_ptr0[0x055] ;
					 temp31_2-= 5*(temp31_ptr0[0x015] + temp31_ptr0[0x045]);
					 temp31_2+= 20*(temp31_ptr0[0x025] + temp31_ptr0[0x035]);
					temp31_2 = round(0.03125*temp31_2);
					temp31_2 = max(temp31_2,fzero);
					temp31_2 = min(temp31_2,fmax);
					out_ptr1[0x005] = round(0.5*(temp31_ptr0[0x005] + temp31_2));
					  temp31_2 = temp31_ptr0[0x006] + temp31_ptr0[0x056] ;
					 temp31_2-= 5*(temp31_ptr0[0x016] + temp31_ptr0[0x046]);
					 temp31_2+= 20*(temp31_ptr0[0x026] + temp31_ptr0[0x036]);
					temp31_2 = round(0.03125*temp31_2);
					temp31_2 = max(temp31_2,fzero);
					temp31_2 = min(temp31_2,fmax);
					out_ptr1[0x006] = round(0.5*(temp31_ptr0[0x006] + temp31_2));
					  temp31_2 = temp31_ptr0[0x007] + temp31_ptr0[0x057] ;
					 temp31_2-= 5*(temp31_ptr0[0x017] + temp31_ptr0[0x047]);
					 temp31_2+= 20*(temp31_ptr0[0x027] + temp31_ptr0[0x037]);
					temp31_2 = round(0.03125*temp31_2);
					temp31_2 = max(temp31_2,fzero);
					temp31_2 = min(temp31_2,fmax);
					out_ptr1[0x007] = round(0.5*(temp31_ptr0[0x007] + temp31_2));
				}
			}
		} 
		break;
	case 14 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			for (UINT8 j= 0 ; j< 8 ; j++){
				_fp16 temp32[0x10];
//				for (UINT8 i= 0 ; i< 0xd ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x - 0x2000];
					_fp16 *in_ptr1 = in_ptr0+ 0x00005000;
					_fp16 *in_ptr2 = in_ptr0+ 0x00001000;
					_fp16 *in_ptr3 = in_ptr0+ 0x00004000;
					_fp16 *in_ptr4 = in_ptr0+ 0x00002000;
					_fp16 *in_ptr5 = in_ptr0+ 0x00003000;
					temp32[0x000] = in_ptr0[0x000 + 0x0] + in_ptr1[0x000] - 5* (in_ptr2[0x000 + 0x0] + in_ptr3[0x000])+ 20* (in_ptr4[0x000] + in_ptr5[0x000]);
					temp32[0x001] = in_ptr0[0x001 + 0x0] + in_ptr1[0x001] - 5* (in_ptr2[0x001 + 0x0] + in_ptr3[0x001])+ 20* (in_ptr4[0x001] + in_ptr5[0x001]);
					temp32[0x002] = in_ptr0[0x002 + 0x0] + in_ptr1[0x002] - 5* (in_ptr2[0x002 + 0x0] + in_ptr3[0x002])+ 20* (in_ptr4[0x002] + in_ptr5[0x002]);
					temp32[0x003] = in_ptr0[0x003 + 0x0] + in_ptr1[0x003] - 5* (in_ptr2[0x003 + 0x0] + in_ptr3[0x003])+ 20* (in_ptr4[0x003] + in_ptr5[0x003]);
					temp32[0x004] = in_ptr0[0x004 + 0x0] + in_ptr1[0x004] - 5* (in_ptr2[0x004 + 0x0] + in_ptr3[0x004])+ 20* (in_ptr4[0x004] + in_ptr5[0x004]);
					temp32[0x005] = in_ptr0[0x005 + 0x0] + in_ptr1[0x005] - 5* (in_ptr2[0x005 + 0x0] + in_ptr3[0x005])+ 20* (in_ptr4[0x005] + in_ptr5[0x005]);
					temp32[0x006] = in_ptr0[0x006 + 0x0] + in_ptr1[0x006] - 5* (in_ptr2[0x006 + 0x0] + in_ptr3[0x006])+ 20* (in_ptr4[0x006] + in_ptr5[0x006]);
					temp32[0x007] = in_ptr0[0x007 + 0x0] + in_ptr1[0x007] - 5* (in_ptr2[0x007 + 0x0] + in_ptr3[0x007])+ 20* (in_ptr4[0x007] + in_ptr5[0x007]);
					temp32[0x008] = in_ptr0[0x008 + 0x0] + in_ptr1[0x008] - 5* (in_ptr2[0x008 + 0x0] + in_ptr3[0x008])+ 20* (in_ptr4[0x008] + in_ptr5[0x008]);
					temp32[0x009] = in_ptr0[0x009 + 0x0] + in_ptr1[0x009] - 5* (in_ptr2[0x009 + 0x0] + in_ptr3[0x009])+ 20* (in_ptr4[0x009] + in_ptr5[0x009]);
					temp32[0x00a] = in_ptr0[0x00a + 0x0] + in_ptr1[0x00a] - 5* (in_ptr2[0x00a + 0x0] + in_ptr3[0x00a])+ 20* (in_ptr4[0x00a] + in_ptr5[0x00a]);
					temp32[0x00b] = in_ptr0[0x00b + 0x0] + in_ptr1[0x00b] - 5* (in_ptr2[0x00b + 0x0] + in_ptr3[0x00b])+ 20* (in_ptr4[0x00b] + in_ptr5[0x00b]);
					temp32[0x00c] = in_ptr0[0x00c + 0x0] + in_ptr1[0x00c] - 5* (in_ptr2[0x00c + 0x0] + in_ptr3[0x00c])+ 20* (in_ptr4[0x00c] + in_ptr5[0x00c]);
				}
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x ];
					_fp16 *out_ptr1 = &out[(j<< 3)];
					 _fp16 temp32_2 = temp32[0x000] + temp32[+ 5] ;
					 temp32_2-= 5*(temp32[0x000 + 1] + temp32[+ 4]);
					 temp32_2+= 20*(temp32[0x000 + 2] + temp32[+ 1]);
					temp32_2 = (temp32_2 + 0x200)*0.000976563;	
					temp32_2 = max(temp32_2,fzero);
					 _fp16 temp32_3 = min(temp32_2,fmax);
					temp32_2 = round(0.03125*in_ptr0[0x000 + 0x0]);
					out_ptr1[0x000] = round(0.5*(temp32_3 + temp32_2));
					  temp32_2 = temp32[0x001] + temp32[+ 5] ;
					 temp32_2-= 5*(temp32[0x001 + 1] + temp32[+ 4]);
					 temp32_2+= 20*(temp32[0x001 + 2] + temp32[+ 1]);
					temp32_2 = (temp32_2 + 0x200)*0.000976563;	
					temp32_2 = max(temp32_2,fzero);
					  temp32_3 = min(temp32_2,fmax);
					temp32_2 = round(0.03125*in_ptr0[0x001 + 0x0]);
					out_ptr1[0x001] = round(0.5*(temp32_3 + temp32_2));
					  temp32_2 = temp32[0x002] + temp32[+ 5] ;
					 temp32_2-= 5*(temp32[0x002 + 1] + temp32[+ 4]);
					 temp32_2+= 20*(temp32[0x002 + 2] + temp32[+ 1]);
					temp32_2 = (temp32_2 + 0x200)*0.000976563;	
					temp32_2 = max(temp32_2,fzero);
					  temp32_3 = min(temp32_2,fmax);
					temp32_2 = round(0.03125*in_ptr0[0x002 + 0x0]);
					out_ptr1[0x002] = round(0.5*(temp32_3 + temp32_2));
					  temp32_2 = temp32[0x003] + temp32[+ 5] ;
					 temp32_2-= 5*(temp32[0x003 + 1] + temp32[+ 4]);
					 temp32_2+= 20*(temp32[0x003 + 2] + temp32[+ 1]);
					temp32_2 = (temp32_2 + 0x200)*0.000976563;	
					temp32_2 = max(temp32_2,fzero);
					  temp32_3 = min(temp32_2,fmax);
					temp32_2 = round(0.03125*in_ptr0[0x003 + 0x0]);
					out_ptr1[0x003] = round(0.5*(temp32_3 + temp32_2));
					  temp32_2 = temp32[0x004] + temp32[+ 5] ;
					 temp32_2-= 5*(temp32[0x004 + 1] + temp32[+ 4]);
					 temp32_2+= 20*(temp32[0x004 + 2] + temp32[+ 1]);
					temp32_2 = (temp32_2 + 0x200)*0.000976563;	
					temp32_2 = max(temp32_2,fzero);
					  temp32_3 = min(temp32_2,fmax);
					temp32_2 = round(0.03125*in_ptr0[0x004 + 0x0]);
					out_ptr1[0x004] = round(0.5*(temp32_3 + temp32_2));
					  temp32_2 = temp32[0x005] + temp32[+ 5] ;
					 temp32_2-= 5*(temp32[0x005 + 1] + temp32[+ 4]);
					 temp32_2+= 20*(temp32[0x005 + 2] + temp32[+ 1]);
					temp32_2 = (temp32_2 + 0x200)*0.000976563;	
					temp32_2 = max(temp32_2,fzero);
					  temp32_3 = min(temp32_2,fmax);
					temp32_2 = round(0.03125*in_ptr0[0x005 + 0x0]);
					out_ptr1[0x005] = round(0.5*(temp32_3 + temp32_2));
					  temp32_2 = temp32[0x006] + temp32[+ 5] ;
					 temp32_2-= 5*(temp32[0x006 + 1] + temp32[+ 4]);
					 temp32_2+= 20*(temp32[0x006 + 2] + temp32[+ 1]);
					temp32_2 = (temp32_2 + 0x200)*0.000976563;	
					temp32_2 = max(temp32_2,fzero);
					  temp32_3 = min(temp32_2,fmax);
					temp32_2 = round(0.03125*in_ptr0[0x006 + 0x0]);
					out_ptr1[0x006] = round(0.5*(temp32_3 + temp32_2));
					  temp32_2 = temp32[0x007] + temp32[+ 5] ;
					 temp32_2-= 5*(temp32[0x007 + 1] + temp32[+ 4]);
					 temp32_2+= 20*(temp32[0x007 + 2] + temp32[+ 1]);
					temp32_2 = (temp32_2 + 0x200)*0.000976563;	
					temp32_2 = max(temp32_2,fzero);
					  temp32_3 = min(temp32_2,fmax);
					temp32_2 = round(0.03125*in_ptr0[0x007 + 0x0]);
					out_ptr1[0x007] = round(0.5*(temp32_3 + temp32_2));
				}
			}
		} 
		break;
	case 15 :
{ 
			 _fp16 fzero = 0.0;
			 _fp16 fmax = 255.0;
			_fp16 temp33[0x80];
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 0xd ; i++){
					{	// 5 
					_fp16 *in_ptr0 = &in[((y + j)<< 12)+ x ];
					_fp16 *temp33_ptr1 = &temp33[(j<< 4)];
					 _fp16 temp33_reg = in_ptr0[0x000 + 0x0] + in_ptr0[0x000 + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x000 + 0x1] + in_ptr0[0x000 + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x000 + 0x4] + in_ptr0[0x000 + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x000] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x001 + 0x0] + in_ptr0[0x001 + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x001 + 0x1] + in_ptr0[0x001 + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x001 + 0x4] + in_ptr0[0x001 + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x001] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x002 + 0x0] + in_ptr0[0x002 + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x002 + 0x1] + in_ptr0[0x002 + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x002 + 0x4] + in_ptr0[0x002 + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x002] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x003 + 0x0] + in_ptr0[0x003 + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x003 + 0x1] + in_ptr0[0x003 + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x003 + 0x4] + in_ptr0[0x003 + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x003] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x004 + 0x0] + in_ptr0[0x004 + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x004 + 0x1] + in_ptr0[0x004 + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x004 + 0x4] + in_ptr0[0x004 + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x004] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x005 + 0x0] + in_ptr0[0x005 + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x005 + 0x1] + in_ptr0[0x005 + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x005 + 0x4] + in_ptr0[0x005 + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x005] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x006 + 0x0] + in_ptr0[0x006 + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x006 + 0x1] + in_ptr0[0x006 + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x006 + 0x4] + in_ptr0[0x006 + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x006] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x007 + 0x0] + in_ptr0[0x007 + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x007 + 0x1] + in_ptr0[0x007 + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x007 + 0x4] + in_ptr0[0x007 + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x007] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x008 + 0x0] + in_ptr0[0x008 + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x008 + 0x1] + in_ptr0[0x008 + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x008 + 0x4] + in_ptr0[0x008 + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x008] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x009 + 0x0] + in_ptr0[0x009 + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x009 + 0x1] + in_ptr0[0x009 + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x009 + 0x4] + in_ptr0[0x009 + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x009] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x00a + 0x0] + in_ptr0[0x00a + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x00a + 0x1] + in_ptr0[0x00a + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x00a + 0x4] + in_ptr0[0x00a + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x00a] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x00b + 0x0] + in_ptr0[0x00b + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x00b + 0x1] + in_ptr0[0x00b + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x00b + 0x4] + in_ptr0[0x00b + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x00b] = min(temp33_reg,fmax);
					  temp33_reg = in_ptr0[0x00c + 0x0] + in_ptr0[0x00c + 0x5] ;
					 temp33_reg-= 5*(in_ptr0[0x00c + 0x1] + in_ptr0[0x00c + 0x4]);
					 temp33_reg+= 20*(in_ptr0[0x00c + 0x4] + in_ptr0[0x00c + 0x3]);
					temp33_reg = round(0.03125*temp33_reg);
					temp33_reg = max(temp33_reg,fzero);
					temp33_ptr1[0x00c] = min(temp33_reg,fmax);
				}
			}
			for (UINT8 j= 0 ; j< 8 ; j++){
//				for (UINT8 i= 0 ; i< 8 ; i++){
					{	// 5 
					_fp16 *temp33_ptr0 = &temp33[(j<< 4)];
					_fp16 *out_ptr1 = &out[(j<< 3)];
					 _fp16 temp33_2 = temp33_ptr0[0x000] + temp33_ptr0[0x050] ;
					 temp33_2-= 5*(temp33_ptr0[0x010] + temp33_ptr0[0x040]);
					 temp33_2+= 20*(temp33_ptr0[0x020] + temp33_ptr0[0x030]);
					temp33_2 = round(0.03125*temp33_2);
					temp33_2 = max(temp33_2,fzero);
					temp33_2 = min(temp33_2,fmax);
					out_ptr1[0x000] = round(0.5*(temp33_ptr0[0x000] + temp33_2));
					  temp33_2 = temp33_ptr0[0x001] + temp33_ptr0[0x051] ;
					 temp33_2-= 5*(temp33_ptr0[0x011] + temp33_ptr0[0x041]);
					 temp33_2+= 20*(temp33_ptr0[0x021] + temp33_ptr0[0x031]);
					temp33_2 = round(0.03125*temp33_2);
					temp33_2 = max(temp33_2,fzero);
					temp33_2 = min(temp33_2,fmax);
					out_ptr1[0x001] = round(0.5*(temp33_ptr0[0x001] + temp33_2));
					  temp33_2 = temp33_ptr0[0x002] + temp33_ptr0[0x052] ;
					 temp33_2-= 5*(temp33_ptr0[0x012] + temp33_ptr0[0x042]);
					 temp33_2+= 20*(temp33_ptr0[0x022] + temp33_ptr0[0x032]);
					temp33_2 = round(0.03125*temp33_2);
					temp33_2 = max(temp33_2,fzero);
					temp33_2 = min(temp33_2,fmax);
					out_ptr1[0x002] = round(0.5*(temp33_ptr0[0x002] + temp33_2));
					  temp33_2 = temp33_ptr0[0x003] + temp33_ptr0[0x053] ;
					 temp33_2-= 5*(temp33_ptr0[0x013] + temp33_ptr0[0x043]);
					 temp33_2+= 20*(temp33_ptr0[0x023] + temp33_ptr0[0x033]);
					temp33_2 = round(0.03125*temp33_2);
					temp33_2 = max(temp33_2,fzero);
					temp33_2 = min(temp33_2,fmax);
					out_ptr1[0x003] = round(0.5*(temp33_ptr0[0x003] + temp33_2));
					  temp33_2 = temp33_ptr0[0x004] + temp33_ptr0[0x054] ;
					 temp33_2-= 5*(temp33_ptr0[0x014] + temp33_ptr0[0x044]);
					 temp33_2+= 20*(temp33_ptr0[0x024] + temp33_ptr0[0x034]);
					temp33_2 = round(0.03125*temp33_2);
					temp33_2 = max(temp33_2,fzero);
					temp33_2 = min(temp33_2,fmax);
					out_ptr1[0x004] = round(0.5*(temp33_ptr0[0x004] + temp33_2));
					  temp33_2 = temp33_ptr0[0x005] + temp33_ptr0[0x055] ;
					 temp33_2-= 5*(temp33_ptr0[0x015] + temp33_ptr0[0x045]);
					 temp33_2+= 20*(temp33_ptr0[0x025] + temp33_ptr0[0x035]);
					temp33_2 = round(0.03125*temp33_2);
					temp33_2 = max(temp33_2,fzero);
					temp33_2 = min(temp33_2,fmax);
					out_ptr1[0x005] = round(0.5*(temp33_ptr0[0x005] + temp33_2));
					  temp33_2 = temp33_ptr0[0x006] + temp33_ptr0[0x056] ;
					 temp33_2-= 5*(temp33_ptr0[0x016] + temp33_ptr0[0x046]);
					 temp33_2+= 20*(temp33_ptr0[0x026] + temp33_ptr0[0x036]);
					temp33_2 = round(0.03125*temp33_2);
					temp33_2 = max(temp33_2,fzero);
					temp33_2 = min(temp33_2,fmax);
					out_ptr1[0x006] = round(0.5*(temp33_ptr0[0x006] + temp33_2));
					  temp33_2 = temp33_ptr0[0x007] + temp33_ptr0[0x057] ;
					 temp33_2-= 5*(temp33_ptr0[0x017] + temp33_ptr0[0x047]);
					 temp33_2+= 20*(temp33_ptr0[0x027] + temp33_ptr0[0x037]);
					temp33_2 = round(0.03125*temp33_2);
					temp33_2 = max(temp33_2,fzero);
					temp33_2 = min(temp33_2,fmax);
					out_ptr1[0x007] = round(0.5*(temp33_ptr0[0x007] + temp33_2));
				}
			}
		} 
		break;
	default:
		break;
	}
}
void inverse8x8(_fp16 *block, _fp16 *in, UINT16 off_x, UINT16 off_y){
	_fp16 tmp[64];
	 _fp16 fc0_5 = 0.5;
	 _fp16 fc0_25 = 0.25;
//	_fp16 *in_ptr = &in[((off_y) << 4) | (off_x)];
	void *in_ptr_v = &in[(off_y<< 4)| off_x];
	UINT128 *in_ptr_i = in_ptr_v;
	UINT128 in_ptr_i2;
		//	for (int i = 0 ; i < 8 ; i++){// Horizontal 
		{	// 2 
			_fp16 a_0;
			_fp16 a_1;
			_fp16 a_2;
			_fp16 a_3;
			_fp16 b_0;
			_fp16 b_1;
			_fp16 b_2;
			_fp16 b_3;
			_fp16 b_4;
			_fp16 b_5;
			_fp16 b_6;
			_fp16 b_7;
			_fp16 p_0;
			_fp16 p_1;
			_fp16 p_2;
			_fp16 p_3;
			_fp16 p_4;
			_fp16 p_5;
			_fp16 p_6;
			_fp16 p_7;
		in_ptr_i2 = in_ptr_i[0x000];
		 short in_ptr_i3= in_ptr_i2;
		void *in_ptr_v3 = in_ptr_i3;
		p_0 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 16 ;
		p_1 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 32 ;
		p_2 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 48 ;
		p_3 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 64 ;
		p_4 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 80 ;
		p_5 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 96 ;
		p_6 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 112 ;
		p_7 = (_fp16)in_ptr_v3;

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);

		tmp[0x000<< 3] = b_0 + b_7;
		tmp[(0x000<< 3)+ 1] = b_2 - b_5 ;
		tmp[(0x000<< 3)+ 2] = b_4 + b_3;
		tmp[(0x000<< 3)+ 3] = b_6 + b_1;
		tmp[(0x000<< 3)+ 4] = b_6 - b_1 ;
		tmp[(0x000<< 3)+ 5] = b_4 - b_3 ;
		tmp[(0x000<< 3)+ 6] = b_2 + b_5;
		tmp[(0x000<< 3)+ 7] = b_0 - b_7 ;
			_fp16 a_0;
			_fp16 a_1;
			_fp16 a_2;
			_fp16 a_3;
			_fp16 b_0;
			_fp16 b_1;
			_fp16 b_2;
			_fp16 b_3;
			_fp16 b_4;
			_fp16 b_5;
			_fp16 b_6;
			_fp16 b_7;
			_fp16 p_0;
			_fp16 p_1;
			_fp16 p_2;
			_fp16 p_3;
			_fp16 p_4;
			_fp16 p_5;
			_fp16 p_6;
			_fp16 p_7;
		in_ptr_i2 = in_ptr_i[0x001];
		 short in_ptr_i3= in_ptr_i2;
		void *in_ptr_v3 = in_ptr_i3;
		p_0 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 16 ;
		p_1 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 32 ;
		p_2 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 48 ;
		p_3 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 64 ;
		p_4 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 80 ;
		p_5 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 96 ;
		p_6 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 112 ;
		p_7 = (_fp16)in_ptr_v3;

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);

		tmp[0x001<< 3] = b_0 + b_7;
		tmp[(0x001<< 3)+ 1] = b_2 - b_5 ;
		tmp[(0x001<< 3)+ 2] = b_4 + b_3;
		tmp[(0x001<< 3)+ 3] = b_6 + b_1;
		tmp[(0x001<< 3)+ 4] = b_6 - b_1 ;
		tmp[(0x001<< 3)+ 5] = b_4 - b_3 ;
		tmp[(0x001<< 3)+ 6] = b_2 + b_5;
		tmp[(0x001<< 3)+ 7] = b_0 - b_7 ;
			_fp16 a_0;
			_fp16 a_1;
			_fp16 a_2;
			_fp16 a_3;
			_fp16 b_0;
			_fp16 b_1;
			_fp16 b_2;
			_fp16 b_3;
			_fp16 b_4;
			_fp16 b_5;
			_fp16 b_6;
			_fp16 b_7;
			_fp16 p_0;
			_fp16 p_1;
			_fp16 p_2;
			_fp16 p_3;
			_fp16 p_4;
			_fp16 p_5;
			_fp16 p_6;
			_fp16 p_7;
		in_ptr_i2 = in_ptr_i[0x002];
		 short in_ptr_i3= in_ptr_i2;
		void *in_ptr_v3 = in_ptr_i3;
		p_0 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 16 ;
		p_1 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 32 ;
		p_2 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 48 ;
		p_3 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 64 ;
		p_4 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 80 ;
		p_5 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 96 ;
		p_6 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 112 ;
		p_7 = (_fp16)in_ptr_v3;

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);

		tmp[0x002<< 3] = b_0 + b_7;
		tmp[(0x002<< 3)+ 1] = b_2 - b_5 ;
		tmp[(0x002<< 3)+ 2] = b_4 + b_3;
		tmp[(0x002<< 3)+ 3] = b_6 + b_1;
		tmp[(0x002<< 3)+ 4] = b_6 - b_1 ;
		tmp[(0x002<< 3)+ 5] = b_4 - b_3 ;
		tmp[(0x002<< 3)+ 6] = b_2 + b_5;
		tmp[(0x002<< 3)+ 7] = b_0 - b_7 ;
			_fp16 a_0;
			_fp16 a_1;
			_fp16 a_2;
			_fp16 a_3;
			_fp16 b_0;
			_fp16 b_1;
			_fp16 b_2;
			_fp16 b_3;
			_fp16 b_4;
			_fp16 b_5;
			_fp16 b_6;
			_fp16 b_7;
			_fp16 p_0;
			_fp16 p_1;
			_fp16 p_2;
			_fp16 p_3;
			_fp16 p_4;
			_fp16 p_5;
			_fp16 p_6;
			_fp16 p_7;
		in_ptr_i2 = in_ptr_i[0x003];
		 short in_ptr_i3= in_ptr_i2;
		void *in_ptr_v3 = in_ptr_i3;
		p_0 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 16 ;
		p_1 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 32 ;
		p_2 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 48 ;
		p_3 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 64 ;
		p_4 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 80 ;
		p_5 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 96 ;
		p_6 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 112 ;
		p_7 = (_fp16)in_ptr_v3;

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);

		tmp[0x003<< 3] = b_0 + b_7;
		tmp[(0x003<< 3)+ 1] = b_2 - b_5 ;
		tmp[(0x003<< 3)+ 2] = b_4 + b_3;
		tmp[(0x003<< 3)+ 3] = b_6 + b_1;
		tmp[(0x003<< 3)+ 4] = b_6 - b_1 ;
		tmp[(0x003<< 3)+ 5] = b_4 - b_3 ;
		tmp[(0x003<< 3)+ 6] = b_2 + b_5;
		tmp[(0x003<< 3)+ 7] = b_0 - b_7 ;
			_fp16 a_0;
			_fp16 a_1;
			_fp16 a_2;
			_fp16 a_3;
			_fp16 b_0;
			_fp16 b_1;
			_fp16 b_2;
			_fp16 b_3;
			_fp16 b_4;
			_fp16 b_5;
			_fp16 b_6;
			_fp16 b_7;
			_fp16 p_0;
			_fp16 p_1;
			_fp16 p_2;
			_fp16 p_3;
			_fp16 p_4;
			_fp16 p_5;
			_fp16 p_6;
			_fp16 p_7;
		in_ptr_i2 = in_ptr_i[0x004];
		 short in_ptr_i3= in_ptr_i2;
		void *in_ptr_v3 = in_ptr_i3;
		p_0 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 16 ;
		p_1 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 32 ;
		p_2 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 48 ;
		p_3 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 64 ;
		p_4 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 80 ;
		p_5 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 96 ;
		p_6 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 112 ;
		p_7 = (_fp16)in_ptr_v3;

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);

		tmp[0x004<< 3] = b_0 + b_7;
		tmp[(0x004<< 3)+ 1] = b_2 - b_5 ;
		tmp[(0x004<< 3)+ 2] = b_4 + b_3;
		tmp[(0x004<< 3)+ 3] = b_6 + b_1;
		tmp[(0x004<< 3)+ 4] = b_6 - b_1 ;
		tmp[(0x004<< 3)+ 5] = b_4 - b_3 ;
		tmp[(0x004<< 3)+ 6] = b_2 + b_5;
		tmp[(0x004<< 3)+ 7] = b_0 - b_7 ;
			_fp16 a_0;
			_fp16 a_1;
			_fp16 a_2;
			_fp16 a_3;
			_fp16 b_0;
			_fp16 b_1;
			_fp16 b_2;
			_fp16 b_3;
			_fp16 b_4;
			_fp16 b_5;
			_fp16 b_6;
			_fp16 b_7;
			_fp16 p_0;
			_fp16 p_1;
			_fp16 p_2;
			_fp16 p_3;
			_fp16 p_4;
			_fp16 p_5;
			_fp16 p_6;
			_fp16 p_7;
		in_ptr_i2 = in_ptr_i[0x005];
		 short in_ptr_i3= in_ptr_i2;
		void *in_ptr_v3 = in_ptr_i3;
		p_0 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 16 ;
		p_1 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 32 ;
		p_2 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 48 ;
		p_3 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 64 ;
		p_4 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 80 ;
		p_5 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 96 ;
		p_6 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 112 ;
		p_7 = (_fp16)in_ptr_v3;

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);

		tmp[0x005<< 3] = b_0 + b_7;
		tmp[(0x005<< 3)+ 1] = b_2 - b_5 ;
		tmp[(0x005<< 3)+ 2] = b_4 + b_3;
		tmp[(0x005<< 3)+ 3] = b_6 + b_1;
		tmp[(0x005<< 3)+ 4] = b_6 - b_1 ;
		tmp[(0x005<< 3)+ 5] = b_4 - b_3 ;
		tmp[(0x005<< 3)+ 6] = b_2 + b_5;
		tmp[(0x005<< 3)+ 7] = b_0 - b_7 ;
			_fp16 a_0;
			_fp16 a_1;
			_fp16 a_2;
			_fp16 a_3;
			_fp16 b_0;
			_fp16 b_1;
			_fp16 b_2;
			_fp16 b_3;
			_fp16 b_4;
			_fp16 b_5;
			_fp16 b_6;
			_fp16 b_7;
			_fp16 p_0;
			_fp16 p_1;
			_fp16 p_2;
			_fp16 p_3;
			_fp16 p_4;
			_fp16 p_5;
			_fp16 p_6;
			_fp16 p_7;
		in_ptr_i2 = in_ptr_i[0x006];
		 short in_ptr_i3= in_ptr_i2;
		void *in_ptr_v3 = in_ptr_i3;
		p_0 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 16 ;
		p_1 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 32 ;
		p_2 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 48 ;
		p_3 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 64 ;
		p_4 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 80 ;
		p_5 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 96 ;
		p_6 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 112 ;
		p_7 = (_fp16)in_ptr_v3;

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);

		tmp[0x006<< 3] = b_0 + b_7;
		tmp[(0x006<< 3)+ 1] = b_2 - b_5 ;
		tmp[(0x006<< 3)+ 2] = b_4 + b_3;
		tmp[(0x006<< 3)+ 3] = b_6 + b_1;
		tmp[(0x006<< 3)+ 4] = b_6 - b_1 ;
		tmp[(0x006<< 3)+ 5] = b_4 - b_3 ;
		tmp[(0x006<< 3)+ 6] = b_2 + b_5;
		tmp[(0x006<< 3)+ 7] = b_0 - b_7 ;
			_fp16 a_0;
			_fp16 a_1;
			_fp16 a_2;
			_fp16 a_3;
			_fp16 b_0;
			_fp16 b_1;
			_fp16 b_2;
			_fp16 b_3;
			_fp16 b_4;
			_fp16 b_5;
			_fp16 b_6;
			_fp16 b_7;
			_fp16 p_0;
			_fp16 p_1;
			_fp16 p_2;
			_fp16 p_3;
			_fp16 p_4;
			_fp16 p_5;
			_fp16 p_6;
			_fp16 p_7;
		in_ptr_i2 = in_ptr_i[0x007];
		 short in_ptr_i3= in_ptr_i2;
		void *in_ptr_v3 = in_ptr_i3;
		p_0 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 16 ;
		p_1 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 32 ;
		p_2 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 48 ;
		p_3 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 64 ;
		p_4 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 80 ;
		p_5 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 96 ;
		p_6 = (_fp16)in_ptr_v3;
		in_ptr_i3 = in_ptr_i2>> 112 ;
		p_7 = (_fp16)in_ptr_v3;

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);

		tmp[0x007<< 3] = b_0 + b_7;
		tmp[(0x007<< 3)+ 1] = b_2 - b_5 ;
		tmp[(0x007<< 3)+ 2] = b_4 + b_3;
		tmp[(0x007<< 3)+ 3] = b_6 + b_1;
		tmp[(0x007<< 3)+ 4] = b_6 - b_1 ;
		tmp[(0x007<< 3)+ 5] = b_4 - b_3 ;
		tmp[(0x007<< 3)+ 6] = b_2 + b_5;
		tmp[(0x007<< 3)+ 7] = b_0 - b_7 ;
	}
	_fp16 *out = &block[(off_y<< 4)+ off_x];
		//	for (int i = 0 ; i < 8 ; i++){//  Vertical
		{	// 2 
				_fp16 a_0;
				_fp16 a_1;
				_fp16 a_2;
				_fp16 a_3;
				_fp16 b_0;
				_fp16 b_1;
				_fp16 b_2;
				_fp16 b_3;
				_fp16 b_4;
				_fp16 b_5;
				_fp16 b_6;
				_fp16 b_7;
				_fp16 p_0;
				_fp16 p_1;
				_fp16 p_2;
				_fp16 p_3;
				_fp16 p_4;
				_fp16 p_5;
				_fp16 p_6;
				_fp16 p_7;
		p_0 = tmp[0x000];
		p_1 = tmp[0x000 + 0x08];
		p_2 = tmp[0x000 + 0x10];
		p_3 = tmp[0x000 + 0x18];
		p_4 = tmp[0x000 + 0x20];
		p_5 = tmp[0x000 + 0x28];
		p_6 = tmp[0x000 + 0x30];
		p_7 = tmp[0x000 + 0x38];

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);

		out[0x000] = b_0 + b_7;
		out[0x000 + 0x10] = b_2 - b_5 ;
		out[0x000 + 0x20] = b_4 + b_3;
		out[0x000 + 0x30] = b_6 + b_1;
		out[0x000 + 0x40] = b_6 - b_1 ;
		out[0x000 + 0x50] = b_4 - b_3 ;
		out[0x000 + 0x60] = b_2 + b_5;
		out[0x000 + 0x70] = b_0 - b_7 ;
				_fp16 a_0;
				_fp16 a_1;
				_fp16 a_2;
				_fp16 a_3;
				_fp16 b_0;
				_fp16 b_1;
				_fp16 b_2;
				_fp16 b_3;
				_fp16 b_4;
				_fp16 b_5;
				_fp16 b_6;
				_fp16 b_7;
				_fp16 p_0;
				_fp16 p_1;
				_fp16 p_2;
				_fp16 p_3;
				_fp16 p_4;
				_fp16 p_5;
				_fp16 p_6;
				_fp16 p_7;
		p_0 = tmp[0x001];
		p_1 = tmp[0x001 + 0x08];
		p_2 = tmp[0x001 + 0x10];
		p_3 = tmp[0x001 + 0x18];
		p_4 = tmp[0x001 + 0x20];
		p_5 = tmp[0x001 + 0x28];
		p_6 = tmp[0x001 + 0x30];
		p_7 = tmp[0x001 + 0x38];

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);

		out[0x001] = b_0 + b_7;
		out[0x001 + 0x10] = b_2 - b_5 ;
		out[0x001 + 0x20] = b_4 + b_3;
		out[0x001 + 0x30] = b_6 + b_1;
		out[0x001 + 0x40] = b_6 - b_1 ;
		out[0x001 + 0x50] = b_4 - b_3 ;
		out[0x001 + 0x60] = b_2 + b_5;
		out[0x001 + 0x70] = b_0 - b_7 ;
				_fp16 a_0;
				_fp16 a_1;
				_fp16 a_2;
				_fp16 a_3;
				_fp16 b_0;
				_fp16 b_1;
				_fp16 b_2;
				_fp16 b_3;
				_fp16 b_4;
				_fp16 b_5;
				_fp16 b_6;
				_fp16 b_7;
				_fp16 p_0;
				_fp16 p_1;
				_fp16 p_2;
				_fp16 p_3;
				_fp16 p_4;
				_fp16 p_5;
				_fp16 p_6;
				_fp16 p_7;
		p_0 = tmp[0x002];
		p_1 = tmp[0x002 + 0x08];
		p_2 = tmp[0x002 + 0x10];
		p_3 = tmp[0x002 + 0x18];
		p_4 = tmp[0x002 + 0x20];
		p_5 = tmp[0x002 + 0x28];
		p_6 = tmp[0x002 + 0x30];
		p_7 = tmp[0x002 + 0x38];

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);

		out[0x002] = b_0 + b_7;
		out[0x002 + 0x10] = b_2 - b_5 ;
		out[0x002 + 0x20] = b_4 + b_3;
		out[0x002 + 0x30] = b_6 + b_1;
		out[0x002 + 0x40] = b_6 - b_1 ;
		out[0x002 + 0x50] = b_4 - b_3 ;
		out[0x002 + 0x60] = b_2 + b_5;
		out[0x002 + 0x70] = b_0 - b_7 ;
				_fp16 a_0;
				_fp16 a_1;
				_fp16 a_2;
				_fp16 a_3;
				_fp16 b_0;
				_fp16 b_1;
				_fp16 b_2;
				_fp16 b_3;
				_fp16 b_4;
				_fp16 b_5;
				_fp16 b_6;
				_fp16 b_7;
				_fp16 p_0;
				_fp16 p_1;
				_fp16 p_2;
				_fp16 p_3;
				_fp16 p_4;
				_fp16 p_5;
				_fp16 p_6;
				_fp16 p_7;
		p_0 = tmp[0x003];
		p_1 = tmp[0x003 + 0x08];
		p_2 = tmp[0x003 + 0x10];
		p_3 = tmp[0x003 + 0x18];
		p_4 = tmp[0x003 + 0x20];
		p_5 = tmp[0x003 + 0x28];
		p_6 = tmp[0x003 + 0x30];
		p_7 = tmp[0x003 + 0x38];

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);

		out[0x003] = b_0 + b_7;
		out[0x003 + 0x10] = b_2 - b_5 ;
		out[0x003 + 0x20] = b_4 + b_3;
		out[0x003 + 0x30] = b_6 + b_1;
		out[0x003 + 0x40] = b_6 - b_1 ;
		out[0x003 + 0x50] = b_4 - b_3 ;
		out[0x003 + 0x60] = b_2 + b_5;
		out[0x003 + 0x70] = b_0 - b_7 ;
				_fp16 a_0;
				_fp16 a_1;
				_fp16 a_2;
				_fp16 a_3;
				_fp16 b_0;
				_fp16 b_1;
				_fp16 b_2;
				_fp16 b_3;
				_fp16 b_4;
				_fp16 b_5;
				_fp16 b_6;
				_fp16 b_7;
				_fp16 p_0;
				_fp16 p_1;
				_fp16 p_2;
				_fp16 p_3;
				_fp16 p_4;
				_fp16 p_5;
				_fp16 p_6;
				_fp16 p_7;
		p_0 = tmp[0x004];
		p_1 = tmp[0x004 + 0x08];
		p_2 = tmp[0x004 + 0x10];
		p_3 = tmp[0x004 + 0x18];
		p_4 = tmp[0x004 + 0x20];
		p_5 = tmp[0x004 + 0x28];
		p_6 = tmp[0x004 + 0x30];
		p_7 = tmp[0x004 + 0x38];

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);

		out[0x004] = b_0 + b_7;
		out[0x004 + 0x10] = b_2 - b_5 ;
		out[0x004 + 0x20] = b_4 + b_3;
		out[0x004 + 0x30] = b_6 + b_1;
		out[0x004 + 0x40] = b_6 - b_1 ;
		out[0x004 + 0x50] = b_4 - b_3 ;
		out[0x004 + 0x60] = b_2 + b_5;
		out[0x004 + 0x70] = b_0 - b_7 ;
				_fp16 a_0;
				_fp16 a_1;
				_fp16 a_2;
				_fp16 a_3;
				_fp16 b_0;
				_fp16 b_1;
				_fp16 b_2;
				_fp16 b_3;
				_fp16 b_4;
				_fp16 b_5;
				_fp16 b_6;
				_fp16 b_7;
				_fp16 p_0;
				_fp16 p_1;
				_fp16 p_2;
				_fp16 p_3;
				_fp16 p_4;
				_fp16 p_5;
				_fp16 p_6;
				_fp16 p_7;
		p_0 = tmp[0x005];
		p_1 = tmp[0x005 + 0x08];
		p_2 = tmp[0x005 + 0x10];
		p_3 = tmp[0x005 + 0x18];
		p_4 = tmp[0x005 + 0x20];
		p_5 = tmp[0x005 + 0x28];
		p_6 = tmp[0x005 + 0x30];
		p_7 = tmp[0x005 + 0x38];

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);

		out[0x005] = b_0 + b_7;
		out[0x005 + 0x10] = b_2 - b_5 ;
		out[0x005 + 0x20] = b_4 + b_3;
		out[0x005 + 0x30] = b_6 + b_1;
		out[0x005 + 0x40] = b_6 - b_1 ;
		out[0x005 + 0x50] = b_4 - b_3 ;
		out[0x005 + 0x60] = b_2 + b_5;
		out[0x005 + 0x70] = b_0 - b_7 ;
				_fp16 a_0;
				_fp16 a_1;
				_fp16 a_2;
				_fp16 a_3;
				_fp16 b_0;
				_fp16 b_1;
				_fp16 b_2;
				_fp16 b_3;
				_fp16 b_4;
				_fp16 b_5;
				_fp16 b_6;
				_fp16 b_7;
				_fp16 p_0;
				_fp16 p_1;
				_fp16 p_2;
				_fp16 p_3;
				_fp16 p_4;
				_fp16 p_5;
				_fp16 p_6;
				_fp16 p_7;
		p_0 = tmp[0x006];
		p_1 = tmp[0x006 + 0x08];
		p_2 = tmp[0x006 + 0x10];
		p_3 = tmp[0x006 + 0x18];
		p_4 = tmp[0x006 + 0x20];
		p_5 = tmp[0x006 + 0x28];
		p_6 = tmp[0x006 + 0x30];
		p_7 = tmp[0x006 + 0x38];

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);

		out[0x006] = b_0 + b_7;
		out[0x006 + 0x10] = b_2 - b_5 ;
		out[0x006 + 0x20] = b_4 + b_3;
		out[0x006 + 0x30] = b_6 + b_1;
		out[0x006 + 0x40] = b_6 - b_1 ;
		out[0x006 + 0x50] = b_4 - b_3 ;
		out[0x006 + 0x60] = b_2 + b_5;
		out[0x006 + 0x70] = b_0 - b_7 ;
				_fp16 a_0;
				_fp16 a_1;
				_fp16 a_2;
				_fp16 a_3;
				_fp16 b_0;
				_fp16 b_1;
				_fp16 b_2;
				_fp16 b_3;
				_fp16 b_4;
				_fp16 b_5;
				_fp16 b_6;
				_fp16 b_7;
				_fp16 p_0;
				_fp16 p_1;
				_fp16 p_2;
				_fp16 p_3;
				_fp16 p_4;
				_fp16 p_5;
				_fp16 p_6;
				_fp16 p_7;
		p_0 = tmp[0x007];
		p_1 = tmp[0x007 + 0x08];
		p_2 = tmp[0x007 + 0x10];
		p_3 = tmp[0x007 + 0x18];
		p_4 = tmp[0x007 + 0x20];
		p_5 = tmp[0x007 + 0x28];
		p_6 = tmp[0x007 + 0x30];
		p_7 = tmp[0x007 + 0x38];

		a_0 = p_0 + p_4;
		a_1 = p_0 - p_4 ;
		a_2 = p_6 - fc0_5 *p_2;
		a_3 = p_2 + fc0_5*p_6;

		b_0 = a_0 + a_3;
		b_2 = a_1 - a_2 ;
		b_4 = a_1 + a_2;
		b_6 = a_0 - a_3 ;

		a_0 = p_5 - p_3 ;
		a_0-= p_7 ;
		a_0-= fc0_5 *p_7;
		a_1 = p_1 + p_7 ;
		a_1-= p_3 ;
		a_1-= fc0_5 *p_3;
		a_2 = p_7 + p_5 ;
		a_2-= p_1 ;
		a_2+= fc0_5*p_5;
		a_3 = p_3 + p_5 ;
		a_3+= p_1 ;
		a_3+= fc0_5*p_1;

		b_1 = a_0 + (a_3 * fc0_25);
		b_7 = a_3 - (a_0 * fc0_25);
		b_3 = a_1 + (a_2 * fc0_25);
		b_5 = a_2 - (a_1 * fc0_25);

		out[0x007] = b_0 + b_7;
		out[0x007 + 0x10] = b_2 - b_5 ;
		out[0x007 + 0x20] = b_4 + b_3;
		out[0x007 + 0x30] = b_6 + b_1;
		out[0x007 + 0x40] = b_6 - b_1 ;
		out[0x007 + 0x50] = b_4 - b_3 ;
		out[0x007 + 0x60] = b_2 + b_5;
		out[0x007 + 0x70] = b_0 - b_7 ;
	}
}
void write_out_buffer(_fp16 *out, _fp16 *pred, _fp16 *cof_bar, UINT16 x, UINT16 y, UINT16 off_x, UINT16 off_y){
	_fp16 temp;
	 _fp16 fzero = 0.0;
	 _fp16 fmax = 255.0;
	 _fp16 fconst = 0.015625;
	void *pred_v = &pred[(off_y << 4)| off_x]; // copy address
	UINT128 *pred_i = pred_v;

	void *cof_bar_v = &cof_bar[(off_y << 4)| off_x]; // copy address
	UINT128 *cof_bar_i = cof_bar_v;
	for (int j = 0 ; j < 8 ; j++){
		 UINT128 pred_i2= pred_i[j<< 1];
		 UINT128 cof_bar_i2= cof_bar_i[j<< 1];
//		for (int i = 0 ; i < 8 ; i++){
			{	// 3 
			_fp16 *out_ptr0 = &out[((y | off_y | j)<< 12)| (x | off_x)];
			 short pred_i3= (pred_i2 >> (0x000*16));
			void *pred_v3 = pred_i3;
			 short cof_bar_i3= (cof_bar_i2 >> (0x000*16));
			void *cof_bar_v3 = cof_bar_i3;
			temp = (_fp16)pred_v3 + fconst*((_fp16)cof_bar_v3);
			temp = max(temp,fzero);
			temp = min(temp,fmax);
			out_ptr0[0x000] = round(temp);
			  pred_i3= (pred_i2 >> (0x001*16));
			 *pred_v3 = pred_i3;
			  cof_bar_i3= (cof_bar_i2 >> (0x001*16));
			 *cof_bar_v3 = cof_bar_i3;
			temp = (_fp16)pred_v3 + fconst*((_fp16)cof_bar_v3);
			temp = max(temp,fzero);
			temp = min(temp,fmax);
			out_ptr0[0x001] = round(temp);
			  pred_i3= (pred_i2 >> (0x002*16));
			 *pred_v3 = pred_i3;
			  cof_bar_i3= (cof_bar_i2 >> (0x002*16));
			 *cof_bar_v3 = cof_bar_i3;
			temp = (_fp16)pred_v3 + fconst*((_fp16)cof_bar_v3);
			temp = max(temp,fzero);
			temp = min(temp,fmax);
			out_ptr0[0x002] = round(temp);
			  pred_i3= (pred_i2 >> (0x003*16));
			 *pred_v3 = pred_i3;
			  cof_bar_i3= (cof_bar_i2 >> (0x003*16));
			 *cof_bar_v3 = cof_bar_i3;
			temp = (_fp16)pred_v3 + fconst*((_fp16)cof_bar_v3);
			temp = max(temp,fzero);
			temp = min(temp,fmax);
			out_ptr0[0x003] = round(temp);
			  pred_i3= (pred_i2 >> (0x004*16));
			 *pred_v3 = pred_i3;
			  cof_bar_i3= (cof_bar_i2 >> (0x004*16));
			 *cof_bar_v3 = cof_bar_i3;
			temp = (_fp16)pred_v3 + fconst*((_fp16)cof_bar_v3);
			temp = max(temp,fzero);
			temp = min(temp,fmax);
			out_ptr0[0x004] = round(temp);
			  pred_i3= (pred_i2 >> (0x005*16));
			 *pred_v3 = pred_i3;
			  cof_bar_i3= (cof_bar_i2 >> (0x005*16));
			 *cof_bar_v3 = cof_bar_i3;
			temp = (_fp16)pred_v3 + fconst*((_fp16)cof_bar_v3);
			temp = max(temp,fzero);
			temp = min(temp,fmax);
			out_ptr0[0x005] = round(temp);
			  pred_i3= (pred_i2 >> (0x006*16));
			 *pred_v3 = pred_i3;
			  cof_bar_i3= (cof_bar_i2 >> (0x006*16));
			 *cof_bar_v3 = cof_bar_i3;
			temp = (_fp16)pred_v3 + fconst*((_fp16)cof_bar_v3);
			temp = max(temp,fzero);
			temp = min(temp,fmax);
			out_ptr0[0x006] = round(temp);
			  pred_i3= (pred_i2 >> (0x007*16));
			 *pred_v3 = pred_i3;
			  cof_bar_i3= (cof_bar_i2 >> (0x007*16));
			 *cof_bar_v3 = cof_bar_i3;
			temp = (_fp16)pred_v3 + fconst*((_fp16)cof_bar_v3);
			temp = max(temp,fzero);
			temp = min(temp,fmax);
			out_ptr0[0x007] = round(temp);
		}
	}
}
void p_frame_x_x_0_0x00000_x_x_x_x_0(_fp16 *out, _fp16 *in,INT8 *mvx, INT8 *mvy, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index = 0 ;
	_fp16 pred[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x10 ; y< 0x410 ; y +=0x10){// 1080P, 4 slices
			//		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
			{	// 3 
	get_luma(luma_type[luma_index], pred, in, 0x010 + mvx[0] + 8, y + mvy[0] + 8);
	get_luma(luma_type[luma_index + 1], pred, in, 0x010 + mvx[1] + 16, y + mvy[1] + 16);
	get_luma(luma_type[luma_index + 2], pred, in, 0x010 + mvx[2] + 8, y + mvy[2] + 24);
	get_luma(luma_type[luma_index + 3], pred, in, 0x010 + mvx[3] + 16, y + mvy[3] + 32);

			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 0 ,0);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 0 ,8);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 8 ,0);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 8 ,8);
			luma_index = ((luma_index + 4)&0x0f);
	get_luma(luma_type[luma_index], pred, in, 0x020 + mvx[0] + 8, y + mvy[0] + 8);
	get_luma(luma_type[luma_index + 1], pred, in, 0x020 + mvx[1] + 16, y + mvy[1] + 16);
	get_luma(luma_type[luma_index + 2], pred, in, 0x020 + mvx[2] + 8, y + mvy[2] + 24);
	get_luma(luma_type[luma_index + 3], pred, in, 0x020 + mvx[3] + 16, y + mvy[3] + 32);

			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 0 ,0);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 0 ,8);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 8 ,0);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 8 ,8);
			luma_index = ((luma_index + 4)&0x0f);
		}
	}
}
void p_frame_x_x_0_0x00200_x_x_x_x_0(_fp16 *out, _fp16 *in,INT8 *mvx, INT8 *mvy, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index = 0 ;
	_fp16 pred[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x210 ; y< 0x610 ; y +=0x10){// 1080P, 4 slices
			//		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
			{	// 3 
	get_luma(luma_type[luma_index], pred, in, 0x010 + mvx[0] + 8, y + mvy[0] + 8);
	get_luma(luma_type[luma_index + 1], pred, in, 0x010 + mvx[1] + 16, y + mvy[1] + 16);
	get_luma(luma_type[luma_index + 2], pred, in, 0x010 + mvx[2] + 8, y + mvy[2] + 24);
	get_luma(luma_type[luma_index + 3], pred, in, 0x010 + mvx[3] + 16, y + mvy[3] + 32);

			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 0 ,0);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 0 ,8);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 8 ,0);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 8 ,8);
			luma_index = ((luma_index + 4)&0x0f);
	get_luma(luma_type[luma_index], pred, in, 0x020 + mvx[0] + 8, y + mvy[0] + 8);
	get_luma(luma_type[luma_index + 1], pred, in, 0x020 + mvx[1] + 16, y + mvy[1] + 16);
	get_luma(luma_type[luma_index + 2], pred, in, 0x020 + mvx[2] + 8, y + mvy[2] + 24);
	get_luma(luma_type[luma_index + 3], pred, in, 0x020 + mvx[3] + 16, y + mvy[3] + 32);

			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 0 ,0);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 0 ,8);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 8 ,0);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 8 ,8);
			luma_index = ((luma_index + 4)&0x0f);
		}
	}
}
void p_frame_x_x_0_0x00400_x_x_x_x_0(_fp16 *out, _fp16 *in,INT8 *mvx, INT8 *mvy, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index = 0 ;
	_fp16 pred[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x410 ; y< 0x810 ; y +=0x10){// 1080P, 4 slices
			//		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
			{	// 3 
	get_luma(luma_type[luma_index], pred, in, 0x010 + mvx[0] + 8, y + mvy[0] + 8);
	get_luma(luma_type[luma_index + 1], pred, in, 0x010 + mvx[1] + 16, y + mvy[1] + 16);
	get_luma(luma_type[luma_index + 2], pred, in, 0x010 + mvx[2] + 8, y + mvy[2] + 24);
	get_luma(luma_type[luma_index + 3], pred, in, 0x010 + mvx[3] + 16, y + mvy[3] + 32);

			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 0 ,0);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 0 ,8);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 8 ,0);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 8 ,8);
			luma_index = ((luma_index + 4)&0x0f);
	get_luma(luma_type[luma_index], pred, in, 0x020 + mvx[0] + 8, y + mvy[0] + 8);
	get_luma(luma_type[luma_index + 1], pred, in, 0x020 + mvx[1] + 16, y + mvy[1] + 16);
	get_luma(luma_type[luma_index + 2], pred, in, 0x020 + mvx[2] + 8, y + mvy[2] + 24);
	get_luma(luma_type[luma_index + 3], pred, in, 0x020 + mvx[3] + 16, y + mvy[3] + 32);

			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 0 ,0);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 0 ,8);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 8 ,0);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 8 ,8);
			luma_index = ((luma_index + 4)&0x0f);
		}
	}
}
void p_frame_x_x_0_0x00600_x_x_x_x_0(_fp16 *out, _fp16 *in,INT8 *mvx, INT8 *mvy, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index = 0 ;
	_fp16 pred[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x610 ; y< 0xa10 ; y +=0x10){// 1080P, 4 slices
			//		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
			{	// 3 
	get_luma(luma_type[luma_index], pred, in, 0x010 + mvx[0] + 8, y + mvy[0] + 8);
	get_luma(luma_type[luma_index + 1], pred, in, 0x010 + mvx[1] + 16, y + mvy[1] + 16);
	get_luma(luma_type[luma_index + 2], pred, in, 0x010 + mvx[2] + 8, y + mvy[2] + 24);
	get_luma(luma_type[luma_index + 3], pred, in, 0x010 + mvx[3] + 16, y + mvy[3] + 32);

			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 0 ,0);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 0 ,8);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 8 ,0);
			write_out_buffer(out, pred, cof_bar, 0x010, y, 8 ,8);
			luma_index = ((luma_index + 4)&0x0f);
	get_luma(luma_type[luma_index], pred, in, 0x020 + mvx[0] + 8, y + mvy[0] + 8);
	get_luma(luma_type[luma_index + 1], pred, in, 0x020 + mvx[1] + 16, y + mvy[1] + 16);
	get_luma(luma_type[luma_index + 2], pred, in, 0x020 + mvx[2] + 8, y + mvy[2] + 24);
	get_luma(luma_type[luma_index + 3], pred, in, 0x020 + mvx[3] + 16, y + mvy[3] + 32);

			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 0 ,0);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 0 ,8);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 8 ,0);
			write_out_buffer(out, pred, cof_bar, 0x020, y, 8 ,8);
			luma_index = ((luma_index + 4)&0x0f);
		}
	}
}
void b_frame_x_x_x_0_0x00000_x_x_x_x_x_x_4_8(_fp16 *out, _fp16 *in1, _fp16 *in2, INT8 *mvx1, INT8 *mvy1, INT8 *mvx2, INT8 *mvy2, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index0 = 4 ;
	UINT8 luma_index1 = 8 ;
	_fp16 pred1[0x100];
	_fp16 pred2[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x10 ; y< 0x410 ; y +=0x10){// 1080P, 4 slices
		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
//			p_frame_mb(pred1, in1, x, y, luma_index0, mvx1, mvy1, luma_type);
	get_luma(luma_type[luma_index0], pred1, in1, x + mvx1[0] + 8, y + mvy1[0] + 8);
	get_luma(luma_type[luma_index0 + 1], pred1, in1, x + mvx1[1] + 16, y + mvy1[1] + 16);
	get_luma(luma_type[luma_index0 + 2], pred1, in1, x + mvx1[2] + 8, y + mvy1[2] + 24);
	get_luma(luma_type[luma_index0 + 3], pred1, in1, x + mvx1[3] + 16, y + mvy1[3] + 32);
//			p_frame_mb(pred2, in2, x, y, luma_index1, mvx2, mvy2, luma_type);
	get_luma(luma_type[luma_index1], pred2, in2, x + mvx2[0] + 8, y + mvy2[0] + 8);
	get_luma(luma_type[luma_index1 + 1], pred2, in2, x + mvx2[1] + 16, y + mvy2[1] + 16);
	get_luma(luma_type[luma_index1 + 2], pred2, in2, x + mvx2[2] + 8, y + mvy2[2] + 24);
	get_luma(luma_type[luma_index1 + 3], pred2, in2, x + mvx2[3] + 16, y + mvy2[3] + 32);
//			for (UINT l= 0 ; l< 0x100 ;l++){
				{	// 4 
				_fp16 *pred1_ptr0 = &pred1[0];
				_fp16 *pred2_ptr1 = &pred2[0];
				pred1_ptr0[0x000] = 0.25*(pred1_ptr0[0x000] + 3* pred2_ptr1[0x000]);
				pred1_ptr0[0x001] = 0.25*(pred1_ptr0[0x001] + 3* pred2_ptr1[0x001]);
				pred1_ptr0[0x002] = 0.25*(pred1_ptr0[0x002] + 3* pred2_ptr1[0x002]);
				pred1_ptr0[0x003] = 0.25*(pred1_ptr0[0x003] + 3* pred2_ptr1[0x003]);
				pred1_ptr0[0x004] = 0.25*(pred1_ptr0[0x004] + 3* pred2_ptr1[0x004]);
				pred1_ptr0[0x005] = 0.25*(pred1_ptr0[0x005] + 3* pred2_ptr1[0x005]);
				pred1_ptr0[0x006] = 0.25*(pred1_ptr0[0x006] + 3* pred2_ptr1[0x006]);
				pred1_ptr0[0x007] = 0.25*(pred1_ptr0[0x007] + 3* pred2_ptr1[0x007]);
				pred1_ptr0[0x008] = 0.25*(pred1_ptr0[0x008] + 3* pred2_ptr1[0x008]);
				pred1_ptr0[0x009] = 0.25*(pred1_ptr0[0x009] + 3* pred2_ptr1[0x009]);
				pred1_ptr0[0x00a] = 0.25*(pred1_ptr0[0x00a] + 3* pred2_ptr1[0x00a]);
				pred1_ptr0[0x00b] = 0.25*(pred1_ptr0[0x00b] + 3* pred2_ptr1[0x00b]);
				pred1_ptr0[0x00c] = 0.25*(pred1_ptr0[0x00c] + 3* pred2_ptr1[0x00c]);
				pred1_ptr0[0x00d] = 0.25*(pred1_ptr0[0x00d] + 3* pred2_ptr1[0x00d]);
				pred1_ptr0[0x00e] = 0.25*(pred1_ptr0[0x00e] + 3* pred2_ptr1[0x00e]);
				pred1_ptr0[0x00f] = 0.25*(pred1_ptr0[0x00f] + 3* pred2_ptr1[0x00f]);
				pred1_ptr0[0x010] = 0.25*(pred1_ptr0[0x010] + 3* pred2_ptr1[0x010]);
				pred1_ptr0[0x011] = 0.25*(pred1_ptr0[0x011] + 3* pred2_ptr1[0x011]);
				pred1_ptr0[0x012] = 0.25*(pred1_ptr0[0x012] + 3* pred2_ptr1[0x012]);
				pred1_ptr0[0x013] = 0.25*(pred1_ptr0[0x013] + 3* pred2_ptr1[0x013]);
				pred1_ptr0[0x014] = 0.25*(pred1_ptr0[0x014] + 3* pred2_ptr1[0x014]);
				pred1_ptr0[0x015] = 0.25*(pred1_ptr0[0x015] + 3* pred2_ptr1[0x015]);
				pred1_ptr0[0x016] = 0.25*(pred1_ptr0[0x016] + 3* pred2_ptr1[0x016]);
				pred1_ptr0[0x017] = 0.25*(pred1_ptr0[0x017] + 3* pred2_ptr1[0x017]);
				pred1_ptr0[0x018] = 0.25*(pred1_ptr0[0x018] + 3* pred2_ptr1[0x018]);
				pred1_ptr0[0x019] = 0.25*(pred1_ptr0[0x019] + 3* pred2_ptr1[0x019]);
				pred1_ptr0[0x01a] = 0.25*(pred1_ptr0[0x01a] + 3* pred2_ptr1[0x01a]);
				pred1_ptr0[0x01b] = 0.25*(pred1_ptr0[0x01b] + 3* pred2_ptr1[0x01b]);
				pred1_ptr0[0x01c] = 0.25*(pred1_ptr0[0x01c] + 3* pred2_ptr1[0x01c]);
				pred1_ptr0[0x01d] = 0.25*(pred1_ptr0[0x01d] + 3* pred2_ptr1[0x01d]);
				pred1_ptr0[0x01e] = 0.25*(pred1_ptr0[0x01e] + 3* pred2_ptr1[0x01e]);
				pred1_ptr0[0x01f] = 0.25*(pred1_ptr0[0x01f] + 3* pred2_ptr1[0x01f]);
				pred1_ptr0[0x020] = 0.25*(pred1_ptr0[0x020] + 3* pred2_ptr1[0x020]);
				pred1_ptr0[0x021] = 0.25*(pred1_ptr0[0x021] + 3* pred2_ptr1[0x021]);
				pred1_ptr0[0x022] = 0.25*(pred1_ptr0[0x022] + 3* pred2_ptr1[0x022]);
				pred1_ptr0[0x023] = 0.25*(pred1_ptr0[0x023] + 3* pred2_ptr1[0x023]);
				pred1_ptr0[0x024] = 0.25*(pred1_ptr0[0x024] + 3* pred2_ptr1[0x024]);
				pred1_ptr0[0x025] = 0.25*(pred1_ptr0[0x025] + 3* pred2_ptr1[0x025]);
				pred1_ptr0[0x026] = 0.25*(pred1_ptr0[0x026] + 3* pred2_ptr1[0x026]);
				pred1_ptr0[0x027] = 0.25*(pred1_ptr0[0x027] + 3* pred2_ptr1[0x027]);
				pred1_ptr0[0x028] = 0.25*(pred1_ptr0[0x028] + 3* pred2_ptr1[0x028]);
				pred1_ptr0[0x029] = 0.25*(pred1_ptr0[0x029] + 3* pred2_ptr1[0x029]);
				pred1_ptr0[0x02a] = 0.25*(pred1_ptr0[0x02a] + 3* pred2_ptr1[0x02a]);
				pred1_ptr0[0x02b] = 0.25*(pred1_ptr0[0x02b] + 3* pred2_ptr1[0x02b]);
				pred1_ptr0[0x02c] = 0.25*(pred1_ptr0[0x02c] + 3* pred2_ptr1[0x02c]);
				pred1_ptr0[0x02d] = 0.25*(pred1_ptr0[0x02d] + 3* pred2_ptr1[0x02d]);
				pred1_ptr0[0x02e] = 0.25*(pred1_ptr0[0x02e] + 3* pred2_ptr1[0x02e]);
				pred1_ptr0[0x02f] = 0.25*(pred1_ptr0[0x02f] + 3* pred2_ptr1[0x02f]);
				pred1_ptr0[0x030] = 0.25*(pred1_ptr0[0x030] + 3* pred2_ptr1[0x030]);
				pred1_ptr0[0x031] = 0.25*(pred1_ptr0[0x031] + 3* pred2_ptr1[0x031]);
				pred1_ptr0[0x032] = 0.25*(pred1_ptr0[0x032] + 3* pred2_ptr1[0x032]);
				pred1_ptr0[0x033] = 0.25*(pred1_ptr0[0x033] + 3* pred2_ptr1[0x033]);
				pred1_ptr0[0x034] = 0.25*(pred1_ptr0[0x034] + 3* pred2_ptr1[0x034]);
				pred1_ptr0[0x035] = 0.25*(pred1_ptr0[0x035] + 3* pred2_ptr1[0x035]);
				pred1_ptr0[0x036] = 0.25*(pred1_ptr0[0x036] + 3* pred2_ptr1[0x036]);
				pred1_ptr0[0x037] = 0.25*(pred1_ptr0[0x037] + 3* pred2_ptr1[0x037]);
				pred1_ptr0[0x038] = 0.25*(pred1_ptr0[0x038] + 3* pred2_ptr1[0x038]);
				pred1_ptr0[0x039] = 0.25*(pred1_ptr0[0x039] + 3* pred2_ptr1[0x039]);
				pred1_ptr0[0x03a] = 0.25*(pred1_ptr0[0x03a] + 3* pred2_ptr1[0x03a]);
				pred1_ptr0[0x03b] = 0.25*(pred1_ptr0[0x03b] + 3* pred2_ptr1[0x03b]);
				pred1_ptr0[0x03c] = 0.25*(pred1_ptr0[0x03c] + 3* pred2_ptr1[0x03c]);
				pred1_ptr0[0x03d] = 0.25*(pred1_ptr0[0x03d] + 3* pred2_ptr1[0x03d]);
				pred1_ptr0[0x03e] = 0.25*(pred1_ptr0[0x03e] + 3* pred2_ptr1[0x03e]);
				pred1_ptr0[0x03f] = 0.25*(pred1_ptr0[0x03f] + 3* pred2_ptr1[0x03f]);
				pred1_ptr0[0x040] = 0.25*(pred1_ptr0[0x040] + 3* pred2_ptr1[0x040]);
				pred1_ptr0[0x041] = 0.25*(pred1_ptr0[0x041] + 3* pred2_ptr1[0x041]);
				pred1_ptr0[0x042] = 0.25*(pred1_ptr0[0x042] + 3* pred2_ptr1[0x042]);
				pred1_ptr0[0x043] = 0.25*(pred1_ptr0[0x043] + 3* pred2_ptr1[0x043]);
				pred1_ptr0[0x044] = 0.25*(pred1_ptr0[0x044] + 3* pred2_ptr1[0x044]);
				pred1_ptr0[0x045] = 0.25*(pred1_ptr0[0x045] + 3* pred2_ptr1[0x045]);
				pred1_ptr0[0x046] = 0.25*(pred1_ptr0[0x046] + 3* pred2_ptr1[0x046]);
				pred1_ptr0[0x047] = 0.25*(pred1_ptr0[0x047] + 3* pred2_ptr1[0x047]);
				pred1_ptr0[0x048] = 0.25*(pred1_ptr0[0x048] + 3* pred2_ptr1[0x048]);
				pred1_ptr0[0x049] = 0.25*(pred1_ptr0[0x049] + 3* pred2_ptr1[0x049]);
				pred1_ptr0[0x04a] = 0.25*(pred1_ptr0[0x04a] + 3* pred2_ptr1[0x04a]);
				pred1_ptr0[0x04b] = 0.25*(pred1_ptr0[0x04b] + 3* pred2_ptr1[0x04b]);
				pred1_ptr0[0x04c] = 0.25*(pred1_ptr0[0x04c] + 3* pred2_ptr1[0x04c]);
				pred1_ptr0[0x04d] = 0.25*(pred1_ptr0[0x04d] + 3* pred2_ptr1[0x04d]);
				pred1_ptr0[0x04e] = 0.25*(pred1_ptr0[0x04e] + 3* pred2_ptr1[0x04e]);
				pred1_ptr0[0x04f] = 0.25*(pred1_ptr0[0x04f] + 3* pred2_ptr1[0x04f]);
				pred1_ptr0[0x050] = 0.25*(pred1_ptr0[0x050] + 3* pred2_ptr1[0x050]);
				pred1_ptr0[0x051] = 0.25*(pred1_ptr0[0x051] + 3* pred2_ptr1[0x051]);
				pred1_ptr0[0x052] = 0.25*(pred1_ptr0[0x052] + 3* pred2_ptr1[0x052]);
				pred1_ptr0[0x053] = 0.25*(pred1_ptr0[0x053] + 3* pred2_ptr1[0x053]);
				pred1_ptr0[0x054] = 0.25*(pred1_ptr0[0x054] + 3* pred2_ptr1[0x054]);
				pred1_ptr0[0x055] = 0.25*(pred1_ptr0[0x055] + 3* pred2_ptr1[0x055]);
				pred1_ptr0[0x056] = 0.25*(pred1_ptr0[0x056] + 3* pred2_ptr1[0x056]);
				pred1_ptr0[0x057] = 0.25*(pred1_ptr0[0x057] + 3* pred2_ptr1[0x057]);
				pred1_ptr0[0x058] = 0.25*(pred1_ptr0[0x058] + 3* pred2_ptr1[0x058]);
				pred1_ptr0[0x059] = 0.25*(pred1_ptr0[0x059] + 3* pred2_ptr1[0x059]);
				pred1_ptr0[0x05a] = 0.25*(pred1_ptr0[0x05a] + 3* pred2_ptr1[0x05a]);
				pred1_ptr0[0x05b] = 0.25*(pred1_ptr0[0x05b] + 3* pred2_ptr1[0x05b]);
				pred1_ptr0[0x05c] = 0.25*(pred1_ptr0[0x05c] + 3* pred2_ptr1[0x05c]);
				pred1_ptr0[0x05d] = 0.25*(pred1_ptr0[0x05d] + 3* pred2_ptr1[0x05d]);
				pred1_ptr0[0x05e] = 0.25*(pred1_ptr0[0x05e] + 3* pred2_ptr1[0x05e]);
				pred1_ptr0[0x05f] = 0.25*(pred1_ptr0[0x05f] + 3* pred2_ptr1[0x05f]);
				pred1_ptr0[0x060] = 0.25*(pred1_ptr0[0x060] + 3* pred2_ptr1[0x060]);
				pred1_ptr0[0x061] = 0.25*(pred1_ptr0[0x061] + 3* pred2_ptr1[0x061]);
				pred1_ptr0[0x062] = 0.25*(pred1_ptr0[0x062] + 3* pred2_ptr1[0x062]);
				pred1_ptr0[0x063] = 0.25*(pred1_ptr0[0x063] + 3* pred2_ptr1[0x063]);
				pred1_ptr0[0x064] = 0.25*(pred1_ptr0[0x064] + 3* pred2_ptr1[0x064]);
				pred1_ptr0[0x065] = 0.25*(pred1_ptr0[0x065] + 3* pred2_ptr1[0x065]);
				pred1_ptr0[0x066] = 0.25*(pred1_ptr0[0x066] + 3* pred2_ptr1[0x066]);
				pred1_ptr0[0x067] = 0.25*(pred1_ptr0[0x067] + 3* pred2_ptr1[0x067]);
				pred1_ptr0[0x068] = 0.25*(pred1_ptr0[0x068] + 3* pred2_ptr1[0x068]);
				pred1_ptr0[0x069] = 0.25*(pred1_ptr0[0x069] + 3* pred2_ptr1[0x069]);
				pred1_ptr0[0x06a] = 0.25*(pred1_ptr0[0x06a] + 3* pred2_ptr1[0x06a]);
				pred1_ptr0[0x06b] = 0.25*(pred1_ptr0[0x06b] + 3* pred2_ptr1[0x06b]);
				pred1_ptr0[0x06c] = 0.25*(pred1_ptr0[0x06c] + 3* pred2_ptr1[0x06c]);
				pred1_ptr0[0x06d] = 0.25*(pred1_ptr0[0x06d] + 3* pred2_ptr1[0x06d]);
				pred1_ptr0[0x06e] = 0.25*(pred1_ptr0[0x06e] + 3* pred2_ptr1[0x06e]);
				pred1_ptr0[0x06f] = 0.25*(pred1_ptr0[0x06f] + 3* pred2_ptr1[0x06f]);
				pred1_ptr0[0x070] = 0.25*(pred1_ptr0[0x070] + 3* pred2_ptr1[0x070]);
				pred1_ptr0[0x071] = 0.25*(pred1_ptr0[0x071] + 3* pred2_ptr1[0x071]);
				pred1_ptr0[0x072] = 0.25*(pred1_ptr0[0x072] + 3* pred2_ptr1[0x072]);
				pred1_ptr0[0x073] = 0.25*(pred1_ptr0[0x073] + 3* pred2_ptr1[0x073]);
				pred1_ptr0[0x074] = 0.25*(pred1_ptr0[0x074] + 3* pred2_ptr1[0x074]);
				pred1_ptr0[0x075] = 0.25*(pred1_ptr0[0x075] + 3* pred2_ptr1[0x075]);
				pred1_ptr0[0x076] = 0.25*(pred1_ptr0[0x076] + 3* pred2_ptr1[0x076]);
				pred1_ptr0[0x077] = 0.25*(pred1_ptr0[0x077] + 3* pred2_ptr1[0x077]);
				pred1_ptr0[0x078] = 0.25*(pred1_ptr0[0x078] + 3* pred2_ptr1[0x078]);
				pred1_ptr0[0x079] = 0.25*(pred1_ptr0[0x079] + 3* pred2_ptr1[0x079]);
				pred1_ptr0[0x07a] = 0.25*(pred1_ptr0[0x07a] + 3* pred2_ptr1[0x07a]);
				pred1_ptr0[0x07b] = 0.25*(pred1_ptr0[0x07b] + 3* pred2_ptr1[0x07b]);
				pred1_ptr0[0x07c] = 0.25*(pred1_ptr0[0x07c] + 3* pred2_ptr1[0x07c]);
				pred1_ptr0[0x07d] = 0.25*(pred1_ptr0[0x07d] + 3* pred2_ptr1[0x07d]);
				pred1_ptr0[0x07e] = 0.25*(pred1_ptr0[0x07e] + 3* pred2_ptr1[0x07e]);
				pred1_ptr0[0x07f] = 0.25*(pred1_ptr0[0x07f] + 3* pred2_ptr1[0x07f]);
				pred1_ptr0[0x080] = 0.25*(pred1_ptr0[0x080] + 3* pred2_ptr1[0x080]);
				pred1_ptr0[0x081] = 0.25*(pred1_ptr0[0x081] + 3* pred2_ptr1[0x081]);
				pred1_ptr0[0x082] = 0.25*(pred1_ptr0[0x082] + 3* pred2_ptr1[0x082]);
				pred1_ptr0[0x083] = 0.25*(pred1_ptr0[0x083] + 3* pred2_ptr1[0x083]);
				pred1_ptr0[0x084] = 0.25*(pred1_ptr0[0x084] + 3* pred2_ptr1[0x084]);
				pred1_ptr0[0x085] = 0.25*(pred1_ptr0[0x085] + 3* pred2_ptr1[0x085]);
				pred1_ptr0[0x086] = 0.25*(pred1_ptr0[0x086] + 3* pred2_ptr1[0x086]);
				pred1_ptr0[0x087] = 0.25*(pred1_ptr0[0x087] + 3* pred2_ptr1[0x087]);
				pred1_ptr0[0x088] = 0.25*(pred1_ptr0[0x088] + 3* pred2_ptr1[0x088]);
				pred1_ptr0[0x089] = 0.25*(pred1_ptr0[0x089] + 3* pred2_ptr1[0x089]);
				pred1_ptr0[0x08a] = 0.25*(pred1_ptr0[0x08a] + 3* pred2_ptr1[0x08a]);
				pred1_ptr0[0x08b] = 0.25*(pred1_ptr0[0x08b] + 3* pred2_ptr1[0x08b]);
				pred1_ptr0[0x08c] = 0.25*(pred1_ptr0[0x08c] + 3* pred2_ptr1[0x08c]);
				pred1_ptr0[0x08d] = 0.25*(pred1_ptr0[0x08d] + 3* pred2_ptr1[0x08d]);
				pred1_ptr0[0x08e] = 0.25*(pred1_ptr0[0x08e] + 3* pred2_ptr1[0x08e]);
				pred1_ptr0[0x08f] = 0.25*(pred1_ptr0[0x08f] + 3* pred2_ptr1[0x08f]);
				pred1_ptr0[0x090] = 0.25*(pred1_ptr0[0x090] + 3* pred2_ptr1[0x090]);
				pred1_ptr0[0x091] = 0.25*(pred1_ptr0[0x091] + 3* pred2_ptr1[0x091]);
				pred1_ptr0[0x092] = 0.25*(pred1_ptr0[0x092] + 3* pred2_ptr1[0x092]);
				pred1_ptr0[0x093] = 0.25*(pred1_ptr0[0x093] + 3* pred2_ptr1[0x093]);
				pred1_ptr0[0x094] = 0.25*(pred1_ptr0[0x094] + 3* pred2_ptr1[0x094]);
				pred1_ptr0[0x095] = 0.25*(pred1_ptr0[0x095] + 3* pred2_ptr1[0x095]);
				pred1_ptr0[0x096] = 0.25*(pred1_ptr0[0x096] + 3* pred2_ptr1[0x096]);
				pred1_ptr0[0x097] = 0.25*(pred1_ptr0[0x097] + 3* pred2_ptr1[0x097]);
				pred1_ptr0[0x098] = 0.25*(pred1_ptr0[0x098] + 3* pred2_ptr1[0x098]);
				pred1_ptr0[0x099] = 0.25*(pred1_ptr0[0x099] + 3* pred2_ptr1[0x099]);
				pred1_ptr0[0x09a] = 0.25*(pred1_ptr0[0x09a] + 3* pred2_ptr1[0x09a]);
				pred1_ptr0[0x09b] = 0.25*(pred1_ptr0[0x09b] + 3* pred2_ptr1[0x09b]);
				pred1_ptr0[0x09c] = 0.25*(pred1_ptr0[0x09c] + 3* pred2_ptr1[0x09c]);
				pred1_ptr0[0x09d] = 0.25*(pred1_ptr0[0x09d] + 3* pred2_ptr1[0x09d]);
				pred1_ptr0[0x09e] = 0.25*(pred1_ptr0[0x09e] + 3* pred2_ptr1[0x09e]);
				pred1_ptr0[0x09f] = 0.25*(pred1_ptr0[0x09f] + 3* pred2_ptr1[0x09f]);
				pred1_ptr0[0x0a0] = 0.25*(pred1_ptr0[0x0a0] + 3* pred2_ptr1[0x0a0]);
				pred1_ptr0[0x0a1] = 0.25*(pred1_ptr0[0x0a1] + 3* pred2_ptr1[0x0a1]);
				pred1_ptr0[0x0a2] = 0.25*(pred1_ptr0[0x0a2] + 3* pred2_ptr1[0x0a2]);
				pred1_ptr0[0x0a3] = 0.25*(pred1_ptr0[0x0a3] + 3* pred2_ptr1[0x0a3]);
				pred1_ptr0[0x0a4] = 0.25*(pred1_ptr0[0x0a4] + 3* pred2_ptr1[0x0a4]);
				pred1_ptr0[0x0a5] = 0.25*(pred1_ptr0[0x0a5] + 3* pred2_ptr1[0x0a5]);
				pred1_ptr0[0x0a6] = 0.25*(pred1_ptr0[0x0a6] + 3* pred2_ptr1[0x0a6]);
				pred1_ptr0[0x0a7] = 0.25*(pred1_ptr0[0x0a7] + 3* pred2_ptr1[0x0a7]);
				pred1_ptr0[0x0a8] = 0.25*(pred1_ptr0[0x0a8] + 3* pred2_ptr1[0x0a8]);
				pred1_ptr0[0x0a9] = 0.25*(pred1_ptr0[0x0a9] + 3* pred2_ptr1[0x0a9]);
				pred1_ptr0[0x0aa] = 0.25*(pred1_ptr0[0x0aa] + 3* pred2_ptr1[0x0aa]);
				pred1_ptr0[0x0ab] = 0.25*(pred1_ptr0[0x0ab] + 3* pred2_ptr1[0x0ab]);
				pred1_ptr0[0x0ac] = 0.25*(pred1_ptr0[0x0ac] + 3* pred2_ptr1[0x0ac]);
				pred1_ptr0[0x0ad] = 0.25*(pred1_ptr0[0x0ad] + 3* pred2_ptr1[0x0ad]);
				pred1_ptr0[0x0ae] = 0.25*(pred1_ptr0[0x0ae] + 3* pred2_ptr1[0x0ae]);
				pred1_ptr0[0x0af] = 0.25*(pred1_ptr0[0x0af] + 3* pred2_ptr1[0x0af]);
				pred1_ptr0[0x0b0] = 0.25*(pred1_ptr0[0x0b0] + 3* pred2_ptr1[0x0b0]);
				pred1_ptr0[0x0b1] = 0.25*(pred1_ptr0[0x0b1] + 3* pred2_ptr1[0x0b1]);
				pred1_ptr0[0x0b2] = 0.25*(pred1_ptr0[0x0b2] + 3* pred2_ptr1[0x0b2]);
				pred1_ptr0[0x0b3] = 0.25*(pred1_ptr0[0x0b3] + 3* pred2_ptr1[0x0b3]);
				pred1_ptr0[0x0b4] = 0.25*(pred1_ptr0[0x0b4] + 3* pred2_ptr1[0x0b4]);
				pred1_ptr0[0x0b5] = 0.25*(pred1_ptr0[0x0b5] + 3* pred2_ptr1[0x0b5]);
				pred1_ptr0[0x0b6] = 0.25*(pred1_ptr0[0x0b6] + 3* pred2_ptr1[0x0b6]);
				pred1_ptr0[0x0b7] = 0.25*(pred1_ptr0[0x0b7] + 3* pred2_ptr1[0x0b7]);
				pred1_ptr0[0x0b8] = 0.25*(pred1_ptr0[0x0b8] + 3* pred2_ptr1[0x0b8]);
				pred1_ptr0[0x0b9] = 0.25*(pred1_ptr0[0x0b9] + 3* pred2_ptr1[0x0b9]);
				pred1_ptr0[0x0ba] = 0.25*(pred1_ptr0[0x0ba] + 3* pred2_ptr1[0x0ba]);
				pred1_ptr0[0x0bb] = 0.25*(pred1_ptr0[0x0bb] + 3* pred2_ptr1[0x0bb]);
				pred1_ptr0[0x0bc] = 0.25*(pred1_ptr0[0x0bc] + 3* pred2_ptr1[0x0bc]);
				pred1_ptr0[0x0bd] = 0.25*(pred1_ptr0[0x0bd] + 3* pred2_ptr1[0x0bd]);
				pred1_ptr0[0x0be] = 0.25*(pred1_ptr0[0x0be] + 3* pred2_ptr1[0x0be]);
				pred1_ptr0[0x0bf] = 0.25*(pred1_ptr0[0x0bf] + 3* pred2_ptr1[0x0bf]);
				pred1_ptr0[0x0c0] = 0.25*(pred1_ptr0[0x0c0] + 3* pred2_ptr1[0x0c0]);
				pred1_ptr0[0x0c1] = 0.25*(pred1_ptr0[0x0c1] + 3* pred2_ptr1[0x0c1]);
				pred1_ptr0[0x0c2] = 0.25*(pred1_ptr0[0x0c2] + 3* pred2_ptr1[0x0c2]);
				pred1_ptr0[0x0c3] = 0.25*(pred1_ptr0[0x0c3] + 3* pred2_ptr1[0x0c3]);
				pred1_ptr0[0x0c4] = 0.25*(pred1_ptr0[0x0c4] + 3* pred2_ptr1[0x0c4]);
				pred1_ptr0[0x0c5] = 0.25*(pred1_ptr0[0x0c5] + 3* pred2_ptr1[0x0c5]);
				pred1_ptr0[0x0c6] = 0.25*(pred1_ptr0[0x0c6] + 3* pred2_ptr1[0x0c6]);
				pred1_ptr0[0x0c7] = 0.25*(pred1_ptr0[0x0c7] + 3* pred2_ptr1[0x0c7]);
				pred1_ptr0[0x0c8] = 0.25*(pred1_ptr0[0x0c8] + 3* pred2_ptr1[0x0c8]);
				pred1_ptr0[0x0c9] = 0.25*(pred1_ptr0[0x0c9] + 3* pred2_ptr1[0x0c9]);
				pred1_ptr0[0x0ca] = 0.25*(pred1_ptr0[0x0ca] + 3* pred2_ptr1[0x0ca]);
				pred1_ptr0[0x0cb] = 0.25*(pred1_ptr0[0x0cb] + 3* pred2_ptr1[0x0cb]);
				pred1_ptr0[0x0cc] = 0.25*(pred1_ptr0[0x0cc] + 3* pred2_ptr1[0x0cc]);
				pred1_ptr0[0x0cd] = 0.25*(pred1_ptr0[0x0cd] + 3* pred2_ptr1[0x0cd]);
				pred1_ptr0[0x0ce] = 0.25*(pred1_ptr0[0x0ce] + 3* pred2_ptr1[0x0ce]);
				pred1_ptr0[0x0cf] = 0.25*(pred1_ptr0[0x0cf] + 3* pred2_ptr1[0x0cf]);
				pred1_ptr0[0x0d0] = 0.25*(pred1_ptr0[0x0d0] + 3* pred2_ptr1[0x0d0]);
				pred1_ptr0[0x0d1] = 0.25*(pred1_ptr0[0x0d1] + 3* pred2_ptr1[0x0d1]);
				pred1_ptr0[0x0d2] = 0.25*(pred1_ptr0[0x0d2] + 3* pred2_ptr1[0x0d2]);
				pred1_ptr0[0x0d3] = 0.25*(pred1_ptr0[0x0d3] + 3* pred2_ptr1[0x0d3]);
				pred1_ptr0[0x0d4] = 0.25*(pred1_ptr0[0x0d4] + 3* pred2_ptr1[0x0d4]);
				pred1_ptr0[0x0d5] = 0.25*(pred1_ptr0[0x0d5] + 3* pred2_ptr1[0x0d5]);
				pred1_ptr0[0x0d6] = 0.25*(pred1_ptr0[0x0d6] + 3* pred2_ptr1[0x0d6]);
				pred1_ptr0[0x0d7] = 0.25*(pred1_ptr0[0x0d7] + 3* pred2_ptr1[0x0d7]);
				pred1_ptr0[0x0d8] = 0.25*(pred1_ptr0[0x0d8] + 3* pred2_ptr1[0x0d8]);
				pred1_ptr0[0x0d9] = 0.25*(pred1_ptr0[0x0d9] + 3* pred2_ptr1[0x0d9]);
				pred1_ptr0[0x0da] = 0.25*(pred1_ptr0[0x0da] + 3* pred2_ptr1[0x0da]);
				pred1_ptr0[0x0db] = 0.25*(pred1_ptr0[0x0db] + 3* pred2_ptr1[0x0db]);
				pred1_ptr0[0x0dc] = 0.25*(pred1_ptr0[0x0dc] + 3* pred2_ptr1[0x0dc]);
				pred1_ptr0[0x0dd] = 0.25*(pred1_ptr0[0x0dd] + 3* pred2_ptr1[0x0dd]);
				pred1_ptr0[0x0de] = 0.25*(pred1_ptr0[0x0de] + 3* pred2_ptr1[0x0de]);
				pred1_ptr0[0x0df] = 0.25*(pred1_ptr0[0x0df] + 3* pred2_ptr1[0x0df]);
				pred1_ptr0[0x0e0] = 0.25*(pred1_ptr0[0x0e0] + 3* pred2_ptr1[0x0e0]);
				pred1_ptr0[0x0e1] = 0.25*(pred1_ptr0[0x0e1] + 3* pred2_ptr1[0x0e1]);
				pred1_ptr0[0x0e2] = 0.25*(pred1_ptr0[0x0e2] + 3* pred2_ptr1[0x0e2]);
				pred1_ptr0[0x0e3] = 0.25*(pred1_ptr0[0x0e3] + 3* pred2_ptr1[0x0e3]);
				pred1_ptr0[0x0e4] = 0.25*(pred1_ptr0[0x0e4] + 3* pred2_ptr1[0x0e4]);
				pred1_ptr0[0x0e5] = 0.25*(pred1_ptr0[0x0e5] + 3* pred2_ptr1[0x0e5]);
				pred1_ptr0[0x0e6] = 0.25*(pred1_ptr0[0x0e6] + 3* pred2_ptr1[0x0e6]);
				pred1_ptr0[0x0e7] = 0.25*(pred1_ptr0[0x0e7] + 3* pred2_ptr1[0x0e7]);
				pred1_ptr0[0x0e8] = 0.25*(pred1_ptr0[0x0e8] + 3* pred2_ptr1[0x0e8]);
				pred1_ptr0[0x0e9] = 0.25*(pred1_ptr0[0x0e9] + 3* pred2_ptr1[0x0e9]);
				pred1_ptr0[0x0ea] = 0.25*(pred1_ptr0[0x0ea] + 3* pred2_ptr1[0x0ea]);
				pred1_ptr0[0x0eb] = 0.25*(pred1_ptr0[0x0eb] + 3* pred2_ptr1[0x0eb]);
				pred1_ptr0[0x0ec] = 0.25*(pred1_ptr0[0x0ec] + 3* pred2_ptr1[0x0ec]);
				pred1_ptr0[0x0ed] = 0.25*(pred1_ptr0[0x0ed] + 3* pred2_ptr1[0x0ed]);
				pred1_ptr0[0x0ee] = 0.25*(pred1_ptr0[0x0ee] + 3* pred2_ptr1[0x0ee]);
				pred1_ptr0[0x0ef] = 0.25*(pred1_ptr0[0x0ef] + 3* pred2_ptr1[0x0ef]);
				pred1_ptr0[0x0f0] = 0.25*(pred1_ptr0[0x0f0] + 3* pred2_ptr1[0x0f0]);
				pred1_ptr0[0x0f1] = 0.25*(pred1_ptr0[0x0f1] + 3* pred2_ptr1[0x0f1]);
				pred1_ptr0[0x0f2] = 0.25*(pred1_ptr0[0x0f2] + 3* pred2_ptr1[0x0f2]);
				pred1_ptr0[0x0f3] = 0.25*(pred1_ptr0[0x0f3] + 3* pred2_ptr1[0x0f3]);
				pred1_ptr0[0x0f4] = 0.25*(pred1_ptr0[0x0f4] + 3* pred2_ptr1[0x0f4]);
				pred1_ptr0[0x0f5] = 0.25*(pred1_ptr0[0x0f5] + 3* pred2_ptr1[0x0f5]);
				pred1_ptr0[0x0f6] = 0.25*(pred1_ptr0[0x0f6] + 3* pred2_ptr1[0x0f6]);
				pred1_ptr0[0x0f7] = 0.25*(pred1_ptr0[0x0f7] + 3* pred2_ptr1[0x0f7]);
				pred1_ptr0[0x0f8] = 0.25*(pred1_ptr0[0x0f8] + 3* pred2_ptr1[0x0f8]);
				pred1_ptr0[0x0f9] = 0.25*(pred1_ptr0[0x0f9] + 3* pred2_ptr1[0x0f9]);
				pred1_ptr0[0x0fa] = 0.25*(pred1_ptr0[0x0fa] + 3* pred2_ptr1[0x0fa]);
				pred1_ptr0[0x0fb] = 0.25*(pred1_ptr0[0x0fb] + 3* pred2_ptr1[0x0fb]);
				pred1_ptr0[0x0fc] = 0.25*(pred1_ptr0[0x0fc] + 3* pred2_ptr1[0x0fc]);
				pred1_ptr0[0x0fd] = 0.25*(pred1_ptr0[0x0fd] + 3* pred2_ptr1[0x0fd]);
				pred1_ptr0[0x0fe] = 0.25*(pred1_ptr0[0x0fe] + 3* pred2_ptr1[0x0fe]);
				pred1_ptr0[0x0ff] = 0.25*(pred1_ptr0[0x0ff] + 3* pred2_ptr1[0x0ff]);
			}
		
			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,8);
			luma_index0 = ((luma_index0 + 4)&0x0f);
			luma_index1 = ((luma_index1 + 4)&0x0f);
		}
	}
}
void b_frame_x_x_x_0_0x00200_x_x_x_x_x_x_4_8(_fp16 *out, _fp16 *in1, _fp16 *in2, INT8 *mvx1, INT8 *mvy1, INT8 *mvx2, INT8 *mvy2, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index0 = 4 ;
	UINT8 luma_index1 = 8 ;
	_fp16 pred1[0x100];
	_fp16 pred2[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x210 ; y< 0x610 ; y +=0x10){// 1080P, 4 slices
		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
//			p_frame_mb(pred1, in1, x, y, luma_index0, mvx1, mvy1, luma_type);
	get_luma(luma_type[luma_index0], pred1, in1, x + mvx1[0] + 8, y + mvy1[0] + 8);
	get_luma(luma_type[luma_index0 + 1], pred1, in1, x + mvx1[1] + 16, y + mvy1[1] + 16);
	get_luma(luma_type[luma_index0 + 2], pred1, in1, x + mvx1[2] + 8, y + mvy1[2] + 24);
	get_luma(luma_type[luma_index0 + 3], pred1, in1, x + mvx1[3] + 16, y + mvy1[3] + 32);
//			p_frame_mb(pred2, in2, x, y, luma_index1, mvx2, mvy2, luma_type);
	get_luma(luma_type[luma_index1], pred2, in2, x + mvx2[0] + 8, y + mvy2[0] + 8);
	get_luma(luma_type[luma_index1 + 1], pred2, in2, x + mvx2[1] + 16, y + mvy2[1] + 16);
	get_luma(luma_type[luma_index1 + 2], pred2, in2, x + mvx2[2] + 8, y + mvy2[2] + 24);
	get_luma(luma_type[luma_index1 + 3], pred2, in2, x + mvx2[3] + 16, y + mvy2[3] + 32);
//			for (UINT l= 0 ; l< 0x100 ;l++){
				{	// 4 
				_fp16 *pred1_ptr0 = &pred1[0];
				_fp16 *pred2_ptr1 = &pred2[0];
				pred1_ptr0[0x000] = 0.25*(pred1_ptr0[0x000] + 3* pred2_ptr1[0x000]);
				pred1_ptr0[0x001] = 0.25*(pred1_ptr0[0x001] + 3* pred2_ptr1[0x001]);
				pred1_ptr0[0x002] = 0.25*(pred1_ptr0[0x002] + 3* pred2_ptr1[0x002]);
				pred1_ptr0[0x003] = 0.25*(pred1_ptr0[0x003] + 3* pred2_ptr1[0x003]);
				pred1_ptr0[0x004] = 0.25*(pred1_ptr0[0x004] + 3* pred2_ptr1[0x004]);
				pred1_ptr0[0x005] = 0.25*(pred1_ptr0[0x005] + 3* pred2_ptr1[0x005]);
				pred1_ptr0[0x006] = 0.25*(pred1_ptr0[0x006] + 3* pred2_ptr1[0x006]);
				pred1_ptr0[0x007] = 0.25*(pred1_ptr0[0x007] + 3* pred2_ptr1[0x007]);
				pred1_ptr0[0x008] = 0.25*(pred1_ptr0[0x008] + 3* pred2_ptr1[0x008]);
				pred1_ptr0[0x009] = 0.25*(pred1_ptr0[0x009] + 3* pred2_ptr1[0x009]);
				pred1_ptr0[0x00a] = 0.25*(pred1_ptr0[0x00a] + 3* pred2_ptr1[0x00a]);
				pred1_ptr0[0x00b] = 0.25*(pred1_ptr0[0x00b] + 3* pred2_ptr1[0x00b]);
				pred1_ptr0[0x00c] = 0.25*(pred1_ptr0[0x00c] + 3* pred2_ptr1[0x00c]);
				pred1_ptr0[0x00d] = 0.25*(pred1_ptr0[0x00d] + 3* pred2_ptr1[0x00d]);
				pred1_ptr0[0x00e] = 0.25*(pred1_ptr0[0x00e] + 3* pred2_ptr1[0x00e]);
				pred1_ptr0[0x00f] = 0.25*(pred1_ptr0[0x00f] + 3* pred2_ptr1[0x00f]);
				pred1_ptr0[0x010] = 0.25*(pred1_ptr0[0x010] + 3* pred2_ptr1[0x010]);
				pred1_ptr0[0x011] = 0.25*(pred1_ptr0[0x011] + 3* pred2_ptr1[0x011]);
				pred1_ptr0[0x012] = 0.25*(pred1_ptr0[0x012] + 3* pred2_ptr1[0x012]);
				pred1_ptr0[0x013] = 0.25*(pred1_ptr0[0x013] + 3* pred2_ptr1[0x013]);
				pred1_ptr0[0x014] = 0.25*(pred1_ptr0[0x014] + 3* pred2_ptr1[0x014]);
				pred1_ptr0[0x015] = 0.25*(pred1_ptr0[0x015] + 3* pred2_ptr1[0x015]);
				pred1_ptr0[0x016] = 0.25*(pred1_ptr0[0x016] + 3* pred2_ptr1[0x016]);
				pred1_ptr0[0x017] = 0.25*(pred1_ptr0[0x017] + 3* pred2_ptr1[0x017]);
				pred1_ptr0[0x018] = 0.25*(pred1_ptr0[0x018] + 3* pred2_ptr1[0x018]);
				pred1_ptr0[0x019] = 0.25*(pred1_ptr0[0x019] + 3* pred2_ptr1[0x019]);
				pred1_ptr0[0x01a] = 0.25*(pred1_ptr0[0x01a] + 3* pred2_ptr1[0x01a]);
				pred1_ptr0[0x01b] = 0.25*(pred1_ptr0[0x01b] + 3* pred2_ptr1[0x01b]);
				pred1_ptr0[0x01c] = 0.25*(pred1_ptr0[0x01c] + 3* pred2_ptr1[0x01c]);
				pred1_ptr0[0x01d] = 0.25*(pred1_ptr0[0x01d] + 3* pred2_ptr1[0x01d]);
				pred1_ptr0[0x01e] = 0.25*(pred1_ptr0[0x01e] + 3* pred2_ptr1[0x01e]);
				pred1_ptr0[0x01f] = 0.25*(pred1_ptr0[0x01f] + 3* pred2_ptr1[0x01f]);
				pred1_ptr0[0x020] = 0.25*(pred1_ptr0[0x020] + 3* pred2_ptr1[0x020]);
				pred1_ptr0[0x021] = 0.25*(pred1_ptr0[0x021] + 3* pred2_ptr1[0x021]);
				pred1_ptr0[0x022] = 0.25*(pred1_ptr0[0x022] + 3* pred2_ptr1[0x022]);
				pred1_ptr0[0x023] = 0.25*(pred1_ptr0[0x023] + 3* pred2_ptr1[0x023]);
				pred1_ptr0[0x024] = 0.25*(pred1_ptr0[0x024] + 3* pred2_ptr1[0x024]);
				pred1_ptr0[0x025] = 0.25*(pred1_ptr0[0x025] + 3* pred2_ptr1[0x025]);
				pred1_ptr0[0x026] = 0.25*(pred1_ptr0[0x026] + 3* pred2_ptr1[0x026]);
				pred1_ptr0[0x027] = 0.25*(pred1_ptr0[0x027] + 3* pred2_ptr1[0x027]);
				pred1_ptr0[0x028] = 0.25*(pred1_ptr0[0x028] + 3* pred2_ptr1[0x028]);
				pred1_ptr0[0x029] = 0.25*(pred1_ptr0[0x029] + 3* pred2_ptr1[0x029]);
				pred1_ptr0[0x02a] = 0.25*(pred1_ptr0[0x02a] + 3* pred2_ptr1[0x02a]);
				pred1_ptr0[0x02b] = 0.25*(pred1_ptr0[0x02b] + 3* pred2_ptr1[0x02b]);
				pred1_ptr0[0x02c] = 0.25*(pred1_ptr0[0x02c] + 3* pred2_ptr1[0x02c]);
				pred1_ptr0[0x02d] = 0.25*(pred1_ptr0[0x02d] + 3* pred2_ptr1[0x02d]);
				pred1_ptr0[0x02e] = 0.25*(pred1_ptr0[0x02e] + 3* pred2_ptr1[0x02e]);
				pred1_ptr0[0x02f] = 0.25*(pred1_ptr0[0x02f] + 3* pred2_ptr1[0x02f]);
				pred1_ptr0[0x030] = 0.25*(pred1_ptr0[0x030] + 3* pred2_ptr1[0x030]);
				pred1_ptr0[0x031] = 0.25*(pred1_ptr0[0x031] + 3* pred2_ptr1[0x031]);
				pred1_ptr0[0x032] = 0.25*(pred1_ptr0[0x032] + 3* pred2_ptr1[0x032]);
				pred1_ptr0[0x033] = 0.25*(pred1_ptr0[0x033] + 3* pred2_ptr1[0x033]);
				pred1_ptr0[0x034] = 0.25*(pred1_ptr0[0x034] + 3* pred2_ptr1[0x034]);
				pred1_ptr0[0x035] = 0.25*(pred1_ptr0[0x035] + 3* pred2_ptr1[0x035]);
				pred1_ptr0[0x036] = 0.25*(pred1_ptr0[0x036] + 3* pred2_ptr1[0x036]);
				pred1_ptr0[0x037] = 0.25*(pred1_ptr0[0x037] + 3* pred2_ptr1[0x037]);
				pred1_ptr0[0x038] = 0.25*(pred1_ptr0[0x038] + 3* pred2_ptr1[0x038]);
				pred1_ptr0[0x039] = 0.25*(pred1_ptr0[0x039] + 3* pred2_ptr1[0x039]);
				pred1_ptr0[0x03a] = 0.25*(pred1_ptr0[0x03a] + 3* pred2_ptr1[0x03a]);
				pred1_ptr0[0x03b] = 0.25*(pred1_ptr0[0x03b] + 3* pred2_ptr1[0x03b]);
				pred1_ptr0[0x03c] = 0.25*(pred1_ptr0[0x03c] + 3* pred2_ptr1[0x03c]);
				pred1_ptr0[0x03d] = 0.25*(pred1_ptr0[0x03d] + 3* pred2_ptr1[0x03d]);
				pred1_ptr0[0x03e] = 0.25*(pred1_ptr0[0x03e] + 3* pred2_ptr1[0x03e]);
				pred1_ptr0[0x03f] = 0.25*(pred1_ptr0[0x03f] + 3* pred2_ptr1[0x03f]);
				pred1_ptr0[0x040] = 0.25*(pred1_ptr0[0x040] + 3* pred2_ptr1[0x040]);
				pred1_ptr0[0x041] = 0.25*(pred1_ptr0[0x041] + 3* pred2_ptr1[0x041]);
				pred1_ptr0[0x042] = 0.25*(pred1_ptr0[0x042] + 3* pred2_ptr1[0x042]);
				pred1_ptr0[0x043] = 0.25*(pred1_ptr0[0x043] + 3* pred2_ptr1[0x043]);
				pred1_ptr0[0x044] = 0.25*(pred1_ptr0[0x044] + 3* pred2_ptr1[0x044]);
				pred1_ptr0[0x045] = 0.25*(pred1_ptr0[0x045] + 3* pred2_ptr1[0x045]);
				pred1_ptr0[0x046] = 0.25*(pred1_ptr0[0x046] + 3* pred2_ptr1[0x046]);
				pred1_ptr0[0x047] = 0.25*(pred1_ptr0[0x047] + 3* pred2_ptr1[0x047]);
				pred1_ptr0[0x048] = 0.25*(pred1_ptr0[0x048] + 3* pred2_ptr1[0x048]);
				pred1_ptr0[0x049] = 0.25*(pred1_ptr0[0x049] + 3* pred2_ptr1[0x049]);
				pred1_ptr0[0x04a] = 0.25*(pred1_ptr0[0x04a] + 3* pred2_ptr1[0x04a]);
				pred1_ptr0[0x04b] = 0.25*(pred1_ptr0[0x04b] + 3* pred2_ptr1[0x04b]);
				pred1_ptr0[0x04c] = 0.25*(pred1_ptr0[0x04c] + 3* pred2_ptr1[0x04c]);
				pred1_ptr0[0x04d] = 0.25*(pred1_ptr0[0x04d] + 3* pred2_ptr1[0x04d]);
				pred1_ptr0[0x04e] = 0.25*(pred1_ptr0[0x04e] + 3* pred2_ptr1[0x04e]);
				pred1_ptr0[0x04f] = 0.25*(pred1_ptr0[0x04f] + 3* pred2_ptr1[0x04f]);
				pred1_ptr0[0x050] = 0.25*(pred1_ptr0[0x050] + 3* pred2_ptr1[0x050]);
				pred1_ptr0[0x051] = 0.25*(pred1_ptr0[0x051] + 3* pred2_ptr1[0x051]);
				pred1_ptr0[0x052] = 0.25*(pred1_ptr0[0x052] + 3* pred2_ptr1[0x052]);
				pred1_ptr0[0x053] = 0.25*(pred1_ptr0[0x053] + 3* pred2_ptr1[0x053]);
				pred1_ptr0[0x054] = 0.25*(pred1_ptr0[0x054] + 3* pred2_ptr1[0x054]);
				pred1_ptr0[0x055] = 0.25*(pred1_ptr0[0x055] + 3* pred2_ptr1[0x055]);
				pred1_ptr0[0x056] = 0.25*(pred1_ptr0[0x056] + 3* pred2_ptr1[0x056]);
				pred1_ptr0[0x057] = 0.25*(pred1_ptr0[0x057] + 3* pred2_ptr1[0x057]);
				pred1_ptr0[0x058] = 0.25*(pred1_ptr0[0x058] + 3* pred2_ptr1[0x058]);
				pred1_ptr0[0x059] = 0.25*(pred1_ptr0[0x059] + 3* pred2_ptr1[0x059]);
				pred1_ptr0[0x05a] = 0.25*(pred1_ptr0[0x05a] + 3* pred2_ptr1[0x05a]);
				pred1_ptr0[0x05b] = 0.25*(pred1_ptr0[0x05b] + 3* pred2_ptr1[0x05b]);
				pred1_ptr0[0x05c] = 0.25*(pred1_ptr0[0x05c] + 3* pred2_ptr1[0x05c]);
				pred1_ptr0[0x05d] = 0.25*(pred1_ptr0[0x05d] + 3* pred2_ptr1[0x05d]);
				pred1_ptr0[0x05e] = 0.25*(pred1_ptr0[0x05e] + 3* pred2_ptr1[0x05e]);
				pred1_ptr0[0x05f] = 0.25*(pred1_ptr0[0x05f] + 3* pred2_ptr1[0x05f]);
				pred1_ptr0[0x060] = 0.25*(pred1_ptr0[0x060] + 3* pred2_ptr1[0x060]);
				pred1_ptr0[0x061] = 0.25*(pred1_ptr0[0x061] + 3* pred2_ptr1[0x061]);
				pred1_ptr0[0x062] = 0.25*(pred1_ptr0[0x062] + 3* pred2_ptr1[0x062]);
				pred1_ptr0[0x063] = 0.25*(pred1_ptr0[0x063] + 3* pred2_ptr1[0x063]);
				pred1_ptr0[0x064] = 0.25*(pred1_ptr0[0x064] + 3* pred2_ptr1[0x064]);
				pred1_ptr0[0x065] = 0.25*(pred1_ptr0[0x065] + 3* pred2_ptr1[0x065]);
				pred1_ptr0[0x066] = 0.25*(pred1_ptr0[0x066] + 3* pred2_ptr1[0x066]);
				pred1_ptr0[0x067] = 0.25*(pred1_ptr0[0x067] + 3* pred2_ptr1[0x067]);
				pred1_ptr0[0x068] = 0.25*(pred1_ptr0[0x068] + 3* pred2_ptr1[0x068]);
				pred1_ptr0[0x069] = 0.25*(pred1_ptr0[0x069] + 3* pred2_ptr1[0x069]);
				pred1_ptr0[0x06a] = 0.25*(pred1_ptr0[0x06a] + 3* pred2_ptr1[0x06a]);
				pred1_ptr0[0x06b] = 0.25*(pred1_ptr0[0x06b] + 3* pred2_ptr1[0x06b]);
				pred1_ptr0[0x06c] = 0.25*(pred1_ptr0[0x06c] + 3* pred2_ptr1[0x06c]);
				pred1_ptr0[0x06d] = 0.25*(pred1_ptr0[0x06d] + 3* pred2_ptr1[0x06d]);
				pred1_ptr0[0x06e] = 0.25*(pred1_ptr0[0x06e] + 3* pred2_ptr1[0x06e]);
				pred1_ptr0[0x06f] = 0.25*(pred1_ptr0[0x06f] + 3* pred2_ptr1[0x06f]);
				pred1_ptr0[0x070] = 0.25*(pred1_ptr0[0x070] + 3* pred2_ptr1[0x070]);
				pred1_ptr0[0x071] = 0.25*(pred1_ptr0[0x071] + 3* pred2_ptr1[0x071]);
				pred1_ptr0[0x072] = 0.25*(pred1_ptr0[0x072] + 3* pred2_ptr1[0x072]);
				pred1_ptr0[0x073] = 0.25*(pred1_ptr0[0x073] + 3* pred2_ptr1[0x073]);
				pred1_ptr0[0x074] = 0.25*(pred1_ptr0[0x074] + 3* pred2_ptr1[0x074]);
				pred1_ptr0[0x075] = 0.25*(pred1_ptr0[0x075] + 3* pred2_ptr1[0x075]);
				pred1_ptr0[0x076] = 0.25*(pred1_ptr0[0x076] + 3* pred2_ptr1[0x076]);
				pred1_ptr0[0x077] = 0.25*(pred1_ptr0[0x077] + 3* pred2_ptr1[0x077]);
				pred1_ptr0[0x078] = 0.25*(pred1_ptr0[0x078] + 3* pred2_ptr1[0x078]);
				pred1_ptr0[0x079] = 0.25*(pred1_ptr0[0x079] + 3* pred2_ptr1[0x079]);
				pred1_ptr0[0x07a] = 0.25*(pred1_ptr0[0x07a] + 3* pred2_ptr1[0x07a]);
				pred1_ptr0[0x07b] = 0.25*(pred1_ptr0[0x07b] + 3* pred2_ptr1[0x07b]);
				pred1_ptr0[0x07c] = 0.25*(pred1_ptr0[0x07c] + 3* pred2_ptr1[0x07c]);
				pred1_ptr0[0x07d] = 0.25*(pred1_ptr0[0x07d] + 3* pred2_ptr1[0x07d]);
				pred1_ptr0[0x07e] = 0.25*(pred1_ptr0[0x07e] + 3* pred2_ptr1[0x07e]);
				pred1_ptr0[0x07f] = 0.25*(pred1_ptr0[0x07f] + 3* pred2_ptr1[0x07f]);
				pred1_ptr0[0x080] = 0.25*(pred1_ptr0[0x080] + 3* pred2_ptr1[0x080]);
				pred1_ptr0[0x081] = 0.25*(pred1_ptr0[0x081] + 3* pred2_ptr1[0x081]);
				pred1_ptr0[0x082] = 0.25*(pred1_ptr0[0x082] + 3* pred2_ptr1[0x082]);
				pred1_ptr0[0x083] = 0.25*(pred1_ptr0[0x083] + 3* pred2_ptr1[0x083]);
				pred1_ptr0[0x084] = 0.25*(pred1_ptr0[0x084] + 3* pred2_ptr1[0x084]);
				pred1_ptr0[0x085] = 0.25*(pred1_ptr0[0x085] + 3* pred2_ptr1[0x085]);
				pred1_ptr0[0x086] = 0.25*(pred1_ptr0[0x086] + 3* pred2_ptr1[0x086]);
				pred1_ptr0[0x087] = 0.25*(pred1_ptr0[0x087] + 3* pred2_ptr1[0x087]);
				pred1_ptr0[0x088] = 0.25*(pred1_ptr0[0x088] + 3* pred2_ptr1[0x088]);
				pred1_ptr0[0x089] = 0.25*(pred1_ptr0[0x089] + 3* pred2_ptr1[0x089]);
				pred1_ptr0[0x08a] = 0.25*(pred1_ptr0[0x08a] + 3* pred2_ptr1[0x08a]);
				pred1_ptr0[0x08b] = 0.25*(pred1_ptr0[0x08b] + 3* pred2_ptr1[0x08b]);
				pred1_ptr0[0x08c] = 0.25*(pred1_ptr0[0x08c] + 3* pred2_ptr1[0x08c]);
				pred1_ptr0[0x08d] = 0.25*(pred1_ptr0[0x08d] + 3* pred2_ptr1[0x08d]);
				pred1_ptr0[0x08e] = 0.25*(pred1_ptr0[0x08e] + 3* pred2_ptr1[0x08e]);
				pred1_ptr0[0x08f] = 0.25*(pred1_ptr0[0x08f] + 3* pred2_ptr1[0x08f]);
				pred1_ptr0[0x090] = 0.25*(pred1_ptr0[0x090] + 3* pred2_ptr1[0x090]);
				pred1_ptr0[0x091] = 0.25*(pred1_ptr0[0x091] + 3* pred2_ptr1[0x091]);
				pred1_ptr0[0x092] = 0.25*(pred1_ptr0[0x092] + 3* pred2_ptr1[0x092]);
				pred1_ptr0[0x093] = 0.25*(pred1_ptr0[0x093] + 3* pred2_ptr1[0x093]);
				pred1_ptr0[0x094] = 0.25*(pred1_ptr0[0x094] + 3* pred2_ptr1[0x094]);
				pred1_ptr0[0x095] = 0.25*(pred1_ptr0[0x095] + 3* pred2_ptr1[0x095]);
				pred1_ptr0[0x096] = 0.25*(pred1_ptr0[0x096] + 3* pred2_ptr1[0x096]);
				pred1_ptr0[0x097] = 0.25*(pred1_ptr0[0x097] + 3* pred2_ptr1[0x097]);
				pred1_ptr0[0x098] = 0.25*(pred1_ptr0[0x098] + 3* pred2_ptr1[0x098]);
				pred1_ptr0[0x099] = 0.25*(pred1_ptr0[0x099] + 3* pred2_ptr1[0x099]);
				pred1_ptr0[0x09a] = 0.25*(pred1_ptr0[0x09a] + 3* pred2_ptr1[0x09a]);
				pred1_ptr0[0x09b] = 0.25*(pred1_ptr0[0x09b] + 3* pred2_ptr1[0x09b]);
				pred1_ptr0[0x09c] = 0.25*(pred1_ptr0[0x09c] + 3* pred2_ptr1[0x09c]);
				pred1_ptr0[0x09d] = 0.25*(pred1_ptr0[0x09d] + 3* pred2_ptr1[0x09d]);
				pred1_ptr0[0x09e] = 0.25*(pred1_ptr0[0x09e] + 3* pred2_ptr1[0x09e]);
				pred1_ptr0[0x09f] = 0.25*(pred1_ptr0[0x09f] + 3* pred2_ptr1[0x09f]);
				pred1_ptr0[0x0a0] = 0.25*(pred1_ptr0[0x0a0] + 3* pred2_ptr1[0x0a0]);
				pred1_ptr0[0x0a1] = 0.25*(pred1_ptr0[0x0a1] + 3* pred2_ptr1[0x0a1]);
				pred1_ptr0[0x0a2] = 0.25*(pred1_ptr0[0x0a2] + 3* pred2_ptr1[0x0a2]);
				pred1_ptr0[0x0a3] = 0.25*(pred1_ptr0[0x0a3] + 3* pred2_ptr1[0x0a3]);
				pred1_ptr0[0x0a4] = 0.25*(pred1_ptr0[0x0a4] + 3* pred2_ptr1[0x0a4]);
				pred1_ptr0[0x0a5] = 0.25*(pred1_ptr0[0x0a5] + 3* pred2_ptr1[0x0a5]);
				pred1_ptr0[0x0a6] = 0.25*(pred1_ptr0[0x0a6] + 3* pred2_ptr1[0x0a6]);
				pred1_ptr0[0x0a7] = 0.25*(pred1_ptr0[0x0a7] + 3* pred2_ptr1[0x0a7]);
				pred1_ptr0[0x0a8] = 0.25*(pred1_ptr0[0x0a8] + 3* pred2_ptr1[0x0a8]);
				pred1_ptr0[0x0a9] = 0.25*(pred1_ptr0[0x0a9] + 3* pred2_ptr1[0x0a9]);
				pred1_ptr0[0x0aa] = 0.25*(pred1_ptr0[0x0aa] + 3* pred2_ptr1[0x0aa]);
				pred1_ptr0[0x0ab] = 0.25*(pred1_ptr0[0x0ab] + 3* pred2_ptr1[0x0ab]);
				pred1_ptr0[0x0ac] = 0.25*(pred1_ptr0[0x0ac] + 3* pred2_ptr1[0x0ac]);
				pred1_ptr0[0x0ad] = 0.25*(pred1_ptr0[0x0ad] + 3* pred2_ptr1[0x0ad]);
				pred1_ptr0[0x0ae] = 0.25*(pred1_ptr0[0x0ae] + 3* pred2_ptr1[0x0ae]);
				pred1_ptr0[0x0af] = 0.25*(pred1_ptr0[0x0af] + 3* pred2_ptr1[0x0af]);
				pred1_ptr0[0x0b0] = 0.25*(pred1_ptr0[0x0b0] + 3* pred2_ptr1[0x0b0]);
				pred1_ptr0[0x0b1] = 0.25*(pred1_ptr0[0x0b1] + 3* pred2_ptr1[0x0b1]);
				pred1_ptr0[0x0b2] = 0.25*(pred1_ptr0[0x0b2] + 3* pred2_ptr1[0x0b2]);
				pred1_ptr0[0x0b3] = 0.25*(pred1_ptr0[0x0b3] + 3* pred2_ptr1[0x0b3]);
				pred1_ptr0[0x0b4] = 0.25*(pred1_ptr0[0x0b4] + 3* pred2_ptr1[0x0b4]);
				pred1_ptr0[0x0b5] = 0.25*(pred1_ptr0[0x0b5] + 3* pred2_ptr1[0x0b5]);
				pred1_ptr0[0x0b6] = 0.25*(pred1_ptr0[0x0b6] + 3* pred2_ptr1[0x0b6]);
				pred1_ptr0[0x0b7] = 0.25*(pred1_ptr0[0x0b7] + 3* pred2_ptr1[0x0b7]);
				pred1_ptr0[0x0b8] = 0.25*(pred1_ptr0[0x0b8] + 3* pred2_ptr1[0x0b8]);
				pred1_ptr0[0x0b9] = 0.25*(pred1_ptr0[0x0b9] + 3* pred2_ptr1[0x0b9]);
				pred1_ptr0[0x0ba] = 0.25*(pred1_ptr0[0x0ba] + 3* pred2_ptr1[0x0ba]);
				pred1_ptr0[0x0bb] = 0.25*(pred1_ptr0[0x0bb] + 3* pred2_ptr1[0x0bb]);
				pred1_ptr0[0x0bc] = 0.25*(pred1_ptr0[0x0bc] + 3* pred2_ptr1[0x0bc]);
				pred1_ptr0[0x0bd] = 0.25*(pred1_ptr0[0x0bd] + 3* pred2_ptr1[0x0bd]);
				pred1_ptr0[0x0be] = 0.25*(pred1_ptr0[0x0be] + 3* pred2_ptr1[0x0be]);
				pred1_ptr0[0x0bf] = 0.25*(pred1_ptr0[0x0bf] + 3* pred2_ptr1[0x0bf]);
				pred1_ptr0[0x0c0] = 0.25*(pred1_ptr0[0x0c0] + 3* pred2_ptr1[0x0c0]);
				pred1_ptr0[0x0c1] = 0.25*(pred1_ptr0[0x0c1] + 3* pred2_ptr1[0x0c1]);
				pred1_ptr0[0x0c2] = 0.25*(pred1_ptr0[0x0c2] + 3* pred2_ptr1[0x0c2]);
				pred1_ptr0[0x0c3] = 0.25*(pred1_ptr0[0x0c3] + 3* pred2_ptr1[0x0c3]);
				pred1_ptr0[0x0c4] = 0.25*(pred1_ptr0[0x0c4] + 3* pred2_ptr1[0x0c4]);
				pred1_ptr0[0x0c5] = 0.25*(pred1_ptr0[0x0c5] + 3* pred2_ptr1[0x0c5]);
				pred1_ptr0[0x0c6] = 0.25*(pred1_ptr0[0x0c6] + 3* pred2_ptr1[0x0c6]);
				pred1_ptr0[0x0c7] = 0.25*(pred1_ptr0[0x0c7] + 3* pred2_ptr1[0x0c7]);
				pred1_ptr0[0x0c8] = 0.25*(pred1_ptr0[0x0c8] + 3* pred2_ptr1[0x0c8]);
				pred1_ptr0[0x0c9] = 0.25*(pred1_ptr0[0x0c9] + 3* pred2_ptr1[0x0c9]);
				pred1_ptr0[0x0ca] = 0.25*(pred1_ptr0[0x0ca] + 3* pred2_ptr1[0x0ca]);
				pred1_ptr0[0x0cb] = 0.25*(pred1_ptr0[0x0cb] + 3* pred2_ptr1[0x0cb]);
				pred1_ptr0[0x0cc] = 0.25*(pred1_ptr0[0x0cc] + 3* pred2_ptr1[0x0cc]);
				pred1_ptr0[0x0cd] = 0.25*(pred1_ptr0[0x0cd] + 3* pred2_ptr1[0x0cd]);
				pred1_ptr0[0x0ce] = 0.25*(pred1_ptr0[0x0ce] + 3* pred2_ptr1[0x0ce]);
				pred1_ptr0[0x0cf] = 0.25*(pred1_ptr0[0x0cf] + 3* pred2_ptr1[0x0cf]);
				pred1_ptr0[0x0d0] = 0.25*(pred1_ptr0[0x0d0] + 3* pred2_ptr1[0x0d0]);
				pred1_ptr0[0x0d1] = 0.25*(pred1_ptr0[0x0d1] + 3* pred2_ptr1[0x0d1]);
				pred1_ptr0[0x0d2] = 0.25*(pred1_ptr0[0x0d2] + 3* pred2_ptr1[0x0d2]);
				pred1_ptr0[0x0d3] = 0.25*(pred1_ptr0[0x0d3] + 3* pred2_ptr1[0x0d3]);
				pred1_ptr0[0x0d4] = 0.25*(pred1_ptr0[0x0d4] + 3* pred2_ptr1[0x0d4]);
				pred1_ptr0[0x0d5] = 0.25*(pred1_ptr0[0x0d5] + 3* pred2_ptr1[0x0d5]);
				pred1_ptr0[0x0d6] = 0.25*(pred1_ptr0[0x0d6] + 3* pred2_ptr1[0x0d6]);
				pred1_ptr0[0x0d7] = 0.25*(pred1_ptr0[0x0d7] + 3* pred2_ptr1[0x0d7]);
				pred1_ptr0[0x0d8] = 0.25*(pred1_ptr0[0x0d8] + 3* pred2_ptr1[0x0d8]);
				pred1_ptr0[0x0d9] = 0.25*(pred1_ptr0[0x0d9] + 3* pred2_ptr1[0x0d9]);
				pred1_ptr0[0x0da] = 0.25*(pred1_ptr0[0x0da] + 3* pred2_ptr1[0x0da]);
				pred1_ptr0[0x0db] = 0.25*(pred1_ptr0[0x0db] + 3* pred2_ptr1[0x0db]);
				pred1_ptr0[0x0dc] = 0.25*(pred1_ptr0[0x0dc] + 3* pred2_ptr1[0x0dc]);
				pred1_ptr0[0x0dd] = 0.25*(pred1_ptr0[0x0dd] + 3* pred2_ptr1[0x0dd]);
				pred1_ptr0[0x0de] = 0.25*(pred1_ptr0[0x0de] + 3* pred2_ptr1[0x0de]);
				pred1_ptr0[0x0df] = 0.25*(pred1_ptr0[0x0df] + 3* pred2_ptr1[0x0df]);
				pred1_ptr0[0x0e0] = 0.25*(pred1_ptr0[0x0e0] + 3* pred2_ptr1[0x0e0]);
				pred1_ptr0[0x0e1] = 0.25*(pred1_ptr0[0x0e1] + 3* pred2_ptr1[0x0e1]);
				pred1_ptr0[0x0e2] = 0.25*(pred1_ptr0[0x0e2] + 3* pred2_ptr1[0x0e2]);
				pred1_ptr0[0x0e3] = 0.25*(pred1_ptr0[0x0e3] + 3* pred2_ptr1[0x0e3]);
				pred1_ptr0[0x0e4] = 0.25*(pred1_ptr0[0x0e4] + 3* pred2_ptr1[0x0e4]);
				pred1_ptr0[0x0e5] = 0.25*(pred1_ptr0[0x0e5] + 3* pred2_ptr1[0x0e5]);
				pred1_ptr0[0x0e6] = 0.25*(pred1_ptr0[0x0e6] + 3* pred2_ptr1[0x0e6]);
				pred1_ptr0[0x0e7] = 0.25*(pred1_ptr0[0x0e7] + 3* pred2_ptr1[0x0e7]);
				pred1_ptr0[0x0e8] = 0.25*(pred1_ptr0[0x0e8] + 3* pred2_ptr1[0x0e8]);
				pred1_ptr0[0x0e9] = 0.25*(pred1_ptr0[0x0e9] + 3* pred2_ptr1[0x0e9]);
				pred1_ptr0[0x0ea] = 0.25*(pred1_ptr0[0x0ea] + 3* pred2_ptr1[0x0ea]);
				pred1_ptr0[0x0eb] = 0.25*(pred1_ptr0[0x0eb] + 3* pred2_ptr1[0x0eb]);
				pred1_ptr0[0x0ec] = 0.25*(pred1_ptr0[0x0ec] + 3* pred2_ptr1[0x0ec]);
				pred1_ptr0[0x0ed] = 0.25*(pred1_ptr0[0x0ed] + 3* pred2_ptr1[0x0ed]);
				pred1_ptr0[0x0ee] = 0.25*(pred1_ptr0[0x0ee] + 3* pred2_ptr1[0x0ee]);
				pred1_ptr0[0x0ef] = 0.25*(pred1_ptr0[0x0ef] + 3* pred2_ptr1[0x0ef]);
				pred1_ptr0[0x0f0] = 0.25*(pred1_ptr0[0x0f0] + 3* pred2_ptr1[0x0f0]);
				pred1_ptr0[0x0f1] = 0.25*(pred1_ptr0[0x0f1] + 3* pred2_ptr1[0x0f1]);
				pred1_ptr0[0x0f2] = 0.25*(pred1_ptr0[0x0f2] + 3* pred2_ptr1[0x0f2]);
				pred1_ptr0[0x0f3] = 0.25*(pred1_ptr0[0x0f3] + 3* pred2_ptr1[0x0f3]);
				pred1_ptr0[0x0f4] = 0.25*(pred1_ptr0[0x0f4] + 3* pred2_ptr1[0x0f4]);
				pred1_ptr0[0x0f5] = 0.25*(pred1_ptr0[0x0f5] + 3* pred2_ptr1[0x0f5]);
				pred1_ptr0[0x0f6] = 0.25*(pred1_ptr0[0x0f6] + 3* pred2_ptr1[0x0f6]);
				pred1_ptr0[0x0f7] = 0.25*(pred1_ptr0[0x0f7] + 3* pred2_ptr1[0x0f7]);
				pred1_ptr0[0x0f8] = 0.25*(pred1_ptr0[0x0f8] + 3* pred2_ptr1[0x0f8]);
				pred1_ptr0[0x0f9] = 0.25*(pred1_ptr0[0x0f9] + 3* pred2_ptr1[0x0f9]);
				pred1_ptr0[0x0fa] = 0.25*(pred1_ptr0[0x0fa] + 3* pred2_ptr1[0x0fa]);
				pred1_ptr0[0x0fb] = 0.25*(pred1_ptr0[0x0fb] + 3* pred2_ptr1[0x0fb]);
				pred1_ptr0[0x0fc] = 0.25*(pred1_ptr0[0x0fc] + 3* pred2_ptr1[0x0fc]);
				pred1_ptr0[0x0fd] = 0.25*(pred1_ptr0[0x0fd] + 3* pred2_ptr1[0x0fd]);
				pred1_ptr0[0x0fe] = 0.25*(pred1_ptr0[0x0fe] + 3* pred2_ptr1[0x0fe]);
				pred1_ptr0[0x0ff] = 0.25*(pred1_ptr0[0x0ff] + 3* pred2_ptr1[0x0ff]);
			}
		
			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,8);
			luma_index0 = ((luma_index0 + 4)&0x0f);
			luma_index1 = ((luma_index1 + 4)&0x0f);
		}
	}
}
void b_frame_x_x_x_0_0x00400_x_x_x_x_x_x_4_8(_fp16 *out, _fp16 *in1, _fp16 *in2, INT8 *mvx1, INT8 *mvy1, INT8 *mvx2, INT8 *mvy2, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index0 = 4 ;
	UINT8 luma_index1 = 8 ;
	_fp16 pred1[0x100];
	_fp16 pred2[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x410 ; y< 0x810 ; y +=0x10){// 1080P, 4 slices
		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
//			p_frame_mb(pred1, in1, x, y, luma_index0, mvx1, mvy1, luma_type);
	get_luma(luma_type[luma_index0], pred1, in1, x + mvx1[0] + 8, y + mvy1[0] + 8);
	get_luma(luma_type[luma_index0 + 1], pred1, in1, x + mvx1[1] + 16, y + mvy1[1] + 16);
	get_luma(luma_type[luma_index0 + 2], pred1, in1, x + mvx1[2] + 8, y + mvy1[2] + 24);
	get_luma(luma_type[luma_index0 + 3], pred1, in1, x + mvx1[3] + 16, y + mvy1[3] + 32);
//			p_frame_mb(pred2, in2, x, y, luma_index1, mvx2, mvy2, luma_type);
	get_luma(luma_type[luma_index1], pred2, in2, x + mvx2[0] + 8, y + mvy2[0] + 8);
	get_luma(luma_type[luma_index1 + 1], pred2, in2, x + mvx2[1] + 16, y + mvy2[1] + 16);
	get_luma(luma_type[luma_index1 + 2], pred2, in2, x + mvx2[2] + 8, y + mvy2[2] + 24);
	get_luma(luma_type[luma_index1 + 3], pred2, in2, x + mvx2[3] + 16, y + mvy2[3] + 32);
//			for (UINT l= 0 ; l< 0x100 ;l++){
				{	// 4 
				_fp16 *pred1_ptr0 = &pred1[0];
				_fp16 *pred2_ptr1 = &pred2[0];
				pred1_ptr0[0x000] = 0.25*(pred1_ptr0[0x000] + 3* pred2_ptr1[0x000]);
				pred1_ptr0[0x001] = 0.25*(pred1_ptr0[0x001] + 3* pred2_ptr1[0x001]);
				pred1_ptr0[0x002] = 0.25*(pred1_ptr0[0x002] + 3* pred2_ptr1[0x002]);
				pred1_ptr0[0x003] = 0.25*(pred1_ptr0[0x003] + 3* pred2_ptr1[0x003]);
				pred1_ptr0[0x004] = 0.25*(pred1_ptr0[0x004] + 3* pred2_ptr1[0x004]);
				pred1_ptr0[0x005] = 0.25*(pred1_ptr0[0x005] + 3* pred2_ptr1[0x005]);
				pred1_ptr0[0x006] = 0.25*(pred1_ptr0[0x006] + 3* pred2_ptr1[0x006]);
				pred1_ptr0[0x007] = 0.25*(pred1_ptr0[0x007] + 3* pred2_ptr1[0x007]);
				pred1_ptr0[0x008] = 0.25*(pred1_ptr0[0x008] + 3* pred2_ptr1[0x008]);
				pred1_ptr0[0x009] = 0.25*(pred1_ptr0[0x009] + 3* pred2_ptr1[0x009]);
				pred1_ptr0[0x00a] = 0.25*(pred1_ptr0[0x00a] + 3* pred2_ptr1[0x00a]);
				pred1_ptr0[0x00b] = 0.25*(pred1_ptr0[0x00b] + 3* pred2_ptr1[0x00b]);
				pred1_ptr0[0x00c] = 0.25*(pred1_ptr0[0x00c] + 3* pred2_ptr1[0x00c]);
				pred1_ptr0[0x00d] = 0.25*(pred1_ptr0[0x00d] + 3* pred2_ptr1[0x00d]);
				pred1_ptr0[0x00e] = 0.25*(pred1_ptr0[0x00e] + 3* pred2_ptr1[0x00e]);
				pred1_ptr0[0x00f] = 0.25*(pred1_ptr0[0x00f] + 3* pred2_ptr1[0x00f]);
				pred1_ptr0[0x010] = 0.25*(pred1_ptr0[0x010] + 3* pred2_ptr1[0x010]);
				pred1_ptr0[0x011] = 0.25*(pred1_ptr0[0x011] + 3* pred2_ptr1[0x011]);
				pred1_ptr0[0x012] = 0.25*(pred1_ptr0[0x012] + 3* pred2_ptr1[0x012]);
				pred1_ptr0[0x013] = 0.25*(pred1_ptr0[0x013] + 3* pred2_ptr1[0x013]);
				pred1_ptr0[0x014] = 0.25*(pred1_ptr0[0x014] + 3* pred2_ptr1[0x014]);
				pred1_ptr0[0x015] = 0.25*(pred1_ptr0[0x015] + 3* pred2_ptr1[0x015]);
				pred1_ptr0[0x016] = 0.25*(pred1_ptr0[0x016] + 3* pred2_ptr1[0x016]);
				pred1_ptr0[0x017] = 0.25*(pred1_ptr0[0x017] + 3* pred2_ptr1[0x017]);
				pred1_ptr0[0x018] = 0.25*(pred1_ptr0[0x018] + 3* pred2_ptr1[0x018]);
				pred1_ptr0[0x019] = 0.25*(pred1_ptr0[0x019] + 3* pred2_ptr1[0x019]);
				pred1_ptr0[0x01a] = 0.25*(pred1_ptr0[0x01a] + 3* pred2_ptr1[0x01a]);
				pred1_ptr0[0x01b] = 0.25*(pred1_ptr0[0x01b] + 3* pred2_ptr1[0x01b]);
				pred1_ptr0[0x01c] = 0.25*(pred1_ptr0[0x01c] + 3* pred2_ptr1[0x01c]);
				pred1_ptr0[0x01d] = 0.25*(pred1_ptr0[0x01d] + 3* pred2_ptr1[0x01d]);
				pred1_ptr0[0x01e] = 0.25*(pred1_ptr0[0x01e] + 3* pred2_ptr1[0x01e]);
				pred1_ptr0[0x01f] = 0.25*(pred1_ptr0[0x01f] + 3* pred2_ptr1[0x01f]);
				pred1_ptr0[0x020] = 0.25*(pred1_ptr0[0x020] + 3* pred2_ptr1[0x020]);
				pred1_ptr0[0x021] = 0.25*(pred1_ptr0[0x021] + 3* pred2_ptr1[0x021]);
				pred1_ptr0[0x022] = 0.25*(pred1_ptr0[0x022] + 3* pred2_ptr1[0x022]);
				pred1_ptr0[0x023] = 0.25*(pred1_ptr0[0x023] + 3* pred2_ptr1[0x023]);
				pred1_ptr0[0x024] = 0.25*(pred1_ptr0[0x024] + 3* pred2_ptr1[0x024]);
				pred1_ptr0[0x025] = 0.25*(pred1_ptr0[0x025] + 3* pred2_ptr1[0x025]);
				pred1_ptr0[0x026] = 0.25*(pred1_ptr0[0x026] + 3* pred2_ptr1[0x026]);
				pred1_ptr0[0x027] = 0.25*(pred1_ptr0[0x027] + 3* pred2_ptr1[0x027]);
				pred1_ptr0[0x028] = 0.25*(pred1_ptr0[0x028] + 3* pred2_ptr1[0x028]);
				pred1_ptr0[0x029] = 0.25*(pred1_ptr0[0x029] + 3* pred2_ptr1[0x029]);
				pred1_ptr0[0x02a] = 0.25*(pred1_ptr0[0x02a] + 3* pred2_ptr1[0x02a]);
				pred1_ptr0[0x02b] = 0.25*(pred1_ptr0[0x02b] + 3* pred2_ptr1[0x02b]);
				pred1_ptr0[0x02c] = 0.25*(pred1_ptr0[0x02c] + 3* pred2_ptr1[0x02c]);
				pred1_ptr0[0x02d] = 0.25*(pred1_ptr0[0x02d] + 3* pred2_ptr1[0x02d]);
				pred1_ptr0[0x02e] = 0.25*(pred1_ptr0[0x02e] + 3* pred2_ptr1[0x02e]);
				pred1_ptr0[0x02f] = 0.25*(pred1_ptr0[0x02f] + 3* pred2_ptr1[0x02f]);
				pred1_ptr0[0x030] = 0.25*(pred1_ptr0[0x030] + 3* pred2_ptr1[0x030]);
				pred1_ptr0[0x031] = 0.25*(pred1_ptr0[0x031] + 3* pred2_ptr1[0x031]);
				pred1_ptr0[0x032] = 0.25*(pred1_ptr0[0x032] + 3* pred2_ptr1[0x032]);
				pred1_ptr0[0x033] = 0.25*(pred1_ptr0[0x033] + 3* pred2_ptr1[0x033]);
				pred1_ptr0[0x034] = 0.25*(pred1_ptr0[0x034] + 3* pred2_ptr1[0x034]);
				pred1_ptr0[0x035] = 0.25*(pred1_ptr0[0x035] + 3* pred2_ptr1[0x035]);
				pred1_ptr0[0x036] = 0.25*(pred1_ptr0[0x036] + 3* pred2_ptr1[0x036]);
				pred1_ptr0[0x037] = 0.25*(pred1_ptr0[0x037] + 3* pred2_ptr1[0x037]);
				pred1_ptr0[0x038] = 0.25*(pred1_ptr0[0x038] + 3* pred2_ptr1[0x038]);
				pred1_ptr0[0x039] = 0.25*(pred1_ptr0[0x039] + 3* pred2_ptr1[0x039]);
				pred1_ptr0[0x03a] = 0.25*(pred1_ptr0[0x03a] + 3* pred2_ptr1[0x03a]);
				pred1_ptr0[0x03b] = 0.25*(pred1_ptr0[0x03b] + 3* pred2_ptr1[0x03b]);
				pred1_ptr0[0x03c] = 0.25*(pred1_ptr0[0x03c] + 3* pred2_ptr1[0x03c]);
				pred1_ptr0[0x03d] = 0.25*(pred1_ptr0[0x03d] + 3* pred2_ptr1[0x03d]);
				pred1_ptr0[0x03e] = 0.25*(pred1_ptr0[0x03e] + 3* pred2_ptr1[0x03e]);
				pred1_ptr0[0x03f] = 0.25*(pred1_ptr0[0x03f] + 3* pred2_ptr1[0x03f]);
				pred1_ptr0[0x040] = 0.25*(pred1_ptr0[0x040] + 3* pred2_ptr1[0x040]);
				pred1_ptr0[0x041] = 0.25*(pred1_ptr0[0x041] + 3* pred2_ptr1[0x041]);
				pred1_ptr0[0x042] = 0.25*(pred1_ptr0[0x042] + 3* pred2_ptr1[0x042]);
				pred1_ptr0[0x043] = 0.25*(pred1_ptr0[0x043] + 3* pred2_ptr1[0x043]);
				pred1_ptr0[0x044] = 0.25*(pred1_ptr0[0x044] + 3* pred2_ptr1[0x044]);
				pred1_ptr0[0x045] = 0.25*(pred1_ptr0[0x045] + 3* pred2_ptr1[0x045]);
				pred1_ptr0[0x046] = 0.25*(pred1_ptr0[0x046] + 3* pred2_ptr1[0x046]);
				pred1_ptr0[0x047] = 0.25*(pred1_ptr0[0x047] + 3* pred2_ptr1[0x047]);
				pred1_ptr0[0x048] = 0.25*(pred1_ptr0[0x048] + 3* pred2_ptr1[0x048]);
				pred1_ptr0[0x049] = 0.25*(pred1_ptr0[0x049] + 3* pred2_ptr1[0x049]);
				pred1_ptr0[0x04a] = 0.25*(pred1_ptr0[0x04a] + 3* pred2_ptr1[0x04a]);
				pred1_ptr0[0x04b] = 0.25*(pred1_ptr0[0x04b] + 3* pred2_ptr1[0x04b]);
				pred1_ptr0[0x04c] = 0.25*(pred1_ptr0[0x04c] + 3* pred2_ptr1[0x04c]);
				pred1_ptr0[0x04d] = 0.25*(pred1_ptr0[0x04d] + 3* pred2_ptr1[0x04d]);
				pred1_ptr0[0x04e] = 0.25*(pred1_ptr0[0x04e] + 3* pred2_ptr1[0x04e]);
				pred1_ptr0[0x04f] = 0.25*(pred1_ptr0[0x04f] + 3* pred2_ptr1[0x04f]);
				pred1_ptr0[0x050] = 0.25*(pred1_ptr0[0x050] + 3* pred2_ptr1[0x050]);
				pred1_ptr0[0x051] = 0.25*(pred1_ptr0[0x051] + 3* pred2_ptr1[0x051]);
				pred1_ptr0[0x052] = 0.25*(pred1_ptr0[0x052] + 3* pred2_ptr1[0x052]);
				pred1_ptr0[0x053] = 0.25*(pred1_ptr0[0x053] + 3* pred2_ptr1[0x053]);
				pred1_ptr0[0x054] = 0.25*(pred1_ptr0[0x054] + 3* pred2_ptr1[0x054]);
				pred1_ptr0[0x055] = 0.25*(pred1_ptr0[0x055] + 3* pred2_ptr1[0x055]);
				pred1_ptr0[0x056] = 0.25*(pred1_ptr0[0x056] + 3* pred2_ptr1[0x056]);
				pred1_ptr0[0x057] = 0.25*(pred1_ptr0[0x057] + 3* pred2_ptr1[0x057]);
				pred1_ptr0[0x058] = 0.25*(pred1_ptr0[0x058] + 3* pred2_ptr1[0x058]);
				pred1_ptr0[0x059] = 0.25*(pred1_ptr0[0x059] + 3* pred2_ptr1[0x059]);
				pred1_ptr0[0x05a] = 0.25*(pred1_ptr0[0x05a] + 3* pred2_ptr1[0x05a]);
				pred1_ptr0[0x05b] = 0.25*(pred1_ptr0[0x05b] + 3* pred2_ptr1[0x05b]);
				pred1_ptr0[0x05c] = 0.25*(pred1_ptr0[0x05c] + 3* pred2_ptr1[0x05c]);
				pred1_ptr0[0x05d] = 0.25*(pred1_ptr0[0x05d] + 3* pred2_ptr1[0x05d]);
				pred1_ptr0[0x05e] = 0.25*(pred1_ptr0[0x05e] + 3* pred2_ptr1[0x05e]);
				pred1_ptr0[0x05f] = 0.25*(pred1_ptr0[0x05f] + 3* pred2_ptr1[0x05f]);
				pred1_ptr0[0x060] = 0.25*(pred1_ptr0[0x060] + 3* pred2_ptr1[0x060]);
				pred1_ptr0[0x061] = 0.25*(pred1_ptr0[0x061] + 3* pred2_ptr1[0x061]);
				pred1_ptr0[0x062] = 0.25*(pred1_ptr0[0x062] + 3* pred2_ptr1[0x062]);
				pred1_ptr0[0x063] = 0.25*(pred1_ptr0[0x063] + 3* pred2_ptr1[0x063]);
				pred1_ptr0[0x064] = 0.25*(pred1_ptr0[0x064] + 3* pred2_ptr1[0x064]);
				pred1_ptr0[0x065] = 0.25*(pred1_ptr0[0x065] + 3* pred2_ptr1[0x065]);
				pred1_ptr0[0x066] = 0.25*(pred1_ptr0[0x066] + 3* pred2_ptr1[0x066]);
				pred1_ptr0[0x067] = 0.25*(pred1_ptr0[0x067] + 3* pred2_ptr1[0x067]);
				pred1_ptr0[0x068] = 0.25*(pred1_ptr0[0x068] + 3* pred2_ptr1[0x068]);
				pred1_ptr0[0x069] = 0.25*(pred1_ptr0[0x069] + 3* pred2_ptr1[0x069]);
				pred1_ptr0[0x06a] = 0.25*(pred1_ptr0[0x06a] + 3* pred2_ptr1[0x06a]);
				pred1_ptr0[0x06b] = 0.25*(pred1_ptr0[0x06b] + 3* pred2_ptr1[0x06b]);
				pred1_ptr0[0x06c] = 0.25*(pred1_ptr0[0x06c] + 3* pred2_ptr1[0x06c]);
				pred1_ptr0[0x06d] = 0.25*(pred1_ptr0[0x06d] + 3* pred2_ptr1[0x06d]);
				pred1_ptr0[0x06e] = 0.25*(pred1_ptr0[0x06e] + 3* pred2_ptr1[0x06e]);
				pred1_ptr0[0x06f] = 0.25*(pred1_ptr0[0x06f] + 3* pred2_ptr1[0x06f]);
				pred1_ptr0[0x070] = 0.25*(pred1_ptr0[0x070] + 3* pred2_ptr1[0x070]);
				pred1_ptr0[0x071] = 0.25*(pred1_ptr0[0x071] + 3* pred2_ptr1[0x071]);
				pred1_ptr0[0x072] = 0.25*(pred1_ptr0[0x072] + 3* pred2_ptr1[0x072]);
				pred1_ptr0[0x073] = 0.25*(pred1_ptr0[0x073] + 3* pred2_ptr1[0x073]);
				pred1_ptr0[0x074] = 0.25*(pred1_ptr0[0x074] + 3* pred2_ptr1[0x074]);
				pred1_ptr0[0x075] = 0.25*(pred1_ptr0[0x075] + 3* pred2_ptr1[0x075]);
				pred1_ptr0[0x076] = 0.25*(pred1_ptr0[0x076] + 3* pred2_ptr1[0x076]);
				pred1_ptr0[0x077] = 0.25*(pred1_ptr0[0x077] + 3* pred2_ptr1[0x077]);
				pred1_ptr0[0x078] = 0.25*(pred1_ptr0[0x078] + 3* pred2_ptr1[0x078]);
				pred1_ptr0[0x079] = 0.25*(pred1_ptr0[0x079] + 3* pred2_ptr1[0x079]);
				pred1_ptr0[0x07a] = 0.25*(pred1_ptr0[0x07a] + 3* pred2_ptr1[0x07a]);
				pred1_ptr0[0x07b] = 0.25*(pred1_ptr0[0x07b] + 3* pred2_ptr1[0x07b]);
				pred1_ptr0[0x07c] = 0.25*(pred1_ptr0[0x07c] + 3* pred2_ptr1[0x07c]);
				pred1_ptr0[0x07d] = 0.25*(pred1_ptr0[0x07d] + 3* pred2_ptr1[0x07d]);
				pred1_ptr0[0x07e] = 0.25*(pred1_ptr0[0x07e] + 3* pred2_ptr1[0x07e]);
				pred1_ptr0[0x07f] = 0.25*(pred1_ptr0[0x07f] + 3* pred2_ptr1[0x07f]);
				pred1_ptr0[0x080] = 0.25*(pred1_ptr0[0x080] + 3* pred2_ptr1[0x080]);
				pred1_ptr0[0x081] = 0.25*(pred1_ptr0[0x081] + 3* pred2_ptr1[0x081]);
				pred1_ptr0[0x082] = 0.25*(pred1_ptr0[0x082] + 3* pred2_ptr1[0x082]);
				pred1_ptr0[0x083] = 0.25*(pred1_ptr0[0x083] + 3* pred2_ptr1[0x083]);
				pred1_ptr0[0x084] = 0.25*(pred1_ptr0[0x084] + 3* pred2_ptr1[0x084]);
				pred1_ptr0[0x085] = 0.25*(pred1_ptr0[0x085] + 3* pred2_ptr1[0x085]);
				pred1_ptr0[0x086] = 0.25*(pred1_ptr0[0x086] + 3* pred2_ptr1[0x086]);
				pred1_ptr0[0x087] = 0.25*(pred1_ptr0[0x087] + 3* pred2_ptr1[0x087]);
				pred1_ptr0[0x088] = 0.25*(pred1_ptr0[0x088] + 3* pred2_ptr1[0x088]);
				pred1_ptr0[0x089] = 0.25*(pred1_ptr0[0x089] + 3* pred2_ptr1[0x089]);
				pred1_ptr0[0x08a] = 0.25*(pred1_ptr0[0x08a] + 3* pred2_ptr1[0x08a]);
				pred1_ptr0[0x08b] = 0.25*(pred1_ptr0[0x08b] + 3* pred2_ptr1[0x08b]);
				pred1_ptr0[0x08c] = 0.25*(pred1_ptr0[0x08c] + 3* pred2_ptr1[0x08c]);
				pred1_ptr0[0x08d] = 0.25*(pred1_ptr0[0x08d] + 3* pred2_ptr1[0x08d]);
				pred1_ptr0[0x08e] = 0.25*(pred1_ptr0[0x08e] + 3* pred2_ptr1[0x08e]);
				pred1_ptr0[0x08f] = 0.25*(pred1_ptr0[0x08f] + 3* pred2_ptr1[0x08f]);
				pred1_ptr0[0x090] = 0.25*(pred1_ptr0[0x090] + 3* pred2_ptr1[0x090]);
				pred1_ptr0[0x091] = 0.25*(pred1_ptr0[0x091] + 3* pred2_ptr1[0x091]);
				pred1_ptr0[0x092] = 0.25*(pred1_ptr0[0x092] + 3* pred2_ptr1[0x092]);
				pred1_ptr0[0x093] = 0.25*(pred1_ptr0[0x093] + 3* pred2_ptr1[0x093]);
				pred1_ptr0[0x094] = 0.25*(pred1_ptr0[0x094] + 3* pred2_ptr1[0x094]);
				pred1_ptr0[0x095] = 0.25*(pred1_ptr0[0x095] + 3* pred2_ptr1[0x095]);
				pred1_ptr0[0x096] = 0.25*(pred1_ptr0[0x096] + 3* pred2_ptr1[0x096]);
				pred1_ptr0[0x097] = 0.25*(pred1_ptr0[0x097] + 3* pred2_ptr1[0x097]);
				pred1_ptr0[0x098] = 0.25*(pred1_ptr0[0x098] + 3* pred2_ptr1[0x098]);
				pred1_ptr0[0x099] = 0.25*(pred1_ptr0[0x099] + 3* pred2_ptr1[0x099]);
				pred1_ptr0[0x09a] = 0.25*(pred1_ptr0[0x09a] + 3* pred2_ptr1[0x09a]);
				pred1_ptr0[0x09b] = 0.25*(pred1_ptr0[0x09b] + 3* pred2_ptr1[0x09b]);
				pred1_ptr0[0x09c] = 0.25*(pred1_ptr0[0x09c] + 3* pred2_ptr1[0x09c]);
				pred1_ptr0[0x09d] = 0.25*(pred1_ptr0[0x09d] + 3* pred2_ptr1[0x09d]);
				pred1_ptr0[0x09e] = 0.25*(pred1_ptr0[0x09e] + 3* pred2_ptr1[0x09e]);
				pred1_ptr0[0x09f] = 0.25*(pred1_ptr0[0x09f] + 3* pred2_ptr1[0x09f]);
				pred1_ptr0[0x0a0] = 0.25*(pred1_ptr0[0x0a0] + 3* pred2_ptr1[0x0a0]);
				pred1_ptr0[0x0a1] = 0.25*(pred1_ptr0[0x0a1] + 3* pred2_ptr1[0x0a1]);
				pred1_ptr0[0x0a2] = 0.25*(pred1_ptr0[0x0a2] + 3* pred2_ptr1[0x0a2]);
				pred1_ptr0[0x0a3] = 0.25*(pred1_ptr0[0x0a3] + 3* pred2_ptr1[0x0a3]);
				pred1_ptr0[0x0a4] = 0.25*(pred1_ptr0[0x0a4] + 3* pred2_ptr1[0x0a4]);
				pred1_ptr0[0x0a5] = 0.25*(pred1_ptr0[0x0a5] + 3* pred2_ptr1[0x0a5]);
				pred1_ptr0[0x0a6] = 0.25*(pred1_ptr0[0x0a6] + 3* pred2_ptr1[0x0a6]);
				pred1_ptr0[0x0a7] = 0.25*(pred1_ptr0[0x0a7] + 3* pred2_ptr1[0x0a7]);
				pred1_ptr0[0x0a8] = 0.25*(pred1_ptr0[0x0a8] + 3* pred2_ptr1[0x0a8]);
				pred1_ptr0[0x0a9] = 0.25*(pred1_ptr0[0x0a9] + 3* pred2_ptr1[0x0a9]);
				pred1_ptr0[0x0aa] = 0.25*(pred1_ptr0[0x0aa] + 3* pred2_ptr1[0x0aa]);
				pred1_ptr0[0x0ab] = 0.25*(pred1_ptr0[0x0ab] + 3* pred2_ptr1[0x0ab]);
				pred1_ptr0[0x0ac] = 0.25*(pred1_ptr0[0x0ac] + 3* pred2_ptr1[0x0ac]);
				pred1_ptr0[0x0ad] = 0.25*(pred1_ptr0[0x0ad] + 3* pred2_ptr1[0x0ad]);
				pred1_ptr0[0x0ae] = 0.25*(pred1_ptr0[0x0ae] + 3* pred2_ptr1[0x0ae]);
				pred1_ptr0[0x0af] = 0.25*(pred1_ptr0[0x0af] + 3* pred2_ptr1[0x0af]);
				pred1_ptr0[0x0b0] = 0.25*(pred1_ptr0[0x0b0] + 3* pred2_ptr1[0x0b0]);
				pred1_ptr0[0x0b1] = 0.25*(pred1_ptr0[0x0b1] + 3* pred2_ptr1[0x0b1]);
				pred1_ptr0[0x0b2] = 0.25*(pred1_ptr0[0x0b2] + 3* pred2_ptr1[0x0b2]);
				pred1_ptr0[0x0b3] = 0.25*(pred1_ptr0[0x0b3] + 3* pred2_ptr1[0x0b3]);
				pred1_ptr0[0x0b4] = 0.25*(pred1_ptr0[0x0b4] + 3* pred2_ptr1[0x0b4]);
				pred1_ptr0[0x0b5] = 0.25*(pred1_ptr0[0x0b5] + 3* pred2_ptr1[0x0b5]);
				pred1_ptr0[0x0b6] = 0.25*(pred1_ptr0[0x0b6] + 3* pred2_ptr1[0x0b6]);
				pred1_ptr0[0x0b7] = 0.25*(pred1_ptr0[0x0b7] + 3* pred2_ptr1[0x0b7]);
				pred1_ptr0[0x0b8] = 0.25*(pred1_ptr0[0x0b8] + 3* pred2_ptr1[0x0b8]);
				pred1_ptr0[0x0b9] = 0.25*(pred1_ptr0[0x0b9] + 3* pred2_ptr1[0x0b9]);
				pred1_ptr0[0x0ba] = 0.25*(pred1_ptr0[0x0ba] + 3* pred2_ptr1[0x0ba]);
				pred1_ptr0[0x0bb] = 0.25*(pred1_ptr0[0x0bb] + 3* pred2_ptr1[0x0bb]);
				pred1_ptr0[0x0bc] = 0.25*(pred1_ptr0[0x0bc] + 3* pred2_ptr1[0x0bc]);
				pred1_ptr0[0x0bd] = 0.25*(pred1_ptr0[0x0bd] + 3* pred2_ptr1[0x0bd]);
				pred1_ptr0[0x0be] = 0.25*(pred1_ptr0[0x0be] + 3* pred2_ptr1[0x0be]);
				pred1_ptr0[0x0bf] = 0.25*(pred1_ptr0[0x0bf] + 3* pred2_ptr1[0x0bf]);
				pred1_ptr0[0x0c0] = 0.25*(pred1_ptr0[0x0c0] + 3* pred2_ptr1[0x0c0]);
				pred1_ptr0[0x0c1] = 0.25*(pred1_ptr0[0x0c1] + 3* pred2_ptr1[0x0c1]);
				pred1_ptr0[0x0c2] = 0.25*(pred1_ptr0[0x0c2] + 3* pred2_ptr1[0x0c2]);
				pred1_ptr0[0x0c3] = 0.25*(pred1_ptr0[0x0c3] + 3* pred2_ptr1[0x0c3]);
				pred1_ptr0[0x0c4] = 0.25*(pred1_ptr0[0x0c4] + 3* pred2_ptr1[0x0c4]);
				pred1_ptr0[0x0c5] = 0.25*(pred1_ptr0[0x0c5] + 3* pred2_ptr1[0x0c5]);
				pred1_ptr0[0x0c6] = 0.25*(pred1_ptr0[0x0c6] + 3* pred2_ptr1[0x0c6]);
				pred1_ptr0[0x0c7] = 0.25*(pred1_ptr0[0x0c7] + 3* pred2_ptr1[0x0c7]);
				pred1_ptr0[0x0c8] = 0.25*(pred1_ptr0[0x0c8] + 3* pred2_ptr1[0x0c8]);
				pred1_ptr0[0x0c9] = 0.25*(pred1_ptr0[0x0c9] + 3* pred2_ptr1[0x0c9]);
				pred1_ptr0[0x0ca] = 0.25*(pred1_ptr0[0x0ca] + 3* pred2_ptr1[0x0ca]);
				pred1_ptr0[0x0cb] = 0.25*(pred1_ptr0[0x0cb] + 3* pred2_ptr1[0x0cb]);
				pred1_ptr0[0x0cc] = 0.25*(pred1_ptr0[0x0cc] + 3* pred2_ptr1[0x0cc]);
				pred1_ptr0[0x0cd] = 0.25*(pred1_ptr0[0x0cd] + 3* pred2_ptr1[0x0cd]);
				pred1_ptr0[0x0ce] = 0.25*(pred1_ptr0[0x0ce] + 3* pred2_ptr1[0x0ce]);
				pred1_ptr0[0x0cf] = 0.25*(pred1_ptr0[0x0cf] + 3* pred2_ptr1[0x0cf]);
				pred1_ptr0[0x0d0] = 0.25*(pred1_ptr0[0x0d0] + 3* pred2_ptr1[0x0d0]);
				pred1_ptr0[0x0d1] = 0.25*(pred1_ptr0[0x0d1] + 3* pred2_ptr1[0x0d1]);
				pred1_ptr0[0x0d2] = 0.25*(pred1_ptr0[0x0d2] + 3* pred2_ptr1[0x0d2]);
				pred1_ptr0[0x0d3] = 0.25*(pred1_ptr0[0x0d3] + 3* pred2_ptr1[0x0d3]);
				pred1_ptr0[0x0d4] = 0.25*(pred1_ptr0[0x0d4] + 3* pred2_ptr1[0x0d4]);
				pred1_ptr0[0x0d5] = 0.25*(pred1_ptr0[0x0d5] + 3* pred2_ptr1[0x0d5]);
				pred1_ptr0[0x0d6] = 0.25*(pred1_ptr0[0x0d6] + 3* pred2_ptr1[0x0d6]);
				pred1_ptr0[0x0d7] = 0.25*(pred1_ptr0[0x0d7] + 3* pred2_ptr1[0x0d7]);
				pred1_ptr0[0x0d8] = 0.25*(pred1_ptr0[0x0d8] + 3* pred2_ptr1[0x0d8]);
				pred1_ptr0[0x0d9] = 0.25*(pred1_ptr0[0x0d9] + 3* pred2_ptr1[0x0d9]);
				pred1_ptr0[0x0da] = 0.25*(pred1_ptr0[0x0da] + 3* pred2_ptr1[0x0da]);
				pred1_ptr0[0x0db] = 0.25*(pred1_ptr0[0x0db] + 3* pred2_ptr1[0x0db]);
				pred1_ptr0[0x0dc] = 0.25*(pred1_ptr0[0x0dc] + 3* pred2_ptr1[0x0dc]);
				pred1_ptr0[0x0dd] = 0.25*(pred1_ptr0[0x0dd] + 3* pred2_ptr1[0x0dd]);
				pred1_ptr0[0x0de] = 0.25*(pred1_ptr0[0x0de] + 3* pred2_ptr1[0x0de]);
				pred1_ptr0[0x0df] = 0.25*(pred1_ptr0[0x0df] + 3* pred2_ptr1[0x0df]);
				pred1_ptr0[0x0e0] = 0.25*(pred1_ptr0[0x0e0] + 3* pred2_ptr1[0x0e0]);
				pred1_ptr0[0x0e1] = 0.25*(pred1_ptr0[0x0e1] + 3* pred2_ptr1[0x0e1]);
				pred1_ptr0[0x0e2] = 0.25*(pred1_ptr0[0x0e2] + 3* pred2_ptr1[0x0e2]);
				pred1_ptr0[0x0e3] = 0.25*(pred1_ptr0[0x0e3] + 3* pred2_ptr1[0x0e3]);
				pred1_ptr0[0x0e4] = 0.25*(pred1_ptr0[0x0e4] + 3* pred2_ptr1[0x0e4]);
				pred1_ptr0[0x0e5] = 0.25*(pred1_ptr0[0x0e5] + 3* pred2_ptr1[0x0e5]);
				pred1_ptr0[0x0e6] = 0.25*(pred1_ptr0[0x0e6] + 3* pred2_ptr1[0x0e6]);
				pred1_ptr0[0x0e7] = 0.25*(pred1_ptr0[0x0e7] + 3* pred2_ptr1[0x0e7]);
				pred1_ptr0[0x0e8] = 0.25*(pred1_ptr0[0x0e8] + 3* pred2_ptr1[0x0e8]);
				pred1_ptr0[0x0e9] = 0.25*(pred1_ptr0[0x0e9] + 3* pred2_ptr1[0x0e9]);
				pred1_ptr0[0x0ea] = 0.25*(pred1_ptr0[0x0ea] + 3* pred2_ptr1[0x0ea]);
				pred1_ptr0[0x0eb] = 0.25*(pred1_ptr0[0x0eb] + 3* pred2_ptr1[0x0eb]);
				pred1_ptr0[0x0ec] = 0.25*(pred1_ptr0[0x0ec] + 3* pred2_ptr1[0x0ec]);
				pred1_ptr0[0x0ed] = 0.25*(pred1_ptr0[0x0ed] + 3* pred2_ptr1[0x0ed]);
				pred1_ptr0[0x0ee] = 0.25*(pred1_ptr0[0x0ee] + 3* pred2_ptr1[0x0ee]);
				pred1_ptr0[0x0ef] = 0.25*(pred1_ptr0[0x0ef] + 3* pred2_ptr1[0x0ef]);
				pred1_ptr0[0x0f0] = 0.25*(pred1_ptr0[0x0f0] + 3* pred2_ptr1[0x0f0]);
				pred1_ptr0[0x0f1] = 0.25*(pred1_ptr0[0x0f1] + 3* pred2_ptr1[0x0f1]);
				pred1_ptr0[0x0f2] = 0.25*(pred1_ptr0[0x0f2] + 3* pred2_ptr1[0x0f2]);
				pred1_ptr0[0x0f3] = 0.25*(pred1_ptr0[0x0f3] + 3* pred2_ptr1[0x0f3]);
				pred1_ptr0[0x0f4] = 0.25*(pred1_ptr0[0x0f4] + 3* pred2_ptr1[0x0f4]);
				pred1_ptr0[0x0f5] = 0.25*(pred1_ptr0[0x0f5] + 3* pred2_ptr1[0x0f5]);
				pred1_ptr0[0x0f6] = 0.25*(pred1_ptr0[0x0f6] + 3* pred2_ptr1[0x0f6]);
				pred1_ptr0[0x0f7] = 0.25*(pred1_ptr0[0x0f7] + 3* pred2_ptr1[0x0f7]);
				pred1_ptr0[0x0f8] = 0.25*(pred1_ptr0[0x0f8] + 3* pred2_ptr1[0x0f8]);
				pred1_ptr0[0x0f9] = 0.25*(pred1_ptr0[0x0f9] + 3* pred2_ptr1[0x0f9]);
				pred1_ptr0[0x0fa] = 0.25*(pred1_ptr0[0x0fa] + 3* pred2_ptr1[0x0fa]);
				pred1_ptr0[0x0fb] = 0.25*(pred1_ptr0[0x0fb] + 3* pred2_ptr1[0x0fb]);
				pred1_ptr0[0x0fc] = 0.25*(pred1_ptr0[0x0fc] + 3* pred2_ptr1[0x0fc]);
				pred1_ptr0[0x0fd] = 0.25*(pred1_ptr0[0x0fd] + 3* pred2_ptr1[0x0fd]);
				pred1_ptr0[0x0fe] = 0.25*(pred1_ptr0[0x0fe] + 3* pred2_ptr1[0x0fe]);
				pred1_ptr0[0x0ff] = 0.25*(pred1_ptr0[0x0ff] + 3* pred2_ptr1[0x0ff]);
			}
		
			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,8);
			luma_index0 = ((luma_index0 + 4)&0x0f);
			luma_index1 = ((luma_index1 + 4)&0x0f);
		}
	}
}
void b_frame_x_x_x_0_0x00600_x_x_x_x_x_x_4_8(_fp16 *out, _fp16 *in1, _fp16 *in2, INT8 *mvx1, INT8 *mvy1, INT8 *mvx2, INT8 *mvy2, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index0 = 4 ;
	UINT8 luma_index1 = 8 ;
	_fp16 pred1[0x100];
	_fp16 pred2[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x610 ; y< 0xa10 ; y +=0x10){// 1080P, 4 slices
		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
//			p_frame_mb(pred1, in1, x, y, luma_index0, mvx1, mvy1, luma_type);
	get_luma(luma_type[luma_index0], pred1, in1, x + mvx1[0] + 8, y + mvy1[0] + 8);
	get_luma(luma_type[luma_index0 + 1], pred1, in1, x + mvx1[1] + 16, y + mvy1[1] + 16);
	get_luma(luma_type[luma_index0 + 2], pred1, in1, x + mvx1[2] + 8, y + mvy1[2] + 24);
	get_luma(luma_type[luma_index0 + 3], pred1, in1, x + mvx1[3] + 16, y + mvy1[3] + 32);
//			p_frame_mb(pred2, in2, x, y, luma_index1, mvx2, mvy2, luma_type);
	get_luma(luma_type[luma_index1], pred2, in2, x + mvx2[0] + 8, y + mvy2[0] + 8);
	get_luma(luma_type[luma_index1 + 1], pred2, in2, x + mvx2[1] + 16, y + mvy2[1] + 16);
	get_luma(luma_type[luma_index1 + 2], pred2, in2, x + mvx2[2] + 8, y + mvy2[2] + 24);
	get_luma(luma_type[luma_index1 + 3], pred2, in2, x + mvx2[3] + 16, y + mvy2[3] + 32);
//			for (UINT l= 0 ; l< 0x100 ;l++){
				{	// 4 
				_fp16 *pred1_ptr0 = &pred1[0];
				_fp16 *pred2_ptr1 = &pred2[0];
				pred1_ptr0[0x000] = 0.25*(pred1_ptr0[0x000] + 3* pred2_ptr1[0x000]);
				pred1_ptr0[0x001] = 0.25*(pred1_ptr0[0x001] + 3* pred2_ptr1[0x001]);
				pred1_ptr0[0x002] = 0.25*(pred1_ptr0[0x002] + 3* pred2_ptr1[0x002]);
				pred1_ptr0[0x003] = 0.25*(pred1_ptr0[0x003] + 3* pred2_ptr1[0x003]);
				pred1_ptr0[0x004] = 0.25*(pred1_ptr0[0x004] + 3* pred2_ptr1[0x004]);
				pred1_ptr0[0x005] = 0.25*(pred1_ptr0[0x005] + 3* pred2_ptr1[0x005]);
				pred1_ptr0[0x006] = 0.25*(pred1_ptr0[0x006] + 3* pred2_ptr1[0x006]);
				pred1_ptr0[0x007] = 0.25*(pred1_ptr0[0x007] + 3* pred2_ptr1[0x007]);
				pred1_ptr0[0x008] = 0.25*(pred1_ptr0[0x008] + 3* pred2_ptr1[0x008]);
				pred1_ptr0[0x009] = 0.25*(pred1_ptr0[0x009] + 3* pred2_ptr1[0x009]);
				pred1_ptr0[0x00a] = 0.25*(pred1_ptr0[0x00a] + 3* pred2_ptr1[0x00a]);
				pred1_ptr0[0x00b] = 0.25*(pred1_ptr0[0x00b] + 3* pred2_ptr1[0x00b]);
				pred1_ptr0[0x00c] = 0.25*(pred1_ptr0[0x00c] + 3* pred2_ptr1[0x00c]);
				pred1_ptr0[0x00d] = 0.25*(pred1_ptr0[0x00d] + 3* pred2_ptr1[0x00d]);
				pred1_ptr0[0x00e] = 0.25*(pred1_ptr0[0x00e] + 3* pred2_ptr1[0x00e]);
				pred1_ptr0[0x00f] = 0.25*(pred1_ptr0[0x00f] + 3* pred2_ptr1[0x00f]);
				pred1_ptr0[0x010] = 0.25*(pred1_ptr0[0x010] + 3* pred2_ptr1[0x010]);
				pred1_ptr0[0x011] = 0.25*(pred1_ptr0[0x011] + 3* pred2_ptr1[0x011]);
				pred1_ptr0[0x012] = 0.25*(pred1_ptr0[0x012] + 3* pred2_ptr1[0x012]);
				pred1_ptr0[0x013] = 0.25*(pred1_ptr0[0x013] + 3* pred2_ptr1[0x013]);
				pred1_ptr0[0x014] = 0.25*(pred1_ptr0[0x014] + 3* pred2_ptr1[0x014]);
				pred1_ptr0[0x015] = 0.25*(pred1_ptr0[0x015] + 3* pred2_ptr1[0x015]);
				pred1_ptr0[0x016] = 0.25*(pred1_ptr0[0x016] + 3* pred2_ptr1[0x016]);
				pred1_ptr0[0x017] = 0.25*(pred1_ptr0[0x017] + 3* pred2_ptr1[0x017]);
				pred1_ptr0[0x018] = 0.25*(pred1_ptr0[0x018] + 3* pred2_ptr1[0x018]);
				pred1_ptr0[0x019] = 0.25*(pred1_ptr0[0x019] + 3* pred2_ptr1[0x019]);
				pred1_ptr0[0x01a] = 0.25*(pred1_ptr0[0x01a] + 3* pred2_ptr1[0x01a]);
				pred1_ptr0[0x01b] = 0.25*(pred1_ptr0[0x01b] + 3* pred2_ptr1[0x01b]);
				pred1_ptr0[0x01c] = 0.25*(pred1_ptr0[0x01c] + 3* pred2_ptr1[0x01c]);
				pred1_ptr0[0x01d] = 0.25*(pred1_ptr0[0x01d] + 3* pred2_ptr1[0x01d]);
				pred1_ptr0[0x01e] = 0.25*(pred1_ptr0[0x01e] + 3* pred2_ptr1[0x01e]);
				pred1_ptr0[0x01f] = 0.25*(pred1_ptr0[0x01f] + 3* pred2_ptr1[0x01f]);
				pred1_ptr0[0x020] = 0.25*(pred1_ptr0[0x020] + 3* pred2_ptr1[0x020]);
				pred1_ptr0[0x021] = 0.25*(pred1_ptr0[0x021] + 3* pred2_ptr1[0x021]);
				pred1_ptr0[0x022] = 0.25*(pred1_ptr0[0x022] + 3* pred2_ptr1[0x022]);
				pred1_ptr0[0x023] = 0.25*(pred1_ptr0[0x023] + 3* pred2_ptr1[0x023]);
				pred1_ptr0[0x024] = 0.25*(pred1_ptr0[0x024] + 3* pred2_ptr1[0x024]);
				pred1_ptr0[0x025] = 0.25*(pred1_ptr0[0x025] + 3* pred2_ptr1[0x025]);
				pred1_ptr0[0x026] = 0.25*(pred1_ptr0[0x026] + 3* pred2_ptr1[0x026]);
				pred1_ptr0[0x027] = 0.25*(pred1_ptr0[0x027] + 3* pred2_ptr1[0x027]);
				pred1_ptr0[0x028] = 0.25*(pred1_ptr0[0x028] + 3* pred2_ptr1[0x028]);
				pred1_ptr0[0x029] = 0.25*(pred1_ptr0[0x029] + 3* pred2_ptr1[0x029]);
				pred1_ptr0[0x02a] = 0.25*(pred1_ptr0[0x02a] + 3* pred2_ptr1[0x02a]);
				pred1_ptr0[0x02b] = 0.25*(pred1_ptr0[0x02b] + 3* pred2_ptr1[0x02b]);
				pred1_ptr0[0x02c] = 0.25*(pred1_ptr0[0x02c] + 3* pred2_ptr1[0x02c]);
				pred1_ptr0[0x02d] = 0.25*(pred1_ptr0[0x02d] + 3* pred2_ptr1[0x02d]);
				pred1_ptr0[0x02e] = 0.25*(pred1_ptr0[0x02e] + 3* pred2_ptr1[0x02e]);
				pred1_ptr0[0x02f] = 0.25*(pred1_ptr0[0x02f] + 3* pred2_ptr1[0x02f]);
				pred1_ptr0[0x030] = 0.25*(pred1_ptr0[0x030] + 3* pred2_ptr1[0x030]);
				pred1_ptr0[0x031] = 0.25*(pred1_ptr0[0x031] + 3* pred2_ptr1[0x031]);
				pred1_ptr0[0x032] = 0.25*(pred1_ptr0[0x032] + 3* pred2_ptr1[0x032]);
				pred1_ptr0[0x033] = 0.25*(pred1_ptr0[0x033] + 3* pred2_ptr1[0x033]);
				pred1_ptr0[0x034] = 0.25*(pred1_ptr0[0x034] + 3* pred2_ptr1[0x034]);
				pred1_ptr0[0x035] = 0.25*(pred1_ptr0[0x035] + 3* pred2_ptr1[0x035]);
				pred1_ptr0[0x036] = 0.25*(pred1_ptr0[0x036] + 3* pred2_ptr1[0x036]);
				pred1_ptr0[0x037] = 0.25*(pred1_ptr0[0x037] + 3* pred2_ptr1[0x037]);
				pred1_ptr0[0x038] = 0.25*(pred1_ptr0[0x038] + 3* pred2_ptr1[0x038]);
				pred1_ptr0[0x039] = 0.25*(pred1_ptr0[0x039] + 3* pred2_ptr1[0x039]);
				pred1_ptr0[0x03a] = 0.25*(pred1_ptr0[0x03a] + 3* pred2_ptr1[0x03a]);
				pred1_ptr0[0x03b] = 0.25*(pred1_ptr0[0x03b] + 3* pred2_ptr1[0x03b]);
				pred1_ptr0[0x03c] = 0.25*(pred1_ptr0[0x03c] + 3* pred2_ptr1[0x03c]);
				pred1_ptr0[0x03d] = 0.25*(pred1_ptr0[0x03d] + 3* pred2_ptr1[0x03d]);
				pred1_ptr0[0x03e] = 0.25*(pred1_ptr0[0x03e] + 3* pred2_ptr1[0x03e]);
				pred1_ptr0[0x03f] = 0.25*(pred1_ptr0[0x03f] + 3* pred2_ptr1[0x03f]);
				pred1_ptr0[0x040] = 0.25*(pred1_ptr0[0x040] + 3* pred2_ptr1[0x040]);
				pred1_ptr0[0x041] = 0.25*(pred1_ptr0[0x041] + 3* pred2_ptr1[0x041]);
				pred1_ptr0[0x042] = 0.25*(pred1_ptr0[0x042] + 3* pred2_ptr1[0x042]);
				pred1_ptr0[0x043] = 0.25*(pred1_ptr0[0x043] + 3* pred2_ptr1[0x043]);
				pred1_ptr0[0x044] = 0.25*(pred1_ptr0[0x044] + 3* pred2_ptr1[0x044]);
				pred1_ptr0[0x045] = 0.25*(pred1_ptr0[0x045] + 3* pred2_ptr1[0x045]);
				pred1_ptr0[0x046] = 0.25*(pred1_ptr0[0x046] + 3* pred2_ptr1[0x046]);
				pred1_ptr0[0x047] = 0.25*(pred1_ptr0[0x047] + 3* pred2_ptr1[0x047]);
				pred1_ptr0[0x048] = 0.25*(pred1_ptr0[0x048] + 3* pred2_ptr1[0x048]);
				pred1_ptr0[0x049] = 0.25*(pred1_ptr0[0x049] + 3* pred2_ptr1[0x049]);
				pred1_ptr0[0x04a] = 0.25*(pred1_ptr0[0x04a] + 3* pred2_ptr1[0x04a]);
				pred1_ptr0[0x04b] = 0.25*(pred1_ptr0[0x04b] + 3* pred2_ptr1[0x04b]);
				pred1_ptr0[0x04c] = 0.25*(pred1_ptr0[0x04c] + 3* pred2_ptr1[0x04c]);
				pred1_ptr0[0x04d] = 0.25*(pred1_ptr0[0x04d] + 3* pred2_ptr1[0x04d]);
				pred1_ptr0[0x04e] = 0.25*(pred1_ptr0[0x04e] + 3* pred2_ptr1[0x04e]);
				pred1_ptr0[0x04f] = 0.25*(pred1_ptr0[0x04f] + 3* pred2_ptr1[0x04f]);
				pred1_ptr0[0x050] = 0.25*(pred1_ptr0[0x050] + 3* pred2_ptr1[0x050]);
				pred1_ptr0[0x051] = 0.25*(pred1_ptr0[0x051] + 3* pred2_ptr1[0x051]);
				pred1_ptr0[0x052] = 0.25*(pred1_ptr0[0x052] + 3* pred2_ptr1[0x052]);
				pred1_ptr0[0x053] = 0.25*(pred1_ptr0[0x053] + 3* pred2_ptr1[0x053]);
				pred1_ptr0[0x054] = 0.25*(pred1_ptr0[0x054] + 3* pred2_ptr1[0x054]);
				pred1_ptr0[0x055] = 0.25*(pred1_ptr0[0x055] + 3* pred2_ptr1[0x055]);
				pred1_ptr0[0x056] = 0.25*(pred1_ptr0[0x056] + 3* pred2_ptr1[0x056]);
				pred1_ptr0[0x057] = 0.25*(pred1_ptr0[0x057] + 3* pred2_ptr1[0x057]);
				pred1_ptr0[0x058] = 0.25*(pred1_ptr0[0x058] + 3* pred2_ptr1[0x058]);
				pred1_ptr0[0x059] = 0.25*(pred1_ptr0[0x059] + 3* pred2_ptr1[0x059]);
				pred1_ptr0[0x05a] = 0.25*(pred1_ptr0[0x05a] + 3* pred2_ptr1[0x05a]);
				pred1_ptr0[0x05b] = 0.25*(pred1_ptr0[0x05b] + 3* pred2_ptr1[0x05b]);
				pred1_ptr0[0x05c] = 0.25*(pred1_ptr0[0x05c] + 3* pred2_ptr1[0x05c]);
				pred1_ptr0[0x05d] = 0.25*(pred1_ptr0[0x05d] + 3* pred2_ptr1[0x05d]);
				pred1_ptr0[0x05e] = 0.25*(pred1_ptr0[0x05e] + 3* pred2_ptr1[0x05e]);
				pred1_ptr0[0x05f] = 0.25*(pred1_ptr0[0x05f] + 3* pred2_ptr1[0x05f]);
				pred1_ptr0[0x060] = 0.25*(pred1_ptr0[0x060] + 3* pred2_ptr1[0x060]);
				pred1_ptr0[0x061] = 0.25*(pred1_ptr0[0x061] + 3* pred2_ptr1[0x061]);
				pred1_ptr0[0x062] = 0.25*(pred1_ptr0[0x062] + 3* pred2_ptr1[0x062]);
				pred1_ptr0[0x063] = 0.25*(pred1_ptr0[0x063] + 3* pred2_ptr1[0x063]);
				pred1_ptr0[0x064] = 0.25*(pred1_ptr0[0x064] + 3* pred2_ptr1[0x064]);
				pred1_ptr0[0x065] = 0.25*(pred1_ptr0[0x065] + 3* pred2_ptr1[0x065]);
				pred1_ptr0[0x066] = 0.25*(pred1_ptr0[0x066] + 3* pred2_ptr1[0x066]);
				pred1_ptr0[0x067] = 0.25*(pred1_ptr0[0x067] + 3* pred2_ptr1[0x067]);
				pred1_ptr0[0x068] = 0.25*(pred1_ptr0[0x068] + 3* pred2_ptr1[0x068]);
				pred1_ptr0[0x069] = 0.25*(pred1_ptr0[0x069] + 3* pred2_ptr1[0x069]);
				pred1_ptr0[0x06a] = 0.25*(pred1_ptr0[0x06a] + 3* pred2_ptr1[0x06a]);
				pred1_ptr0[0x06b] = 0.25*(pred1_ptr0[0x06b] + 3* pred2_ptr1[0x06b]);
				pred1_ptr0[0x06c] = 0.25*(pred1_ptr0[0x06c] + 3* pred2_ptr1[0x06c]);
				pred1_ptr0[0x06d] = 0.25*(pred1_ptr0[0x06d] + 3* pred2_ptr1[0x06d]);
				pred1_ptr0[0x06e] = 0.25*(pred1_ptr0[0x06e] + 3* pred2_ptr1[0x06e]);
				pred1_ptr0[0x06f] = 0.25*(pred1_ptr0[0x06f] + 3* pred2_ptr1[0x06f]);
				pred1_ptr0[0x070] = 0.25*(pred1_ptr0[0x070] + 3* pred2_ptr1[0x070]);
				pred1_ptr0[0x071] = 0.25*(pred1_ptr0[0x071] + 3* pred2_ptr1[0x071]);
				pred1_ptr0[0x072] = 0.25*(pred1_ptr0[0x072] + 3* pred2_ptr1[0x072]);
				pred1_ptr0[0x073] = 0.25*(pred1_ptr0[0x073] + 3* pred2_ptr1[0x073]);
				pred1_ptr0[0x074] = 0.25*(pred1_ptr0[0x074] + 3* pred2_ptr1[0x074]);
				pred1_ptr0[0x075] = 0.25*(pred1_ptr0[0x075] + 3* pred2_ptr1[0x075]);
				pred1_ptr0[0x076] = 0.25*(pred1_ptr0[0x076] + 3* pred2_ptr1[0x076]);
				pred1_ptr0[0x077] = 0.25*(pred1_ptr0[0x077] + 3* pred2_ptr1[0x077]);
				pred1_ptr0[0x078] = 0.25*(pred1_ptr0[0x078] + 3* pred2_ptr1[0x078]);
				pred1_ptr0[0x079] = 0.25*(pred1_ptr0[0x079] + 3* pred2_ptr1[0x079]);
				pred1_ptr0[0x07a] = 0.25*(pred1_ptr0[0x07a] + 3* pred2_ptr1[0x07a]);
				pred1_ptr0[0x07b] = 0.25*(pred1_ptr0[0x07b] + 3* pred2_ptr1[0x07b]);
				pred1_ptr0[0x07c] = 0.25*(pred1_ptr0[0x07c] + 3* pred2_ptr1[0x07c]);
				pred1_ptr0[0x07d] = 0.25*(pred1_ptr0[0x07d] + 3* pred2_ptr1[0x07d]);
				pred1_ptr0[0x07e] = 0.25*(pred1_ptr0[0x07e] + 3* pred2_ptr1[0x07e]);
				pred1_ptr0[0x07f] = 0.25*(pred1_ptr0[0x07f] + 3* pred2_ptr1[0x07f]);
				pred1_ptr0[0x080] = 0.25*(pred1_ptr0[0x080] + 3* pred2_ptr1[0x080]);
				pred1_ptr0[0x081] = 0.25*(pred1_ptr0[0x081] + 3* pred2_ptr1[0x081]);
				pred1_ptr0[0x082] = 0.25*(pred1_ptr0[0x082] + 3* pred2_ptr1[0x082]);
				pred1_ptr0[0x083] = 0.25*(pred1_ptr0[0x083] + 3* pred2_ptr1[0x083]);
				pred1_ptr0[0x084] = 0.25*(pred1_ptr0[0x084] + 3* pred2_ptr1[0x084]);
				pred1_ptr0[0x085] = 0.25*(pred1_ptr0[0x085] + 3* pred2_ptr1[0x085]);
				pred1_ptr0[0x086] = 0.25*(pred1_ptr0[0x086] + 3* pred2_ptr1[0x086]);
				pred1_ptr0[0x087] = 0.25*(pred1_ptr0[0x087] + 3* pred2_ptr1[0x087]);
				pred1_ptr0[0x088] = 0.25*(pred1_ptr0[0x088] + 3* pred2_ptr1[0x088]);
				pred1_ptr0[0x089] = 0.25*(pred1_ptr0[0x089] + 3* pred2_ptr1[0x089]);
				pred1_ptr0[0x08a] = 0.25*(pred1_ptr0[0x08a] + 3* pred2_ptr1[0x08a]);
				pred1_ptr0[0x08b] = 0.25*(pred1_ptr0[0x08b] + 3* pred2_ptr1[0x08b]);
				pred1_ptr0[0x08c] = 0.25*(pred1_ptr0[0x08c] + 3* pred2_ptr1[0x08c]);
				pred1_ptr0[0x08d] = 0.25*(pred1_ptr0[0x08d] + 3* pred2_ptr1[0x08d]);
				pred1_ptr0[0x08e] = 0.25*(pred1_ptr0[0x08e] + 3* pred2_ptr1[0x08e]);
				pred1_ptr0[0x08f] = 0.25*(pred1_ptr0[0x08f] + 3* pred2_ptr1[0x08f]);
				pred1_ptr0[0x090] = 0.25*(pred1_ptr0[0x090] + 3* pred2_ptr1[0x090]);
				pred1_ptr0[0x091] = 0.25*(pred1_ptr0[0x091] + 3* pred2_ptr1[0x091]);
				pred1_ptr0[0x092] = 0.25*(pred1_ptr0[0x092] + 3* pred2_ptr1[0x092]);
				pred1_ptr0[0x093] = 0.25*(pred1_ptr0[0x093] + 3* pred2_ptr1[0x093]);
				pred1_ptr0[0x094] = 0.25*(pred1_ptr0[0x094] + 3* pred2_ptr1[0x094]);
				pred1_ptr0[0x095] = 0.25*(pred1_ptr0[0x095] + 3* pred2_ptr1[0x095]);
				pred1_ptr0[0x096] = 0.25*(pred1_ptr0[0x096] + 3* pred2_ptr1[0x096]);
				pred1_ptr0[0x097] = 0.25*(pred1_ptr0[0x097] + 3* pred2_ptr1[0x097]);
				pred1_ptr0[0x098] = 0.25*(pred1_ptr0[0x098] + 3* pred2_ptr1[0x098]);
				pred1_ptr0[0x099] = 0.25*(pred1_ptr0[0x099] + 3* pred2_ptr1[0x099]);
				pred1_ptr0[0x09a] = 0.25*(pred1_ptr0[0x09a] + 3* pred2_ptr1[0x09a]);
				pred1_ptr0[0x09b] = 0.25*(pred1_ptr0[0x09b] + 3* pred2_ptr1[0x09b]);
				pred1_ptr0[0x09c] = 0.25*(pred1_ptr0[0x09c] + 3* pred2_ptr1[0x09c]);
				pred1_ptr0[0x09d] = 0.25*(pred1_ptr0[0x09d] + 3* pred2_ptr1[0x09d]);
				pred1_ptr0[0x09e] = 0.25*(pred1_ptr0[0x09e] + 3* pred2_ptr1[0x09e]);
				pred1_ptr0[0x09f] = 0.25*(pred1_ptr0[0x09f] + 3* pred2_ptr1[0x09f]);
				pred1_ptr0[0x0a0] = 0.25*(pred1_ptr0[0x0a0] + 3* pred2_ptr1[0x0a0]);
				pred1_ptr0[0x0a1] = 0.25*(pred1_ptr0[0x0a1] + 3* pred2_ptr1[0x0a1]);
				pred1_ptr0[0x0a2] = 0.25*(pred1_ptr0[0x0a2] + 3* pred2_ptr1[0x0a2]);
				pred1_ptr0[0x0a3] = 0.25*(pred1_ptr0[0x0a3] + 3* pred2_ptr1[0x0a3]);
				pred1_ptr0[0x0a4] = 0.25*(pred1_ptr0[0x0a4] + 3* pred2_ptr1[0x0a4]);
				pred1_ptr0[0x0a5] = 0.25*(pred1_ptr0[0x0a5] + 3* pred2_ptr1[0x0a5]);
				pred1_ptr0[0x0a6] = 0.25*(pred1_ptr0[0x0a6] + 3* pred2_ptr1[0x0a6]);
				pred1_ptr0[0x0a7] = 0.25*(pred1_ptr0[0x0a7] + 3* pred2_ptr1[0x0a7]);
				pred1_ptr0[0x0a8] = 0.25*(pred1_ptr0[0x0a8] + 3* pred2_ptr1[0x0a8]);
				pred1_ptr0[0x0a9] = 0.25*(pred1_ptr0[0x0a9] + 3* pred2_ptr1[0x0a9]);
				pred1_ptr0[0x0aa] = 0.25*(pred1_ptr0[0x0aa] + 3* pred2_ptr1[0x0aa]);
				pred1_ptr0[0x0ab] = 0.25*(pred1_ptr0[0x0ab] + 3* pred2_ptr1[0x0ab]);
				pred1_ptr0[0x0ac] = 0.25*(pred1_ptr0[0x0ac] + 3* pred2_ptr1[0x0ac]);
				pred1_ptr0[0x0ad] = 0.25*(pred1_ptr0[0x0ad] + 3* pred2_ptr1[0x0ad]);
				pred1_ptr0[0x0ae] = 0.25*(pred1_ptr0[0x0ae] + 3* pred2_ptr1[0x0ae]);
				pred1_ptr0[0x0af] = 0.25*(pred1_ptr0[0x0af] + 3* pred2_ptr1[0x0af]);
				pred1_ptr0[0x0b0] = 0.25*(pred1_ptr0[0x0b0] + 3* pred2_ptr1[0x0b0]);
				pred1_ptr0[0x0b1] = 0.25*(pred1_ptr0[0x0b1] + 3* pred2_ptr1[0x0b1]);
				pred1_ptr0[0x0b2] = 0.25*(pred1_ptr0[0x0b2] + 3* pred2_ptr1[0x0b2]);
				pred1_ptr0[0x0b3] = 0.25*(pred1_ptr0[0x0b3] + 3* pred2_ptr1[0x0b3]);
				pred1_ptr0[0x0b4] = 0.25*(pred1_ptr0[0x0b4] + 3* pred2_ptr1[0x0b4]);
				pred1_ptr0[0x0b5] = 0.25*(pred1_ptr0[0x0b5] + 3* pred2_ptr1[0x0b5]);
				pred1_ptr0[0x0b6] = 0.25*(pred1_ptr0[0x0b6] + 3* pred2_ptr1[0x0b6]);
				pred1_ptr0[0x0b7] = 0.25*(pred1_ptr0[0x0b7] + 3* pred2_ptr1[0x0b7]);
				pred1_ptr0[0x0b8] = 0.25*(pred1_ptr0[0x0b8] + 3* pred2_ptr1[0x0b8]);
				pred1_ptr0[0x0b9] = 0.25*(pred1_ptr0[0x0b9] + 3* pred2_ptr1[0x0b9]);
				pred1_ptr0[0x0ba] = 0.25*(pred1_ptr0[0x0ba] + 3* pred2_ptr1[0x0ba]);
				pred1_ptr0[0x0bb] = 0.25*(pred1_ptr0[0x0bb] + 3* pred2_ptr1[0x0bb]);
				pred1_ptr0[0x0bc] = 0.25*(pred1_ptr0[0x0bc] + 3* pred2_ptr1[0x0bc]);
				pred1_ptr0[0x0bd] = 0.25*(pred1_ptr0[0x0bd] + 3* pred2_ptr1[0x0bd]);
				pred1_ptr0[0x0be] = 0.25*(pred1_ptr0[0x0be] + 3* pred2_ptr1[0x0be]);
				pred1_ptr0[0x0bf] = 0.25*(pred1_ptr0[0x0bf] + 3* pred2_ptr1[0x0bf]);
				pred1_ptr0[0x0c0] = 0.25*(pred1_ptr0[0x0c0] + 3* pred2_ptr1[0x0c0]);
				pred1_ptr0[0x0c1] = 0.25*(pred1_ptr0[0x0c1] + 3* pred2_ptr1[0x0c1]);
				pred1_ptr0[0x0c2] = 0.25*(pred1_ptr0[0x0c2] + 3* pred2_ptr1[0x0c2]);
				pred1_ptr0[0x0c3] = 0.25*(pred1_ptr0[0x0c3] + 3* pred2_ptr1[0x0c3]);
				pred1_ptr0[0x0c4] = 0.25*(pred1_ptr0[0x0c4] + 3* pred2_ptr1[0x0c4]);
				pred1_ptr0[0x0c5] = 0.25*(pred1_ptr0[0x0c5] + 3* pred2_ptr1[0x0c5]);
				pred1_ptr0[0x0c6] = 0.25*(pred1_ptr0[0x0c6] + 3* pred2_ptr1[0x0c6]);
				pred1_ptr0[0x0c7] = 0.25*(pred1_ptr0[0x0c7] + 3* pred2_ptr1[0x0c7]);
				pred1_ptr0[0x0c8] = 0.25*(pred1_ptr0[0x0c8] + 3* pred2_ptr1[0x0c8]);
				pred1_ptr0[0x0c9] = 0.25*(pred1_ptr0[0x0c9] + 3* pred2_ptr1[0x0c9]);
				pred1_ptr0[0x0ca] = 0.25*(pred1_ptr0[0x0ca] + 3* pred2_ptr1[0x0ca]);
				pred1_ptr0[0x0cb] = 0.25*(pred1_ptr0[0x0cb] + 3* pred2_ptr1[0x0cb]);
				pred1_ptr0[0x0cc] = 0.25*(pred1_ptr0[0x0cc] + 3* pred2_ptr1[0x0cc]);
				pred1_ptr0[0x0cd] = 0.25*(pred1_ptr0[0x0cd] + 3* pred2_ptr1[0x0cd]);
				pred1_ptr0[0x0ce] = 0.25*(pred1_ptr0[0x0ce] + 3* pred2_ptr1[0x0ce]);
				pred1_ptr0[0x0cf] = 0.25*(pred1_ptr0[0x0cf] + 3* pred2_ptr1[0x0cf]);
				pred1_ptr0[0x0d0] = 0.25*(pred1_ptr0[0x0d0] + 3* pred2_ptr1[0x0d0]);
				pred1_ptr0[0x0d1] = 0.25*(pred1_ptr0[0x0d1] + 3* pred2_ptr1[0x0d1]);
				pred1_ptr0[0x0d2] = 0.25*(pred1_ptr0[0x0d2] + 3* pred2_ptr1[0x0d2]);
				pred1_ptr0[0x0d3] = 0.25*(pred1_ptr0[0x0d3] + 3* pred2_ptr1[0x0d3]);
				pred1_ptr0[0x0d4] = 0.25*(pred1_ptr0[0x0d4] + 3* pred2_ptr1[0x0d4]);
				pred1_ptr0[0x0d5] = 0.25*(pred1_ptr0[0x0d5] + 3* pred2_ptr1[0x0d5]);
				pred1_ptr0[0x0d6] = 0.25*(pred1_ptr0[0x0d6] + 3* pred2_ptr1[0x0d6]);
				pred1_ptr0[0x0d7] = 0.25*(pred1_ptr0[0x0d7] + 3* pred2_ptr1[0x0d7]);
				pred1_ptr0[0x0d8] = 0.25*(pred1_ptr0[0x0d8] + 3* pred2_ptr1[0x0d8]);
				pred1_ptr0[0x0d9] = 0.25*(pred1_ptr0[0x0d9] + 3* pred2_ptr1[0x0d9]);
				pred1_ptr0[0x0da] = 0.25*(pred1_ptr0[0x0da] + 3* pred2_ptr1[0x0da]);
				pred1_ptr0[0x0db] = 0.25*(pred1_ptr0[0x0db] + 3* pred2_ptr1[0x0db]);
				pred1_ptr0[0x0dc] = 0.25*(pred1_ptr0[0x0dc] + 3* pred2_ptr1[0x0dc]);
				pred1_ptr0[0x0dd] = 0.25*(pred1_ptr0[0x0dd] + 3* pred2_ptr1[0x0dd]);
				pred1_ptr0[0x0de] = 0.25*(pred1_ptr0[0x0de] + 3* pred2_ptr1[0x0de]);
				pred1_ptr0[0x0df] = 0.25*(pred1_ptr0[0x0df] + 3* pred2_ptr1[0x0df]);
				pred1_ptr0[0x0e0] = 0.25*(pred1_ptr0[0x0e0] + 3* pred2_ptr1[0x0e0]);
				pred1_ptr0[0x0e1] = 0.25*(pred1_ptr0[0x0e1] + 3* pred2_ptr1[0x0e1]);
				pred1_ptr0[0x0e2] = 0.25*(pred1_ptr0[0x0e2] + 3* pred2_ptr1[0x0e2]);
				pred1_ptr0[0x0e3] = 0.25*(pred1_ptr0[0x0e3] + 3* pred2_ptr1[0x0e3]);
				pred1_ptr0[0x0e4] = 0.25*(pred1_ptr0[0x0e4] + 3* pred2_ptr1[0x0e4]);
				pred1_ptr0[0x0e5] = 0.25*(pred1_ptr0[0x0e5] + 3* pred2_ptr1[0x0e5]);
				pred1_ptr0[0x0e6] = 0.25*(pred1_ptr0[0x0e6] + 3* pred2_ptr1[0x0e6]);
				pred1_ptr0[0x0e7] = 0.25*(pred1_ptr0[0x0e7] + 3* pred2_ptr1[0x0e7]);
				pred1_ptr0[0x0e8] = 0.25*(pred1_ptr0[0x0e8] + 3* pred2_ptr1[0x0e8]);
				pred1_ptr0[0x0e9] = 0.25*(pred1_ptr0[0x0e9] + 3* pred2_ptr1[0x0e9]);
				pred1_ptr0[0x0ea] = 0.25*(pred1_ptr0[0x0ea] + 3* pred2_ptr1[0x0ea]);
				pred1_ptr0[0x0eb] = 0.25*(pred1_ptr0[0x0eb] + 3* pred2_ptr1[0x0eb]);
				pred1_ptr0[0x0ec] = 0.25*(pred1_ptr0[0x0ec] + 3* pred2_ptr1[0x0ec]);
				pred1_ptr0[0x0ed] = 0.25*(pred1_ptr0[0x0ed] + 3* pred2_ptr1[0x0ed]);
				pred1_ptr0[0x0ee] = 0.25*(pred1_ptr0[0x0ee] + 3* pred2_ptr1[0x0ee]);
				pred1_ptr0[0x0ef] = 0.25*(pred1_ptr0[0x0ef] + 3* pred2_ptr1[0x0ef]);
				pred1_ptr0[0x0f0] = 0.25*(pred1_ptr0[0x0f0] + 3* pred2_ptr1[0x0f0]);
				pred1_ptr0[0x0f1] = 0.25*(pred1_ptr0[0x0f1] + 3* pred2_ptr1[0x0f1]);
				pred1_ptr0[0x0f2] = 0.25*(pred1_ptr0[0x0f2] + 3* pred2_ptr1[0x0f2]);
				pred1_ptr0[0x0f3] = 0.25*(pred1_ptr0[0x0f3] + 3* pred2_ptr1[0x0f3]);
				pred1_ptr0[0x0f4] = 0.25*(pred1_ptr0[0x0f4] + 3* pred2_ptr1[0x0f4]);
				pred1_ptr0[0x0f5] = 0.25*(pred1_ptr0[0x0f5] + 3* pred2_ptr1[0x0f5]);
				pred1_ptr0[0x0f6] = 0.25*(pred1_ptr0[0x0f6] + 3* pred2_ptr1[0x0f6]);
				pred1_ptr0[0x0f7] = 0.25*(pred1_ptr0[0x0f7] + 3* pred2_ptr1[0x0f7]);
				pred1_ptr0[0x0f8] = 0.25*(pred1_ptr0[0x0f8] + 3* pred2_ptr1[0x0f8]);
				pred1_ptr0[0x0f9] = 0.25*(pred1_ptr0[0x0f9] + 3* pred2_ptr1[0x0f9]);
				pred1_ptr0[0x0fa] = 0.25*(pred1_ptr0[0x0fa] + 3* pred2_ptr1[0x0fa]);
				pred1_ptr0[0x0fb] = 0.25*(pred1_ptr0[0x0fb] + 3* pred2_ptr1[0x0fb]);
				pred1_ptr0[0x0fc] = 0.25*(pred1_ptr0[0x0fc] + 3* pred2_ptr1[0x0fc]);
				pred1_ptr0[0x0fd] = 0.25*(pred1_ptr0[0x0fd] + 3* pred2_ptr1[0x0fd]);
				pred1_ptr0[0x0fe] = 0.25*(pred1_ptr0[0x0fe] + 3* pred2_ptr1[0x0fe]);
				pred1_ptr0[0x0ff] = 0.25*(pred1_ptr0[0x0ff] + 3* pred2_ptr1[0x0ff]);
			}
		
			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,8);
			luma_index0 = ((luma_index0 + 4)&0x0f);
			luma_index1 = ((luma_index1 + 4)&0x0f);
		}
	}
}
void b_frame_x_x_x_0_0x00000_x_x_x_x_x_x_12_0(_fp16 *out, _fp16 *in1, _fp16 *in2, INT8 *mvx1, INT8 *mvy1, INT8 *mvx2, INT8 *mvy2, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index0 = 12 ;
	UINT8 luma_index1 = 0 ;
	_fp16 pred1[0x100];
	_fp16 pred2[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x10 ; y< 0x410 ; y +=0x10){// 1080P, 4 slices
		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
//			p_frame_mb(pred1, in1, x, y, luma_index0, mvx1, mvy1, luma_type);
	get_luma(luma_type[luma_index0], pred1, in1, x + mvx1[0] + 8, y + mvy1[0] + 8);
	get_luma(luma_type[luma_index0 + 1], pred1, in1, x + mvx1[1] + 16, y + mvy1[1] + 16);
	get_luma(luma_type[luma_index0 + 2], pred1, in1, x + mvx1[2] + 8, y + mvy1[2] + 24);
	get_luma(luma_type[luma_index0 + 3], pred1, in1, x + mvx1[3] + 16, y + mvy1[3] + 32);
//			p_frame_mb(pred2, in2, x, y, luma_index1, mvx2, mvy2, luma_type);
	get_luma(luma_type[luma_index1], pred2, in2, x + mvx2[0] + 8, y + mvy2[0] + 8);
	get_luma(luma_type[luma_index1 + 1], pred2, in2, x + mvx2[1] + 16, y + mvy2[1] + 16);
	get_luma(luma_type[luma_index1 + 2], pred2, in2, x + mvx2[2] + 8, y + mvy2[2] + 24);
	get_luma(luma_type[luma_index1 + 3], pred2, in2, x + mvx2[3] + 16, y + mvy2[3] + 32);
//			for (UINT l= 0 ; l< 0x100 ;l++){
				{	// 4 
				_fp16 *pred1_ptr0 = &pred1[0];
				_fp16 *pred2_ptr1 = &pred2[0];
				pred1_ptr0[0x000] = 0.25*(pred1_ptr0[0x000] + 3* pred2_ptr1[0x000]);
				pred1_ptr0[0x001] = 0.25*(pred1_ptr0[0x001] + 3* pred2_ptr1[0x001]);
				pred1_ptr0[0x002] = 0.25*(pred1_ptr0[0x002] + 3* pred2_ptr1[0x002]);
				pred1_ptr0[0x003] = 0.25*(pred1_ptr0[0x003] + 3* pred2_ptr1[0x003]);
				pred1_ptr0[0x004] = 0.25*(pred1_ptr0[0x004] + 3* pred2_ptr1[0x004]);
				pred1_ptr0[0x005] = 0.25*(pred1_ptr0[0x005] + 3* pred2_ptr1[0x005]);
				pred1_ptr0[0x006] = 0.25*(pred1_ptr0[0x006] + 3* pred2_ptr1[0x006]);
				pred1_ptr0[0x007] = 0.25*(pred1_ptr0[0x007] + 3* pred2_ptr1[0x007]);
				pred1_ptr0[0x008] = 0.25*(pred1_ptr0[0x008] + 3* pred2_ptr1[0x008]);
				pred1_ptr0[0x009] = 0.25*(pred1_ptr0[0x009] + 3* pred2_ptr1[0x009]);
				pred1_ptr0[0x00a] = 0.25*(pred1_ptr0[0x00a] + 3* pred2_ptr1[0x00a]);
				pred1_ptr0[0x00b] = 0.25*(pred1_ptr0[0x00b] + 3* pred2_ptr1[0x00b]);
				pred1_ptr0[0x00c] = 0.25*(pred1_ptr0[0x00c] + 3* pred2_ptr1[0x00c]);
				pred1_ptr0[0x00d] = 0.25*(pred1_ptr0[0x00d] + 3* pred2_ptr1[0x00d]);
				pred1_ptr0[0x00e] = 0.25*(pred1_ptr0[0x00e] + 3* pred2_ptr1[0x00e]);
				pred1_ptr0[0x00f] = 0.25*(pred1_ptr0[0x00f] + 3* pred2_ptr1[0x00f]);
				pred1_ptr0[0x010] = 0.25*(pred1_ptr0[0x010] + 3* pred2_ptr1[0x010]);
				pred1_ptr0[0x011] = 0.25*(pred1_ptr0[0x011] + 3* pred2_ptr1[0x011]);
				pred1_ptr0[0x012] = 0.25*(pred1_ptr0[0x012] + 3* pred2_ptr1[0x012]);
				pred1_ptr0[0x013] = 0.25*(pred1_ptr0[0x013] + 3* pred2_ptr1[0x013]);
				pred1_ptr0[0x014] = 0.25*(pred1_ptr0[0x014] + 3* pred2_ptr1[0x014]);
				pred1_ptr0[0x015] = 0.25*(pred1_ptr0[0x015] + 3* pred2_ptr1[0x015]);
				pred1_ptr0[0x016] = 0.25*(pred1_ptr0[0x016] + 3* pred2_ptr1[0x016]);
				pred1_ptr0[0x017] = 0.25*(pred1_ptr0[0x017] + 3* pred2_ptr1[0x017]);
				pred1_ptr0[0x018] = 0.25*(pred1_ptr0[0x018] + 3* pred2_ptr1[0x018]);
				pred1_ptr0[0x019] = 0.25*(pred1_ptr0[0x019] + 3* pred2_ptr1[0x019]);
				pred1_ptr0[0x01a] = 0.25*(pred1_ptr0[0x01a] + 3* pred2_ptr1[0x01a]);
				pred1_ptr0[0x01b] = 0.25*(pred1_ptr0[0x01b] + 3* pred2_ptr1[0x01b]);
				pred1_ptr0[0x01c] = 0.25*(pred1_ptr0[0x01c] + 3* pred2_ptr1[0x01c]);
				pred1_ptr0[0x01d] = 0.25*(pred1_ptr0[0x01d] + 3* pred2_ptr1[0x01d]);
				pred1_ptr0[0x01e] = 0.25*(pred1_ptr0[0x01e] + 3* pred2_ptr1[0x01e]);
				pred1_ptr0[0x01f] = 0.25*(pred1_ptr0[0x01f] + 3* pred2_ptr1[0x01f]);
				pred1_ptr0[0x020] = 0.25*(pred1_ptr0[0x020] + 3* pred2_ptr1[0x020]);
				pred1_ptr0[0x021] = 0.25*(pred1_ptr0[0x021] + 3* pred2_ptr1[0x021]);
				pred1_ptr0[0x022] = 0.25*(pred1_ptr0[0x022] + 3* pred2_ptr1[0x022]);
				pred1_ptr0[0x023] = 0.25*(pred1_ptr0[0x023] + 3* pred2_ptr1[0x023]);
				pred1_ptr0[0x024] = 0.25*(pred1_ptr0[0x024] + 3* pred2_ptr1[0x024]);
				pred1_ptr0[0x025] = 0.25*(pred1_ptr0[0x025] + 3* pred2_ptr1[0x025]);
				pred1_ptr0[0x026] = 0.25*(pred1_ptr0[0x026] + 3* pred2_ptr1[0x026]);
				pred1_ptr0[0x027] = 0.25*(pred1_ptr0[0x027] + 3* pred2_ptr1[0x027]);
				pred1_ptr0[0x028] = 0.25*(pred1_ptr0[0x028] + 3* pred2_ptr1[0x028]);
				pred1_ptr0[0x029] = 0.25*(pred1_ptr0[0x029] + 3* pred2_ptr1[0x029]);
				pred1_ptr0[0x02a] = 0.25*(pred1_ptr0[0x02a] + 3* pred2_ptr1[0x02a]);
				pred1_ptr0[0x02b] = 0.25*(pred1_ptr0[0x02b] + 3* pred2_ptr1[0x02b]);
				pred1_ptr0[0x02c] = 0.25*(pred1_ptr0[0x02c] + 3* pred2_ptr1[0x02c]);
				pred1_ptr0[0x02d] = 0.25*(pred1_ptr0[0x02d] + 3* pred2_ptr1[0x02d]);
				pred1_ptr0[0x02e] = 0.25*(pred1_ptr0[0x02e] + 3* pred2_ptr1[0x02e]);
				pred1_ptr0[0x02f] = 0.25*(pred1_ptr0[0x02f] + 3* pred2_ptr1[0x02f]);
				pred1_ptr0[0x030] = 0.25*(pred1_ptr0[0x030] + 3* pred2_ptr1[0x030]);
				pred1_ptr0[0x031] = 0.25*(pred1_ptr0[0x031] + 3* pred2_ptr1[0x031]);
				pred1_ptr0[0x032] = 0.25*(pred1_ptr0[0x032] + 3* pred2_ptr1[0x032]);
				pred1_ptr0[0x033] = 0.25*(pred1_ptr0[0x033] + 3* pred2_ptr1[0x033]);
				pred1_ptr0[0x034] = 0.25*(pred1_ptr0[0x034] + 3* pred2_ptr1[0x034]);
				pred1_ptr0[0x035] = 0.25*(pred1_ptr0[0x035] + 3* pred2_ptr1[0x035]);
				pred1_ptr0[0x036] = 0.25*(pred1_ptr0[0x036] + 3* pred2_ptr1[0x036]);
				pred1_ptr0[0x037] = 0.25*(pred1_ptr0[0x037] + 3* pred2_ptr1[0x037]);
				pred1_ptr0[0x038] = 0.25*(pred1_ptr0[0x038] + 3* pred2_ptr1[0x038]);
				pred1_ptr0[0x039] = 0.25*(pred1_ptr0[0x039] + 3* pred2_ptr1[0x039]);
				pred1_ptr0[0x03a] = 0.25*(pred1_ptr0[0x03a] + 3* pred2_ptr1[0x03a]);
				pred1_ptr0[0x03b] = 0.25*(pred1_ptr0[0x03b] + 3* pred2_ptr1[0x03b]);
				pred1_ptr0[0x03c] = 0.25*(pred1_ptr0[0x03c] + 3* pred2_ptr1[0x03c]);
				pred1_ptr0[0x03d] = 0.25*(pred1_ptr0[0x03d] + 3* pred2_ptr1[0x03d]);
				pred1_ptr0[0x03e] = 0.25*(pred1_ptr0[0x03e] + 3* pred2_ptr1[0x03e]);
				pred1_ptr0[0x03f] = 0.25*(pred1_ptr0[0x03f] + 3* pred2_ptr1[0x03f]);
				pred1_ptr0[0x040] = 0.25*(pred1_ptr0[0x040] + 3* pred2_ptr1[0x040]);
				pred1_ptr0[0x041] = 0.25*(pred1_ptr0[0x041] + 3* pred2_ptr1[0x041]);
				pred1_ptr0[0x042] = 0.25*(pred1_ptr0[0x042] + 3* pred2_ptr1[0x042]);
				pred1_ptr0[0x043] = 0.25*(pred1_ptr0[0x043] + 3* pred2_ptr1[0x043]);
				pred1_ptr0[0x044] = 0.25*(pred1_ptr0[0x044] + 3* pred2_ptr1[0x044]);
				pred1_ptr0[0x045] = 0.25*(pred1_ptr0[0x045] + 3* pred2_ptr1[0x045]);
				pred1_ptr0[0x046] = 0.25*(pred1_ptr0[0x046] + 3* pred2_ptr1[0x046]);
				pred1_ptr0[0x047] = 0.25*(pred1_ptr0[0x047] + 3* pred2_ptr1[0x047]);
				pred1_ptr0[0x048] = 0.25*(pred1_ptr0[0x048] + 3* pred2_ptr1[0x048]);
				pred1_ptr0[0x049] = 0.25*(pred1_ptr0[0x049] + 3* pred2_ptr1[0x049]);
				pred1_ptr0[0x04a] = 0.25*(pred1_ptr0[0x04a] + 3* pred2_ptr1[0x04a]);
				pred1_ptr0[0x04b] = 0.25*(pred1_ptr0[0x04b] + 3* pred2_ptr1[0x04b]);
				pred1_ptr0[0x04c] = 0.25*(pred1_ptr0[0x04c] + 3* pred2_ptr1[0x04c]);
				pred1_ptr0[0x04d] = 0.25*(pred1_ptr0[0x04d] + 3* pred2_ptr1[0x04d]);
				pred1_ptr0[0x04e] = 0.25*(pred1_ptr0[0x04e] + 3* pred2_ptr1[0x04e]);
				pred1_ptr0[0x04f] = 0.25*(pred1_ptr0[0x04f] + 3* pred2_ptr1[0x04f]);
				pred1_ptr0[0x050] = 0.25*(pred1_ptr0[0x050] + 3* pred2_ptr1[0x050]);
				pred1_ptr0[0x051] = 0.25*(pred1_ptr0[0x051] + 3* pred2_ptr1[0x051]);
				pred1_ptr0[0x052] = 0.25*(pred1_ptr0[0x052] + 3* pred2_ptr1[0x052]);
				pred1_ptr0[0x053] = 0.25*(pred1_ptr0[0x053] + 3* pred2_ptr1[0x053]);
				pred1_ptr0[0x054] = 0.25*(pred1_ptr0[0x054] + 3* pred2_ptr1[0x054]);
				pred1_ptr0[0x055] = 0.25*(pred1_ptr0[0x055] + 3* pred2_ptr1[0x055]);
				pred1_ptr0[0x056] = 0.25*(pred1_ptr0[0x056] + 3* pred2_ptr1[0x056]);
				pred1_ptr0[0x057] = 0.25*(pred1_ptr0[0x057] + 3* pred2_ptr1[0x057]);
				pred1_ptr0[0x058] = 0.25*(pred1_ptr0[0x058] + 3* pred2_ptr1[0x058]);
				pred1_ptr0[0x059] = 0.25*(pred1_ptr0[0x059] + 3* pred2_ptr1[0x059]);
				pred1_ptr0[0x05a] = 0.25*(pred1_ptr0[0x05a] + 3* pred2_ptr1[0x05a]);
				pred1_ptr0[0x05b] = 0.25*(pred1_ptr0[0x05b] + 3* pred2_ptr1[0x05b]);
				pred1_ptr0[0x05c] = 0.25*(pred1_ptr0[0x05c] + 3* pred2_ptr1[0x05c]);
				pred1_ptr0[0x05d] = 0.25*(pred1_ptr0[0x05d] + 3* pred2_ptr1[0x05d]);
				pred1_ptr0[0x05e] = 0.25*(pred1_ptr0[0x05e] + 3* pred2_ptr1[0x05e]);
				pred1_ptr0[0x05f] = 0.25*(pred1_ptr0[0x05f] + 3* pred2_ptr1[0x05f]);
				pred1_ptr0[0x060] = 0.25*(pred1_ptr0[0x060] + 3* pred2_ptr1[0x060]);
				pred1_ptr0[0x061] = 0.25*(pred1_ptr0[0x061] + 3* pred2_ptr1[0x061]);
				pred1_ptr0[0x062] = 0.25*(pred1_ptr0[0x062] + 3* pred2_ptr1[0x062]);
				pred1_ptr0[0x063] = 0.25*(pred1_ptr0[0x063] + 3* pred2_ptr1[0x063]);
				pred1_ptr0[0x064] = 0.25*(pred1_ptr0[0x064] + 3* pred2_ptr1[0x064]);
				pred1_ptr0[0x065] = 0.25*(pred1_ptr0[0x065] + 3* pred2_ptr1[0x065]);
				pred1_ptr0[0x066] = 0.25*(pred1_ptr0[0x066] + 3* pred2_ptr1[0x066]);
				pred1_ptr0[0x067] = 0.25*(pred1_ptr0[0x067] + 3* pred2_ptr1[0x067]);
				pred1_ptr0[0x068] = 0.25*(pred1_ptr0[0x068] + 3* pred2_ptr1[0x068]);
				pred1_ptr0[0x069] = 0.25*(pred1_ptr0[0x069] + 3* pred2_ptr1[0x069]);
				pred1_ptr0[0x06a] = 0.25*(pred1_ptr0[0x06a] + 3* pred2_ptr1[0x06a]);
				pred1_ptr0[0x06b] = 0.25*(pred1_ptr0[0x06b] + 3* pred2_ptr1[0x06b]);
				pred1_ptr0[0x06c] = 0.25*(pred1_ptr0[0x06c] + 3* pred2_ptr1[0x06c]);
				pred1_ptr0[0x06d] = 0.25*(pred1_ptr0[0x06d] + 3* pred2_ptr1[0x06d]);
				pred1_ptr0[0x06e] = 0.25*(pred1_ptr0[0x06e] + 3* pred2_ptr1[0x06e]);
				pred1_ptr0[0x06f] = 0.25*(pred1_ptr0[0x06f] + 3* pred2_ptr1[0x06f]);
				pred1_ptr0[0x070] = 0.25*(pred1_ptr0[0x070] + 3* pred2_ptr1[0x070]);
				pred1_ptr0[0x071] = 0.25*(pred1_ptr0[0x071] + 3* pred2_ptr1[0x071]);
				pred1_ptr0[0x072] = 0.25*(pred1_ptr0[0x072] + 3* pred2_ptr1[0x072]);
				pred1_ptr0[0x073] = 0.25*(pred1_ptr0[0x073] + 3* pred2_ptr1[0x073]);
				pred1_ptr0[0x074] = 0.25*(pred1_ptr0[0x074] + 3* pred2_ptr1[0x074]);
				pred1_ptr0[0x075] = 0.25*(pred1_ptr0[0x075] + 3* pred2_ptr1[0x075]);
				pred1_ptr0[0x076] = 0.25*(pred1_ptr0[0x076] + 3* pred2_ptr1[0x076]);
				pred1_ptr0[0x077] = 0.25*(pred1_ptr0[0x077] + 3* pred2_ptr1[0x077]);
				pred1_ptr0[0x078] = 0.25*(pred1_ptr0[0x078] + 3* pred2_ptr1[0x078]);
				pred1_ptr0[0x079] = 0.25*(pred1_ptr0[0x079] + 3* pred2_ptr1[0x079]);
				pred1_ptr0[0x07a] = 0.25*(pred1_ptr0[0x07a] + 3* pred2_ptr1[0x07a]);
				pred1_ptr0[0x07b] = 0.25*(pred1_ptr0[0x07b] + 3* pred2_ptr1[0x07b]);
				pred1_ptr0[0x07c] = 0.25*(pred1_ptr0[0x07c] + 3* pred2_ptr1[0x07c]);
				pred1_ptr0[0x07d] = 0.25*(pred1_ptr0[0x07d] + 3* pred2_ptr1[0x07d]);
				pred1_ptr0[0x07e] = 0.25*(pred1_ptr0[0x07e] + 3* pred2_ptr1[0x07e]);
				pred1_ptr0[0x07f] = 0.25*(pred1_ptr0[0x07f] + 3* pred2_ptr1[0x07f]);
				pred1_ptr0[0x080] = 0.25*(pred1_ptr0[0x080] + 3* pred2_ptr1[0x080]);
				pred1_ptr0[0x081] = 0.25*(pred1_ptr0[0x081] + 3* pred2_ptr1[0x081]);
				pred1_ptr0[0x082] = 0.25*(pred1_ptr0[0x082] + 3* pred2_ptr1[0x082]);
				pred1_ptr0[0x083] = 0.25*(pred1_ptr0[0x083] + 3* pred2_ptr1[0x083]);
				pred1_ptr0[0x084] = 0.25*(pred1_ptr0[0x084] + 3* pred2_ptr1[0x084]);
				pred1_ptr0[0x085] = 0.25*(pred1_ptr0[0x085] + 3* pred2_ptr1[0x085]);
				pred1_ptr0[0x086] = 0.25*(pred1_ptr0[0x086] + 3* pred2_ptr1[0x086]);
				pred1_ptr0[0x087] = 0.25*(pred1_ptr0[0x087] + 3* pred2_ptr1[0x087]);
				pred1_ptr0[0x088] = 0.25*(pred1_ptr0[0x088] + 3* pred2_ptr1[0x088]);
				pred1_ptr0[0x089] = 0.25*(pred1_ptr0[0x089] + 3* pred2_ptr1[0x089]);
				pred1_ptr0[0x08a] = 0.25*(pred1_ptr0[0x08a] + 3* pred2_ptr1[0x08a]);
				pred1_ptr0[0x08b] = 0.25*(pred1_ptr0[0x08b] + 3* pred2_ptr1[0x08b]);
				pred1_ptr0[0x08c] = 0.25*(pred1_ptr0[0x08c] + 3* pred2_ptr1[0x08c]);
				pred1_ptr0[0x08d] = 0.25*(pred1_ptr0[0x08d] + 3* pred2_ptr1[0x08d]);
				pred1_ptr0[0x08e] = 0.25*(pred1_ptr0[0x08e] + 3* pred2_ptr1[0x08e]);
				pred1_ptr0[0x08f] = 0.25*(pred1_ptr0[0x08f] + 3* pred2_ptr1[0x08f]);
				pred1_ptr0[0x090] = 0.25*(pred1_ptr0[0x090] + 3* pred2_ptr1[0x090]);
				pred1_ptr0[0x091] = 0.25*(pred1_ptr0[0x091] + 3* pred2_ptr1[0x091]);
				pred1_ptr0[0x092] = 0.25*(pred1_ptr0[0x092] + 3* pred2_ptr1[0x092]);
				pred1_ptr0[0x093] = 0.25*(pred1_ptr0[0x093] + 3* pred2_ptr1[0x093]);
				pred1_ptr0[0x094] = 0.25*(pred1_ptr0[0x094] + 3* pred2_ptr1[0x094]);
				pred1_ptr0[0x095] = 0.25*(pred1_ptr0[0x095] + 3* pred2_ptr1[0x095]);
				pred1_ptr0[0x096] = 0.25*(pred1_ptr0[0x096] + 3* pred2_ptr1[0x096]);
				pred1_ptr0[0x097] = 0.25*(pred1_ptr0[0x097] + 3* pred2_ptr1[0x097]);
				pred1_ptr0[0x098] = 0.25*(pred1_ptr0[0x098] + 3* pred2_ptr1[0x098]);
				pred1_ptr0[0x099] = 0.25*(pred1_ptr0[0x099] + 3* pred2_ptr1[0x099]);
				pred1_ptr0[0x09a] = 0.25*(pred1_ptr0[0x09a] + 3* pred2_ptr1[0x09a]);
				pred1_ptr0[0x09b] = 0.25*(pred1_ptr0[0x09b] + 3* pred2_ptr1[0x09b]);
				pred1_ptr0[0x09c] = 0.25*(pred1_ptr0[0x09c] + 3* pred2_ptr1[0x09c]);
				pred1_ptr0[0x09d] = 0.25*(pred1_ptr0[0x09d] + 3* pred2_ptr1[0x09d]);
				pred1_ptr0[0x09e] = 0.25*(pred1_ptr0[0x09e] + 3* pred2_ptr1[0x09e]);
				pred1_ptr0[0x09f] = 0.25*(pred1_ptr0[0x09f] + 3* pred2_ptr1[0x09f]);
				pred1_ptr0[0x0a0] = 0.25*(pred1_ptr0[0x0a0] + 3* pred2_ptr1[0x0a0]);
				pred1_ptr0[0x0a1] = 0.25*(pred1_ptr0[0x0a1] + 3* pred2_ptr1[0x0a1]);
				pred1_ptr0[0x0a2] = 0.25*(pred1_ptr0[0x0a2] + 3* pred2_ptr1[0x0a2]);
				pred1_ptr0[0x0a3] = 0.25*(pred1_ptr0[0x0a3] + 3* pred2_ptr1[0x0a3]);
				pred1_ptr0[0x0a4] = 0.25*(pred1_ptr0[0x0a4] + 3* pred2_ptr1[0x0a4]);
				pred1_ptr0[0x0a5] = 0.25*(pred1_ptr0[0x0a5] + 3* pred2_ptr1[0x0a5]);
				pred1_ptr0[0x0a6] = 0.25*(pred1_ptr0[0x0a6] + 3* pred2_ptr1[0x0a6]);
				pred1_ptr0[0x0a7] = 0.25*(pred1_ptr0[0x0a7] + 3* pred2_ptr1[0x0a7]);
				pred1_ptr0[0x0a8] = 0.25*(pred1_ptr0[0x0a8] + 3* pred2_ptr1[0x0a8]);
				pred1_ptr0[0x0a9] = 0.25*(pred1_ptr0[0x0a9] + 3* pred2_ptr1[0x0a9]);
				pred1_ptr0[0x0aa] = 0.25*(pred1_ptr0[0x0aa] + 3* pred2_ptr1[0x0aa]);
				pred1_ptr0[0x0ab] = 0.25*(pred1_ptr0[0x0ab] + 3* pred2_ptr1[0x0ab]);
				pred1_ptr0[0x0ac] = 0.25*(pred1_ptr0[0x0ac] + 3* pred2_ptr1[0x0ac]);
				pred1_ptr0[0x0ad] = 0.25*(pred1_ptr0[0x0ad] + 3* pred2_ptr1[0x0ad]);
				pred1_ptr0[0x0ae] = 0.25*(pred1_ptr0[0x0ae] + 3* pred2_ptr1[0x0ae]);
				pred1_ptr0[0x0af] = 0.25*(pred1_ptr0[0x0af] + 3* pred2_ptr1[0x0af]);
				pred1_ptr0[0x0b0] = 0.25*(pred1_ptr0[0x0b0] + 3* pred2_ptr1[0x0b0]);
				pred1_ptr0[0x0b1] = 0.25*(pred1_ptr0[0x0b1] + 3* pred2_ptr1[0x0b1]);
				pred1_ptr0[0x0b2] = 0.25*(pred1_ptr0[0x0b2] + 3* pred2_ptr1[0x0b2]);
				pred1_ptr0[0x0b3] = 0.25*(pred1_ptr0[0x0b3] + 3* pred2_ptr1[0x0b3]);
				pred1_ptr0[0x0b4] = 0.25*(pred1_ptr0[0x0b4] + 3* pred2_ptr1[0x0b4]);
				pred1_ptr0[0x0b5] = 0.25*(pred1_ptr0[0x0b5] + 3* pred2_ptr1[0x0b5]);
				pred1_ptr0[0x0b6] = 0.25*(pred1_ptr0[0x0b6] + 3* pred2_ptr1[0x0b6]);
				pred1_ptr0[0x0b7] = 0.25*(pred1_ptr0[0x0b7] + 3* pred2_ptr1[0x0b7]);
				pred1_ptr0[0x0b8] = 0.25*(pred1_ptr0[0x0b8] + 3* pred2_ptr1[0x0b8]);
				pred1_ptr0[0x0b9] = 0.25*(pred1_ptr0[0x0b9] + 3* pred2_ptr1[0x0b9]);
				pred1_ptr0[0x0ba] = 0.25*(pred1_ptr0[0x0ba] + 3* pred2_ptr1[0x0ba]);
				pred1_ptr0[0x0bb] = 0.25*(pred1_ptr0[0x0bb] + 3* pred2_ptr1[0x0bb]);
				pred1_ptr0[0x0bc] = 0.25*(pred1_ptr0[0x0bc] + 3* pred2_ptr1[0x0bc]);
				pred1_ptr0[0x0bd] = 0.25*(pred1_ptr0[0x0bd] + 3* pred2_ptr1[0x0bd]);
				pred1_ptr0[0x0be] = 0.25*(pred1_ptr0[0x0be] + 3* pred2_ptr1[0x0be]);
				pred1_ptr0[0x0bf] = 0.25*(pred1_ptr0[0x0bf] + 3* pred2_ptr1[0x0bf]);
				pred1_ptr0[0x0c0] = 0.25*(pred1_ptr0[0x0c0] + 3* pred2_ptr1[0x0c0]);
				pred1_ptr0[0x0c1] = 0.25*(pred1_ptr0[0x0c1] + 3* pred2_ptr1[0x0c1]);
				pred1_ptr0[0x0c2] = 0.25*(pred1_ptr0[0x0c2] + 3* pred2_ptr1[0x0c2]);
				pred1_ptr0[0x0c3] = 0.25*(pred1_ptr0[0x0c3] + 3* pred2_ptr1[0x0c3]);
				pred1_ptr0[0x0c4] = 0.25*(pred1_ptr0[0x0c4] + 3* pred2_ptr1[0x0c4]);
				pred1_ptr0[0x0c5] = 0.25*(pred1_ptr0[0x0c5] + 3* pred2_ptr1[0x0c5]);
				pred1_ptr0[0x0c6] = 0.25*(pred1_ptr0[0x0c6] + 3* pred2_ptr1[0x0c6]);
				pred1_ptr0[0x0c7] = 0.25*(pred1_ptr0[0x0c7] + 3* pred2_ptr1[0x0c7]);
				pred1_ptr0[0x0c8] = 0.25*(pred1_ptr0[0x0c8] + 3* pred2_ptr1[0x0c8]);
				pred1_ptr0[0x0c9] = 0.25*(pred1_ptr0[0x0c9] + 3* pred2_ptr1[0x0c9]);
				pred1_ptr0[0x0ca] = 0.25*(pred1_ptr0[0x0ca] + 3* pred2_ptr1[0x0ca]);
				pred1_ptr0[0x0cb] = 0.25*(pred1_ptr0[0x0cb] + 3* pred2_ptr1[0x0cb]);
				pred1_ptr0[0x0cc] = 0.25*(pred1_ptr0[0x0cc] + 3* pred2_ptr1[0x0cc]);
				pred1_ptr0[0x0cd] = 0.25*(pred1_ptr0[0x0cd] + 3* pred2_ptr1[0x0cd]);
				pred1_ptr0[0x0ce] = 0.25*(pred1_ptr0[0x0ce] + 3* pred2_ptr1[0x0ce]);
				pred1_ptr0[0x0cf] = 0.25*(pred1_ptr0[0x0cf] + 3* pred2_ptr1[0x0cf]);
				pred1_ptr0[0x0d0] = 0.25*(pred1_ptr0[0x0d0] + 3* pred2_ptr1[0x0d0]);
				pred1_ptr0[0x0d1] = 0.25*(pred1_ptr0[0x0d1] + 3* pred2_ptr1[0x0d1]);
				pred1_ptr0[0x0d2] = 0.25*(pred1_ptr0[0x0d2] + 3* pred2_ptr1[0x0d2]);
				pred1_ptr0[0x0d3] = 0.25*(pred1_ptr0[0x0d3] + 3* pred2_ptr1[0x0d3]);
				pred1_ptr0[0x0d4] = 0.25*(pred1_ptr0[0x0d4] + 3* pred2_ptr1[0x0d4]);
				pred1_ptr0[0x0d5] = 0.25*(pred1_ptr0[0x0d5] + 3* pred2_ptr1[0x0d5]);
				pred1_ptr0[0x0d6] = 0.25*(pred1_ptr0[0x0d6] + 3* pred2_ptr1[0x0d6]);
				pred1_ptr0[0x0d7] = 0.25*(pred1_ptr0[0x0d7] + 3* pred2_ptr1[0x0d7]);
				pred1_ptr0[0x0d8] = 0.25*(pred1_ptr0[0x0d8] + 3* pred2_ptr1[0x0d8]);
				pred1_ptr0[0x0d9] = 0.25*(pred1_ptr0[0x0d9] + 3* pred2_ptr1[0x0d9]);
				pred1_ptr0[0x0da] = 0.25*(pred1_ptr0[0x0da] + 3* pred2_ptr1[0x0da]);
				pred1_ptr0[0x0db] = 0.25*(pred1_ptr0[0x0db] + 3* pred2_ptr1[0x0db]);
				pred1_ptr0[0x0dc] = 0.25*(pred1_ptr0[0x0dc] + 3* pred2_ptr1[0x0dc]);
				pred1_ptr0[0x0dd] = 0.25*(pred1_ptr0[0x0dd] + 3* pred2_ptr1[0x0dd]);
				pred1_ptr0[0x0de] = 0.25*(pred1_ptr0[0x0de] + 3* pred2_ptr1[0x0de]);
				pred1_ptr0[0x0df] = 0.25*(pred1_ptr0[0x0df] + 3* pred2_ptr1[0x0df]);
				pred1_ptr0[0x0e0] = 0.25*(pred1_ptr0[0x0e0] + 3* pred2_ptr1[0x0e0]);
				pred1_ptr0[0x0e1] = 0.25*(pred1_ptr0[0x0e1] + 3* pred2_ptr1[0x0e1]);
				pred1_ptr0[0x0e2] = 0.25*(pred1_ptr0[0x0e2] + 3* pred2_ptr1[0x0e2]);
				pred1_ptr0[0x0e3] = 0.25*(pred1_ptr0[0x0e3] + 3* pred2_ptr1[0x0e3]);
				pred1_ptr0[0x0e4] = 0.25*(pred1_ptr0[0x0e4] + 3* pred2_ptr1[0x0e4]);
				pred1_ptr0[0x0e5] = 0.25*(pred1_ptr0[0x0e5] + 3* pred2_ptr1[0x0e5]);
				pred1_ptr0[0x0e6] = 0.25*(pred1_ptr0[0x0e6] + 3* pred2_ptr1[0x0e6]);
				pred1_ptr0[0x0e7] = 0.25*(pred1_ptr0[0x0e7] + 3* pred2_ptr1[0x0e7]);
				pred1_ptr0[0x0e8] = 0.25*(pred1_ptr0[0x0e8] + 3* pred2_ptr1[0x0e8]);
				pred1_ptr0[0x0e9] = 0.25*(pred1_ptr0[0x0e9] + 3* pred2_ptr1[0x0e9]);
				pred1_ptr0[0x0ea] = 0.25*(pred1_ptr0[0x0ea] + 3* pred2_ptr1[0x0ea]);
				pred1_ptr0[0x0eb] = 0.25*(pred1_ptr0[0x0eb] + 3* pred2_ptr1[0x0eb]);
				pred1_ptr0[0x0ec] = 0.25*(pred1_ptr0[0x0ec] + 3* pred2_ptr1[0x0ec]);
				pred1_ptr0[0x0ed] = 0.25*(pred1_ptr0[0x0ed] + 3* pred2_ptr1[0x0ed]);
				pred1_ptr0[0x0ee] = 0.25*(pred1_ptr0[0x0ee] + 3* pred2_ptr1[0x0ee]);
				pred1_ptr0[0x0ef] = 0.25*(pred1_ptr0[0x0ef] + 3* pred2_ptr1[0x0ef]);
				pred1_ptr0[0x0f0] = 0.25*(pred1_ptr0[0x0f0] + 3* pred2_ptr1[0x0f0]);
				pred1_ptr0[0x0f1] = 0.25*(pred1_ptr0[0x0f1] + 3* pred2_ptr1[0x0f1]);
				pred1_ptr0[0x0f2] = 0.25*(pred1_ptr0[0x0f2] + 3* pred2_ptr1[0x0f2]);
				pred1_ptr0[0x0f3] = 0.25*(pred1_ptr0[0x0f3] + 3* pred2_ptr1[0x0f3]);
				pred1_ptr0[0x0f4] = 0.25*(pred1_ptr0[0x0f4] + 3* pred2_ptr1[0x0f4]);
				pred1_ptr0[0x0f5] = 0.25*(pred1_ptr0[0x0f5] + 3* pred2_ptr1[0x0f5]);
				pred1_ptr0[0x0f6] = 0.25*(pred1_ptr0[0x0f6] + 3* pred2_ptr1[0x0f6]);
				pred1_ptr0[0x0f7] = 0.25*(pred1_ptr0[0x0f7] + 3* pred2_ptr1[0x0f7]);
				pred1_ptr0[0x0f8] = 0.25*(pred1_ptr0[0x0f8] + 3* pred2_ptr1[0x0f8]);
				pred1_ptr0[0x0f9] = 0.25*(pred1_ptr0[0x0f9] + 3* pred2_ptr1[0x0f9]);
				pred1_ptr0[0x0fa] = 0.25*(pred1_ptr0[0x0fa] + 3* pred2_ptr1[0x0fa]);
				pred1_ptr0[0x0fb] = 0.25*(pred1_ptr0[0x0fb] + 3* pred2_ptr1[0x0fb]);
				pred1_ptr0[0x0fc] = 0.25*(pred1_ptr0[0x0fc] + 3* pred2_ptr1[0x0fc]);
				pred1_ptr0[0x0fd] = 0.25*(pred1_ptr0[0x0fd] + 3* pred2_ptr1[0x0fd]);
				pred1_ptr0[0x0fe] = 0.25*(pred1_ptr0[0x0fe] + 3* pred2_ptr1[0x0fe]);
				pred1_ptr0[0x0ff] = 0.25*(pred1_ptr0[0x0ff] + 3* pred2_ptr1[0x0ff]);
			}
		
			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,8);
			luma_index0 = ((luma_index0 + 4)&0x0f);
			luma_index1 = ((luma_index1 + 4)&0x0f);
		}
	}
}
void b_frame_x_x_x_0_0x00200_x_x_x_x_x_x_12_0(_fp16 *out, _fp16 *in1, _fp16 *in2, INT8 *mvx1, INT8 *mvy1, INT8 *mvx2, INT8 *mvy2, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index0 = 12 ;
	UINT8 luma_index1 = 0 ;
	_fp16 pred1[0x100];
	_fp16 pred2[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x210 ; y< 0x610 ; y +=0x10){// 1080P, 4 slices
		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
//			p_frame_mb(pred1, in1, x, y, luma_index0, mvx1, mvy1, luma_type);
	get_luma(luma_type[luma_index0], pred1, in1, x + mvx1[0] + 8, y + mvy1[0] + 8);
	get_luma(luma_type[luma_index0 + 1], pred1, in1, x + mvx1[1] + 16, y + mvy1[1] + 16);
	get_luma(luma_type[luma_index0 + 2], pred1, in1, x + mvx1[2] + 8, y + mvy1[2] + 24);
	get_luma(luma_type[luma_index0 + 3], pred1, in1, x + mvx1[3] + 16, y + mvy1[3] + 32);
//			p_frame_mb(pred2, in2, x, y, luma_index1, mvx2, mvy2, luma_type);
	get_luma(luma_type[luma_index1], pred2, in2, x + mvx2[0] + 8, y + mvy2[0] + 8);
	get_luma(luma_type[luma_index1 + 1], pred2, in2, x + mvx2[1] + 16, y + mvy2[1] + 16);
	get_luma(luma_type[luma_index1 + 2], pred2, in2, x + mvx2[2] + 8, y + mvy2[2] + 24);
	get_luma(luma_type[luma_index1 + 3], pred2, in2, x + mvx2[3] + 16, y + mvy2[3] + 32);
//			for (UINT l= 0 ; l< 0x100 ;l++){
				{	// 4 
				_fp16 *pred1_ptr0 = &pred1[0];
				_fp16 *pred2_ptr1 = &pred2[0];
				pred1_ptr0[0x000] = 0.25*(pred1_ptr0[0x000] + 3* pred2_ptr1[0x000]);
				pred1_ptr0[0x001] = 0.25*(pred1_ptr0[0x001] + 3* pred2_ptr1[0x001]);
				pred1_ptr0[0x002] = 0.25*(pred1_ptr0[0x002] + 3* pred2_ptr1[0x002]);
				pred1_ptr0[0x003] = 0.25*(pred1_ptr0[0x003] + 3* pred2_ptr1[0x003]);
				pred1_ptr0[0x004] = 0.25*(pred1_ptr0[0x004] + 3* pred2_ptr1[0x004]);
				pred1_ptr0[0x005] = 0.25*(pred1_ptr0[0x005] + 3* pred2_ptr1[0x005]);
				pred1_ptr0[0x006] = 0.25*(pred1_ptr0[0x006] + 3* pred2_ptr1[0x006]);
				pred1_ptr0[0x007] = 0.25*(pred1_ptr0[0x007] + 3* pred2_ptr1[0x007]);
				pred1_ptr0[0x008] = 0.25*(pred1_ptr0[0x008] + 3* pred2_ptr1[0x008]);
				pred1_ptr0[0x009] = 0.25*(pred1_ptr0[0x009] + 3* pred2_ptr1[0x009]);
				pred1_ptr0[0x00a] = 0.25*(pred1_ptr0[0x00a] + 3* pred2_ptr1[0x00a]);
				pred1_ptr0[0x00b] = 0.25*(pred1_ptr0[0x00b] + 3* pred2_ptr1[0x00b]);
				pred1_ptr0[0x00c] = 0.25*(pred1_ptr0[0x00c] + 3* pred2_ptr1[0x00c]);
				pred1_ptr0[0x00d] = 0.25*(pred1_ptr0[0x00d] + 3* pred2_ptr1[0x00d]);
				pred1_ptr0[0x00e] = 0.25*(pred1_ptr0[0x00e] + 3* pred2_ptr1[0x00e]);
				pred1_ptr0[0x00f] = 0.25*(pred1_ptr0[0x00f] + 3* pred2_ptr1[0x00f]);
				pred1_ptr0[0x010] = 0.25*(pred1_ptr0[0x010] + 3* pred2_ptr1[0x010]);
				pred1_ptr0[0x011] = 0.25*(pred1_ptr0[0x011] + 3* pred2_ptr1[0x011]);
				pred1_ptr0[0x012] = 0.25*(pred1_ptr0[0x012] + 3* pred2_ptr1[0x012]);
				pred1_ptr0[0x013] = 0.25*(pred1_ptr0[0x013] + 3* pred2_ptr1[0x013]);
				pred1_ptr0[0x014] = 0.25*(pred1_ptr0[0x014] + 3* pred2_ptr1[0x014]);
				pred1_ptr0[0x015] = 0.25*(pred1_ptr0[0x015] + 3* pred2_ptr1[0x015]);
				pred1_ptr0[0x016] = 0.25*(pred1_ptr0[0x016] + 3* pred2_ptr1[0x016]);
				pred1_ptr0[0x017] = 0.25*(pred1_ptr0[0x017] + 3* pred2_ptr1[0x017]);
				pred1_ptr0[0x018] = 0.25*(pred1_ptr0[0x018] + 3* pred2_ptr1[0x018]);
				pred1_ptr0[0x019] = 0.25*(pred1_ptr0[0x019] + 3* pred2_ptr1[0x019]);
				pred1_ptr0[0x01a] = 0.25*(pred1_ptr0[0x01a] + 3* pred2_ptr1[0x01a]);
				pred1_ptr0[0x01b] = 0.25*(pred1_ptr0[0x01b] + 3* pred2_ptr1[0x01b]);
				pred1_ptr0[0x01c] = 0.25*(pred1_ptr0[0x01c] + 3* pred2_ptr1[0x01c]);
				pred1_ptr0[0x01d] = 0.25*(pred1_ptr0[0x01d] + 3* pred2_ptr1[0x01d]);
				pred1_ptr0[0x01e] = 0.25*(pred1_ptr0[0x01e] + 3* pred2_ptr1[0x01e]);
				pred1_ptr0[0x01f] = 0.25*(pred1_ptr0[0x01f] + 3* pred2_ptr1[0x01f]);
				pred1_ptr0[0x020] = 0.25*(pred1_ptr0[0x020] + 3* pred2_ptr1[0x020]);
				pred1_ptr0[0x021] = 0.25*(pred1_ptr0[0x021] + 3* pred2_ptr1[0x021]);
				pred1_ptr0[0x022] = 0.25*(pred1_ptr0[0x022] + 3* pred2_ptr1[0x022]);
				pred1_ptr0[0x023] = 0.25*(pred1_ptr0[0x023] + 3* pred2_ptr1[0x023]);
				pred1_ptr0[0x024] = 0.25*(pred1_ptr0[0x024] + 3* pred2_ptr1[0x024]);
				pred1_ptr0[0x025] = 0.25*(pred1_ptr0[0x025] + 3* pred2_ptr1[0x025]);
				pred1_ptr0[0x026] = 0.25*(pred1_ptr0[0x026] + 3* pred2_ptr1[0x026]);
				pred1_ptr0[0x027] = 0.25*(pred1_ptr0[0x027] + 3* pred2_ptr1[0x027]);
				pred1_ptr0[0x028] = 0.25*(pred1_ptr0[0x028] + 3* pred2_ptr1[0x028]);
				pred1_ptr0[0x029] = 0.25*(pred1_ptr0[0x029] + 3* pred2_ptr1[0x029]);
				pred1_ptr0[0x02a] = 0.25*(pred1_ptr0[0x02a] + 3* pred2_ptr1[0x02a]);
				pred1_ptr0[0x02b] = 0.25*(pred1_ptr0[0x02b] + 3* pred2_ptr1[0x02b]);
				pred1_ptr0[0x02c] = 0.25*(pred1_ptr0[0x02c] + 3* pred2_ptr1[0x02c]);
				pred1_ptr0[0x02d] = 0.25*(pred1_ptr0[0x02d] + 3* pred2_ptr1[0x02d]);
				pred1_ptr0[0x02e] = 0.25*(pred1_ptr0[0x02e] + 3* pred2_ptr1[0x02e]);
				pred1_ptr0[0x02f] = 0.25*(pred1_ptr0[0x02f] + 3* pred2_ptr1[0x02f]);
				pred1_ptr0[0x030] = 0.25*(pred1_ptr0[0x030] + 3* pred2_ptr1[0x030]);
				pred1_ptr0[0x031] = 0.25*(pred1_ptr0[0x031] + 3* pred2_ptr1[0x031]);
				pred1_ptr0[0x032] = 0.25*(pred1_ptr0[0x032] + 3* pred2_ptr1[0x032]);
				pred1_ptr0[0x033] = 0.25*(pred1_ptr0[0x033] + 3* pred2_ptr1[0x033]);
				pred1_ptr0[0x034] = 0.25*(pred1_ptr0[0x034] + 3* pred2_ptr1[0x034]);
				pred1_ptr0[0x035] = 0.25*(pred1_ptr0[0x035] + 3* pred2_ptr1[0x035]);
				pred1_ptr0[0x036] = 0.25*(pred1_ptr0[0x036] + 3* pred2_ptr1[0x036]);
				pred1_ptr0[0x037] = 0.25*(pred1_ptr0[0x037] + 3* pred2_ptr1[0x037]);
				pred1_ptr0[0x038] = 0.25*(pred1_ptr0[0x038] + 3* pred2_ptr1[0x038]);
				pred1_ptr0[0x039] = 0.25*(pred1_ptr0[0x039] + 3* pred2_ptr1[0x039]);
				pred1_ptr0[0x03a] = 0.25*(pred1_ptr0[0x03a] + 3* pred2_ptr1[0x03a]);
				pred1_ptr0[0x03b] = 0.25*(pred1_ptr0[0x03b] + 3* pred2_ptr1[0x03b]);
				pred1_ptr0[0x03c] = 0.25*(pred1_ptr0[0x03c] + 3* pred2_ptr1[0x03c]);
				pred1_ptr0[0x03d] = 0.25*(pred1_ptr0[0x03d] + 3* pred2_ptr1[0x03d]);
				pred1_ptr0[0x03e] = 0.25*(pred1_ptr0[0x03e] + 3* pred2_ptr1[0x03e]);
				pred1_ptr0[0x03f] = 0.25*(pred1_ptr0[0x03f] + 3* pred2_ptr1[0x03f]);
				pred1_ptr0[0x040] = 0.25*(pred1_ptr0[0x040] + 3* pred2_ptr1[0x040]);
				pred1_ptr0[0x041] = 0.25*(pred1_ptr0[0x041] + 3* pred2_ptr1[0x041]);
				pred1_ptr0[0x042] = 0.25*(pred1_ptr0[0x042] + 3* pred2_ptr1[0x042]);
				pred1_ptr0[0x043] = 0.25*(pred1_ptr0[0x043] + 3* pred2_ptr1[0x043]);
				pred1_ptr0[0x044] = 0.25*(pred1_ptr0[0x044] + 3* pred2_ptr1[0x044]);
				pred1_ptr0[0x045] = 0.25*(pred1_ptr0[0x045] + 3* pred2_ptr1[0x045]);
				pred1_ptr0[0x046] = 0.25*(pred1_ptr0[0x046] + 3* pred2_ptr1[0x046]);
				pred1_ptr0[0x047] = 0.25*(pred1_ptr0[0x047] + 3* pred2_ptr1[0x047]);
				pred1_ptr0[0x048] = 0.25*(pred1_ptr0[0x048] + 3* pred2_ptr1[0x048]);
				pred1_ptr0[0x049] = 0.25*(pred1_ptr0[0x049] + 3* pred2_ptr1[0x049]);
				pred1_ptr0[0x04a] = 0.25*(pred1_ptr0[0x04a] + 3* pred2_ptr1[0x04a]);
				pred1_ptr0[0x04b] = 0.25*(pred1_ptr0[0x04b] + 3* pred2_ptr1[0x04b]);
				pred1_ptr0[0x04c] = 0.25*(pred1_ptr0[0x04c] + 3* pred2_ptr1[0x04c]);
				pred1_ptr0[0x04d] = 0.25*(pred1_ptr0[0x04d] + 3* pred2_ptr1[0x04d]);
				pred1_ptr0[0x04e] = 0.25*(pred1_ptr0[0x04e] + 3* pred2_ptr1[0x04e]);
				pred1_ptr0[0x04f] = 0.25*(pred1_ptr0[0x04f] + 3* pred2_ptr1[0x04f]);
				pred1_ptr0[0x050] = 0.25*(pred1_ptr0[0x050] + 3* pred2_ptr1[0x050]);
				pred1_ptr0[0x051] = 0.25*(pred1_ptr0[0x051] + 3* pred2_ptr1[0x051]);
				pred1_ptr0[0x052] = 0.25*(pred1_ptr0[0x052] + 3* pred2_ptr1[0x052]);
				pred1_ptr0[0x053] = 0.25*(pred1_ptr0[0x053] + 3* pred2_ptr1[0x053]);
				pred1_ptr0[0x054] = 0.25*(pred1_ptr0[0x054] + 3* pred2_ptr1[0x054]);
				pred1_ptr0[0x055] = 0.25*(pred1_ptr0[0x055] + 3* pred2_ptr1[0x055]);
				pred1_ptr0[0x056] = 0.25*(pred1_ptr0[0x056] + 3* pred2_ptr1[0x056]);
				pred1_ptr0[0x057] = 0.25*(pred1_ptr0[0x057] + 3* pred2_ptr1[0x057]);
				pred1_ptr0[0x058] = 0.25*(pred1_ptr0[0x058] + 3* pred2_ptr1[0x058]);
				pred1_ptr0[0x059] = 0.25*(pred1_ptr0[0x059] + 3* pred2_ptr1[0x059]);
				pred1_ptr0[0x05a] = 0.25*(pred1_ptr0[0x05a] + 3* pred2_ptr1[0x05a]);
				pred1_ptr0[0x05b] = 0.25*(pred1_ptr0[0x05b] + 3* pred2_ptr1[0x05b]);
				pred1_ptr0[0x05c] = 0.25*(pred1_ptr0[0x05c] + 3* pred2_ptr1[0x05c]);
				pred1_ptr0[0x05d] = 0.25*(pred1_ptr0[0x05d] + 3* pred2_ptr1[0x05d]);
				pred1_ptr0[0x05e] = 0.25*(pred1_ptr0[0x05e] + 3* pred2_ptr1[0x05e]);
				pred1_ptr0[0x05f] = 0.25*(pred1_ptr0[0x05f] + 3* pred2_ptr1[0x05f]);
				pred1_ptr0[0x060] = 0.25*(pred1_ptr0[0x060] + 3* pred2_ptr1[0x060]);
				pred1_ptr0[0x061] = 0.25*(pred1_ptr0[0x061] + 3* pred2_ptr1[0x061]);
				pred1_ptr0[0x062] = 0.25*(pred1_ptr0[0x062] + 3* pred2_ptr1[0x062]);
				pred1_ptr0[0x063] = 0.25*(pred1_ptr0[0x063] + 3* pred2_ptr1[0x063]);
				pred1_ptr0[0x064] = 0.25*(pred1_ptr0[0x064] + 3* pred2_ptr1[0x064]);
				pred1_ptr0[0x065] = 0.25*(pred1_ptr0[0x065] + 3* pred2_ptr1[0x065]);
				pred1_ptr0[0x066] = 0.25*(pred1_ptr0[0x066] + 3* pred2_ptr1[0x066]);
				pred1_ptr0[0x067] = 0.25*(pred1_ptr0[0x067] + 3* pred2_ptr1[0x067]);
				pred1_ptr0[0x068] = 0.25*(pred1_ptr0[0x068] + 3* pred2_ptr1[0x068]);
				pred1_ptr0[0x069] = 0.25*(pred1_ptr0[0x069] + 3* pred2_ptr1[0x069]);
				pred1_ptr0[0x06a] = 0.25*(pred1_ptr0[0x06a] + 3* pred2_ptr1[0x06a]);
				pred1_ptr0[0x06b] = 0.25*(pred1_ptr0[0x06b] + 3* pred2_ptr1[0x06b]);
				pred1_ptr0[0x06c] = 0.25*(pred1_ptr0[0x06c] + 3* pred2_ptr1[0x06c]);
				pred1_ptr0[0x06d] = 0.25*(pred1_ptr0[0x06d] + 3* pred2_ptr1[0x06d]);
				pred1_ptr0[0x06e] = 0.25*(pred1_ptr0[0x06e] + 3* pred2_ptr1[0x06e]);
				pred1_ptr0[0x06f] = 0.25*(pred1_ptr0[0x06f] + 3* pred2_ptr1[0x06f]);
				pred1_ptr0[0x070] = 0.25*(pred1_ptr0[0x070] + 3* pred2_ptr1[0x070]);
				pred1_ptr0[0x071] = 0.25*(pred1_ptr0[0x071] + 3* pred2_ptr1[0x071]);
				pred1_ptr0[0x072] = 0.25*(pred1_ptr0[0x072] + 3* pred2_ptr1[0x072]);
				pred1_ptr0[0x073] = 0.25*(pred1_ptr0[0x073] + 3* pred2_ptr1[0x073]);
				pred1_ptr0[0x074] = 0.25*(pred1_ptr0[0x074] + 3* pred2_ptr1[0x074]);
				pred1_ptr0[0x075] = 0.25*(pred1_ptr0[0x075] + 3* pred2_ptr1[0x075]);
				pred1_ptr0[0x076] = 0.25*(pred1_ptr0[0x076] + 3* pred2_ptr1[0x076]);
				pred1_ptr0[0x077] = 0.25*(pred1_ptr0[0x077] + 3* pred2_ptr1[0x077]);
				pred1_ptr0[0x078] = 0.25*(pred1_ptr0[0x078] + 3* pred2_ptr1[0x078]);
				pred1_ptr0[0x079] = 0.25*(pred1_ptr0[0x079] + 3* pred2_ptr1[0x079]);
				pred1_ptr0[0x07a] = 0.25*(pred1_ptr0[0x07a] + 3* pred2_ptr1[0x07a]);
				pred1_ptr0[0x07b] = 0.25*(pred1_ptr0[0x07b] + 3* pred2_ptr1[0x07b]);
				pred1_ptr0[0x07c] = 0.25*(pred1_ptr0[0x07c] + 3* pred2_ptr1[0x07c]);
				pred1_ptr0[0x07d] = 0.25*(pred1_ptr0[0x07d] + 3* pred2_ptr1[0x07d]);
				pred1_ptr0[0x07e] = 0.25*(pred1_ptr0[0x07e] + 3* pred2_ptr1[0x07e]);
				pred1_ptr0[0x07f] = 0.25*(pred1_ptr0[0x07f] + 3* pred2_ptr1[0x07f]);
				pred1_ptr0[0x080] = 0.25*(pred1_ptr0[0x080] + 3* pred2_ptr1[0x080]);
				pred1_ptr0[0x081] = 0.25*(pred1_ptr0[0x081] + 3* pred2_ptr1[0x081]);
				pred1_ptr0[0x082] = 0.25*(pred1_ptr0[0x082] + 3* pred2_ptr1[0x082]);
				pred1_ptr0[0x083] = 0.25*(pred1_ptr0[0x083] + 3* pred2_ptr1[0x083]);
				pred1_ptr0[0x084] = 0.25*(pred1_ptr0[0x084] + 3* pred2_ptr1[0x084]);
				pred1_ptr0[0x085] = 0.25*(pred1_ptr0[0x085] + 3* pred2_ptr1[0x085]);
				pred1_ptr0[0x086] = 0.25*(pred1_ptr0[0x086] + 3* pred2_ptr1[0x086]);
				pred1_ptr0[0x087] = 0.25*(pred1_ptr0[0x087] + 3* pred2_ptr1[0x087]);
				pred1_ptr0[0x088] = 0.25*(pred1_ptr0[0x088] + 3* pred2_ptr1[0x088]);
				pred1_ptr0[0x089] = 0.25*(pred1_ptr0[0x089] + 3* pred2_ptr1[0x089]);
				pred1_ptr0[0x08a] = 0.25*(pred1_ptr0[0x08a] + 3* pred2_ptr1[0x08a]);
				pred1_ptr0[0x08b] = 0.25*(pred1_ptr0[0x08b] + 3* pred2_ptr1[0x08b]);
				pred1_ptr0[0x08c] = 0.25*(pred1_ptr0[0x08c] + 3* pred2_ptr1[0x08c]);
				pred1_ptr0[0x08d] = 0.25*(pred1_ptr0[0x08d] + 3* pred2_ptr1[0x08d]);
				pred1_ptr0[0x08e] = 0.25*(pred1_ptr0[0x08e] + 3* pred2_ptr1[0x08e]);
				pred1_ptr0[0x08f] = 0.25*(pred1_ptr0[0x08f] + 3* pred2_ptr1[0x08f]);
				pred1_ptr0[0x090] = 0.25*(pred1_ptr0[0x090] + 3* pred2_ptr1[0x090]);
				pred1_ptr0[0x091] = 0.25*(pred1_ptr0[0x091] + 3* pred2_ptr1[0x091]);
				pred1_ptr0[0x092] = 0.25*(pred1_ptr0[0x092] + 3* pred2_ptr1[0x092]);
				pred1_ptr0[0x093] = 0.25*(pred1_ptr0[0x093] + 3* pred2_ptr1[0x093]);
				pred1_ptr0[0x094] = 0.25*(pred1_ptr0[0x094] + 3* pred2_ptr1[0x094]);
				pred1_ptr0[0x095] = 0.25*(pred1_ptr0[0x095] + 3* pred2_ptr1[0x095]);
				pred1_ptr0[0x096] = 0.25*(pred1_ptr0[0x096] + 3* pred2_ptr1[0x096]);
				pred1_ptr0[0x097] = 0.25*(pred1_ptr0[0x097] + 3* pred2_ptr1[0x097]);
				pred1_ptr0[0x098] = 0.25*(pred1_ptr0[0x098] + 3* pred2_ptr1[0x098]);
				pred1_ptr0[0x099] = 0.25*(pred1_ptr0[0x099] + 3* pred2_ptr1[0x099]);
				pred1_ptr0[0x09a] = 0.25*(pred1_ptr0[0x09a] + 3* pred2_ptr1[0x09a]);
				pred1_ptr0[0x09b] = 0.25*(pred1_ptr0[0x09b] + 3* pred2_ptr1[0x09b]);
				pred1_ptr0[0x09c] = 0.25*(pred1_ptr0[0x09c] + 3* pred2_ptr1[0x09c]);
				pred1_ptr0[0x09d] = 0.25*(pred1_ptr0[0x09d] + 3* pred2_ptr1[0x09d]);
				pred1_ptr0[0x09e] = 0.25*(pred1_ptr0[0x09e] + 3* pred2_ptr1[0x09e]);
				pred1_ptr0[0x09f] = 0.25*(pred1_ptr0[0x09f] + 3* pred2_ptr1[0x09f]);
				pred1_ptr0[0x0a0] = 0.25*(pred1_ptr0[0x0a0] + 3* pred2_ptr1[0x0a0]);
				pred1_ptr0[0x0a1] = 0.25*(pred1_ptr0[0x0a1] + 3* pred2_ptr1[0x0a1]);
				pred1_ptr0[0x0a2] = 0.25*(pred1_ptr0[0x0a2] + 3* pred2_ptr1[0x0a2]);
				pred1_ptr0[0x0a3] = 0.25*(pred1_ptr0[0x0a3] + 3* pred2_ptr1[0x0a3]);
				pred1_ptr0[0x0a4] = 0.25*(pred1_ptr0[0x0a4] + 3* pred2_ptr1[0x0a4]);
				pred1_ptr0[0x0a5] = 0.25*(pred1_ptr0[0x0a5] + 3* pred2_ptr1[0x0a5]);
				pred1_ptr0[0x0a6] = 0.25*(pred1_ptr0[0x0a6] + 3* pred2_ptr1[0x0a6]);
				pred1_ptr0[0x0a7] = 0.25*(pred1_ptr0[0x0a7] + 3* pred2_ptr1[0x0a7]);
				pred1_ptr0[0x0a8] = 0.25*(pred1_ptr0[0x0a8] + 3* pred2_ptr1[0x0a8]);
				pred1_ptr0[0x0a9] = 0.25*(pred1_ptr0[0x0a9] + 3* pred2_ptr1[0x0a9]);
				pred1_ptr0[0x0aa] = 0.25*(pred1_ptr0[0x0aa] + 3* pred2_ptr1[0x0aa]);
				pred1_ptr0[0x0ab] = 0.25*(pred1_ptr0[0x0ab] + 3* pred2_ptr1[0x0ab]);
				pred1_ptr0[0x0ac] = 0.25*(pred1_ptr0[0x0ac] + 3* pred2_ptr1[0x0ac]);
				pred1_ptr0[0x0ad] = 0.25*(pred1_ptr0[0x0ad] + 3* pred2_ptr1[0x0ad]);
				pred1_ptr0[0x0ae] = 0.25*(pred1_ptr0[0x0ae] + 3* pred2_ptr1[0x0ae]);
				pred1_ptr0[0x0af] = 0.25*(pred1_ptr0[0x0af] + 3* pred2_ptr1[0x0af]);
				pred1_ptr0[0x0b0] = 0.25*(pred1_ptr0[0x0b0] + 3* pred2_ptr1[0x0b0]);
				pred1_ptr0[0x0b1] = 0.25*(pred1_ptr0[0x0b1] + 3* pred2_ptr1[0x0b1]);
				pred1_ptr0[0x0b2] = 0.25*(pred1_ptr0[0x0b2] + 3* pred2_ptr1[0x0b2]);
				pred1_ptr0[0x0b3] = 0.25*(pred1_ptr0[0x0b3] + 3* pred2_ptr1[0x0b3]);
				pred1_ptr0[0x0b4] = 0.25*(pred1_ptr0[0x0b4] + 3* pred2_ptr1[0x0b4]);
				pred1_ptr0[0x0b5] = 0.25*(pred1_ptr0[0x0b5] + 3* pred2_ptr1[0x0b5]);
				pred1_ptr0[0x0b6] = 0.25*(pred1_ptr0[0x0b6] + 3* pred2_ptr1[0x0b6]);
				pred1_ptr0[0x0b7] = 0.25*(pred1_ptr0[0x0b7] + 3* pred2_ptr1[0x0b7]);
				pred1_ptr0[0x0b8] = 0.25*(pred1_ptr0[0x0b8] + 3* pred2_ptr1[0x0b8]);
				pred1_ptr0[0x0b9] = 0.25*(pred1_ptr0[0x0b9] + 3* pred2_ptr1[0x0b9]);
				pred1_ptr0[0x0ba] = 0.25*(pred1_ptr0[0x0ba] + 3* pred2_ptr1[0x0ba]);
				pred1_ptr0[0x0bb] = 0.25*(pred1_ptr0[0x0bb] + 3* pred2_ptr1[0x0bb]);
				pred1_ptr0[0x0bc] = 0.25*(pred1_ptr0[0x0bc] + 3* pred2_ptr1[0x0bc]);
				pred1_ptr0[0x0bd] = 0.25*(pred1_ptr0[0x0bd] + 3* pred2_ptr1[0x0bd]);
				pred1_ptr0[0x0be] = 0.25*(pred1_ptr0[0x0be] + 3* pred2_ptr1[0x0be]);
				pred1_ptr0[0x0bf] = 0.25*(pred1_ptr0[0x0bf] + 3* pred2_ptr1[0x0bf]);
				pred1_ptr0[0x0c0] = 0.25*(pred1_ptr0[0x0c0] + 3* pred2_ptr1[0x0c0]);
				pred1_ptr0[0x0c1] = 0.25*(pred1_ptr0[0x0c1] + 3* pred2_ptr1[0x0c1]);
				pred1_ptr0[0x0c2] = 0.25*(pred1_ptr0[0x0c2] + 3* pred2_ptr1[0x0c2]);
				pred1_ptr0[0x0c3] = 0.25*(pred1_ptr0[0x0c3] + 3* pred2_ptr1[0x0c3]);
				pred1_ptr0[0x0c4] = 0.25*(pred1_ptr0[0x0c4] + 3* pred2_ptr1[0x0c4]);
				pred1_ptr0[0x0c5] = 0.25*(pred1_ptr0[0x0c5] + 3* pred2_ptr1[0x0c5]);
				pred1_ptr0[0x0c6] = 0.25*(pred1_ptr0[0x0c6] + 3* pred2_ptr1[0x0c6]);
				pred1_ptr0[0x0c7] = 0.25*(pred1_ptr0[0x0c7] + 3* pred2_ptr1[0x0c7]);
				pred1_ptr0[0x0c8] = 0.25*(pred1_ptr0[0x0c8] + 3* pred2_ptr1[0x0c8]);
				pred1_ptr0[0x0c9] = 0.25*(pred1_ptr0[0x0c9] + 3* pred2_ptr1[0x0c9]);
				pred1_ptr0[0x0ca] = 0.25*(pred1_ptr0[0x0ca] + 3* pred2_ptr1[0x0ca]);
				pred1_ptr0[0x0cb] = 0.25*(pred1_ptr0[0x0cb] + 3* pred2_ptr1[0x0cb]);
				pred1_ptr0[0x0cc] = 0.25*(pred1_ptr0[0x0cc] + 3* pred2_ptr1[0x0cc]);
				pred1_ptr0[0x0cd] = 0.25*(pred1_ptr0[0x0cd] + 3* pred2_ptr1[0x0cd]);
				pred1_ptr0[0x0ce] = 0.25*(pred1_ptr0[0x0ce] + 3* pred2_ptr1[0x0ce]);
				pred1_ptr0[0x0cf] = 0.25*(pred1_ptr0[0x0cf] + 3* pred2_ptr1[0x0cf]);
				pred1_ptr0[0x0d0] = 0.25*(pred1_ptr0[0x0d0] + 3* pred2_ptr1[0x0d0]);
				pred1_ptr0[0x0d1] = 0.25*(pred1_ptr0[0x0d1] + 3* pred2_ptr1[0x0d1]);
				pred1_ptr0[0x0d2] = 0.25*(pred1_ptr0[0x0d2] + 3* pred2_ptr1[0x0d2]);
				pred1_ptr0[0x0d3] = 0.25*(pred1_ptr0[0x0d3] + 3* pred2_ptr1[0x0d3]);
				pred1_ptr0[0x0d4] = 0.25*(pred1_ptr0[0x0d4] + 3* pred2_ptr1[0x0d4]);
				pred1_ptr0[0x0d5] = 0.25*(pred1_ptr0[0x0d5] + 3* pred2_ptr1[0x0d5]);
				pred1_ptr0[0x0d6] = 0.25*(pred1_ptr0[0x0d6] + 3* pred2_ptr1[0x0d6]);
				pred1_ptr0[0x0d7] = 0.25*(pred1_ptr0[0x0d7] + 3* pred2_ptr1[0x0d7]);
				pred1_ptr0[0x0d8] = 0.25*(pred1_ptr0[0x0d8] + 3* pred2_ptr1[0x0d8]);
				pred1_ptr0[0x0d9] = 0.25*(pred1_ptr0[0x0d9] + 3* pred2_ptr1[0x0d9]);
				pred1_ptr0[0x0da] = 0.25*(pred1_ptr0[0x0da] + 3* pred2_ptr1[0x0da]);
				pred1_ptr0[0x0db] = 0.25*(pred1_ptr0[0x0db] + 3* pred2_ptr1[0x0db]);
				pred1_ptr0[0x0dc] = 0.25*(pred1_ptr0[0x0dc] + 3* pred2_ptr1[0x0dc]);
				pred1_ptr0[0x0dd] = 0.25*(pred1_ptr0[0x0dd] + 3* pred2_ptr1[0x0dd]);
				pred1_ptr0[0x0de] = 0.25*(pred1_ptr0[0x0de] + 3* pred2_ptr1[0x0de]);
				pred1_ptr0[0x0df] = 0.25*(pred1_ptr0[0x0df] + 3* pred2_ptr1[0x0df]);
				pred1_ptr0[0x0e0] = 0.25*(pred1_ptr0[0x0e0] + 3* pred2_ptr1[0x0e0]);
				pred1_ptr0[0x0e1] = 0.25*(pred1_ptr0[0x0e1] + 3* pred2_ptr1[0x0e1]);
				pred1_ptr0[0x0e2] = 0.25*(pred1_ptr0[0x0e2] + 3* pred2_ptr1[0x0e2]);
				pred1_ptr0[0x0e3] = 0.25*(pred1_ptr0[0x0e3] + 3* pred2_ptr1[0x0e3]);
				pred1_ptr0[0x0e4] = 0.25*(pred1_ptr0[0x0e4] + 3* pred2_ptr1[0x0e4]);
				pred1_ptr0[0x0e5] = 0.25*(pred1_ptr0[0x0e5] + 3* pred2_ptr1[0x0e5]);
				pred1_ptr0[0x0e6] = 0.25*(pred1_ptr0[0x0e6] + 3* pred2_ptr1[0x0e6]);
				pred1_ptr0[0x0e7] = 0.25*(pred1_ptr0[0x0e7] + 3* pred2_ptr1[0x0e7]);
				pred1_ptr0[0x0e8] = 0.25*(pred1_ptr0[0x0e8] + 3* pred2_ptr1[0x0e8]);
				pred1_ptr0[0x0e9] = 0.25*(pred1_ptr0[0x0e9] + 3* pred2_ptr1[0x0e9]);
				pred1_ptr0[0x0ea] = 0.25*(pred1_ptr0[0x0ea] + 3* pred2_ptr1[0x0ea]);
				pred1_ptr0[0x0eb] = 0.25*(pred1_ptr0[0x0eb] + 3* pred2_ptr1[0x0eb]);
				pred1_ptr0[0x0ec] = 0.25*(pred1_ptr0[0x0ec] + 3* pred2_ptr1[0x0ec]);
				pred1_ptr0[0x0ed] = 0.25*(pred1_ptr0[0x0ed] + 3* pred2_ptr1[0x0ed]);
				pred1_ptr0[0x0ee] = 0.25*(pred1_ptr0[0x0ee] + 3* pred2_ptr1[0x0ee]);
				pred1_ptr0[0x0ef] = 0.25*(pred1_ptr0[0x0ef] + 3* pred2_ptr1[0x0ef]);
				pred1_ptr0[0x0f0] = 0.25*(pred1_ptr0[0x0f0] + 3* pred2_ptr1[0x0f0]);
				pred1_ptr0[0x0f1] = 0.25*(pred1_ptr0[0x0f1] + 3* pred2_ptr1[0x0f1]);
				pred1_ptr0[0x0f2] = 0.25*(pred1_ptr0[0x0f2] + 3* pred2_ptr1[0x0f2]);
				pred1_ptr0[0x0f3] = 0.25*(pred1_ptr0[0x0f3] + 3* pred2_ptr1[0x0f3]);
				pred1_ptr0[0x0f4] = 0.25*(pred1_ptr0[0x0f4] + 3* pred2_ptr1[0x0f4]);
				pred1_ptr0[0x0f5] = 0.25*(pred1_ptr0[0x0f5] + 3* pred2_ptr1[0x0f5]);
				pred1_ptr0[0x0f6] = 0.25*(pred1_ptr0[0x0f6] + 3* pred2_ptr1[0x0f6]);
				pred1_ptr0[0x0f7] = 0.25*(pred1_ptr0[0x0f7] + 3* pred2_ptr1[0x0f7]);
				pred1_ptr0[0x0f8] = 0.25*(pred1_ptr0[0x0f8] + 3* pred2_ptr1[0x0f8]);
				pred1_ptr0[0x0f9] = 0.25*(pred1_ptr0[0x0f9] + 3* pred2_ptr1[0x0f9]);
				pred1_ptr0[0x0fa] = 0.25*(pred1_ptr0[0x0fa] + 3* pred2_ptr1[0x0fa]);
				pred1_ptr0[0x0fb] = 0.25*(pred1_ptr0[0x0fb] + 3* pred2_ptr1[0x0fb]);
				pred1_ptr0[0x0fc] = 0.25*(pred1_ptr0[0x0fc] + 3* pred2_ptr1[0x0fc]);
				pred1_ptr0[0x0fd] = 0.25*(pred1_ptr0[0x0fd] + 3* pred2_ptr1[0x0fd]);
				pred1_ptr0[0x0fe] = 0.25*(pred1_ptr0[0x0fe] + 3* pred2_ptr1[0x0fe]);
				pred1_ptr0[0x0ff] = 0.25*(pred1_ptr0[0x0ff] + 3* pred2_ptr1[0x0ff]);
			}
		
			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,8);
			luma_index0 = ((luma_index0 + 4)&0x0f);
			luma_index1 = ((luma_index1 + 4)&0x0f);
		}
	}
}
void b_frame_x_x_x_0_0x00400_x_x_x_x_x_x_12_0(_fp16 *out, _fp16 *in1, _fp16 *in2, INT8 *mvx1, INT8 *mvy1, INT8 *mvx2, INT8 *mvy2, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index0 = 12 ;
	UINT8 luma_index1 = 0 ;
	_fp16 pred1[0x100];
	_fp16 pred2[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x410 ; y< 0x810 ; y +=0x10){// 1080P, 4 slices
		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
//			p_frame_mb(pred1, in1, x, y, luma_index0, mvx1, mvy1, luma_type);
	get_luma(luma_type[luma_index0], pred1, in1, x + mvx1[0] + 8, y + mvy1[0] + 8);
	get_luma(luma_type[luma_index0 + 1], pred1, in1, x + mvx1[1] + 16, y + mvy1[1] + 16);
	get_luma(luma_type[luma_index0 + 2], pred1, in1, x + mvx1[2] + 8, y + mvy1[2] + 24);
	get_luma(luma_type[luma_index0 + 3], pred1, in1, x + mvx1[3] + 16, y + mvy1[3] + 32);
//			p_frame_mb(pred2, in2, x, y, luma_index1, mvx2, mvy2, luma_type);
	get_luma(luma_type[luma_index1], pred2, in2, x + mvx2[0] + 8, y + mvy2[0] + 8);
	get_luma(luma_type[luma_index1 + 1], pred2, in2, x + mvx2[1] + 16, y + mvy2[1] + 16);
	get_luma(luma_type[luma_index1 + 2], pred2, in2, x + mvx2[2] + 8, y + mvy2[2] + 24);
	get_luma(luma_type[luma_index1 + 3], pred2, in2, x + mvx2[3] + 16, y + mvy2[3] + 32);
//			for (UINT l= 0 ; l< 0x100 ;l++){
				{	// 4 
				_fp16 *pred1_ptr0 = &pred1[0];
				_fp16 *pred2_ptr1 = &pred2[0];
				pred1_ptr0[0x000] = 0.25*(pred1_ptr0[0x000] + 3* pred2_ptr1[0x000]);
				pred1_ptr0[0x001] = 0.25*(pred1_ptr0[0x001] + 3* pred2_ptr1[0x001]);
				pred1_ptr0[0x002] = 0.25*(pred1_ptr0[0x002] + 3* pred2_ptr1[0x002]);
				pred1_ptr0[0x003] = 0.25*(pred1_ptr0[0x003] + 3* pred2_ptr1[0x003]);
				pred1_ptr0[0x004] = 0.25*(pred1_ptr0[0x004] + 3* pred2_ptr1[0x004]);
				pred1_ptr0[0x005] = 0.25*(pred1_ptr0[0x005] + 3* pred2_ptr1[0x005]);
				pred1_ptr0[0x006] = 0.25*(pred1_ptr0[0x006] + 3* pred2_ptr1[0x006]);
				pred1_ptr0[0x007] = 0.25*(pred1_ptr0[0x007] + 3* pred2_ptr1[0x007]);
				pred1_ptr0[0x008] = 0.25*(pred1_ptr0[0x008] + 3* pred2_ptr1[0x008]);
				pred1_ptr0[0x009] = 0.25*(pred1_ptr0[0x009] + 3* pred2_ptr1[0x009]);
				pred1_ptr0[0x00a] = 0.25*(pred1_ptr0[0x00a] + 3* pred2_ptr1[0x00a]);
				pred1_ptr0[0x00b] = 0.25*(pred1_ptr0[0x00b] + 3* pred2_ptr1[0x00b]);
				pred1_ptr0[0x00c] = 0.25*(pred1_ptr0[0x00c] + 3* pred2_ptr1[0x00c]);
				pred1_ptr0[0x00d] = 0.25*(pred1_ptr0[0x00d] + 3* pred2_ptr1[0x00d]);
				pred1_ptr0[0x00e] = 0.25*(pred1_ptr0[0x00e] + 3* pred2_ptr1[0x00e]);
				pred1_ptr0[0x00f] = 0.25*(pred1_ptr0[0x00f] + 3* pred2_ptr1[0x00f]);
				pred1_ptr0[0x010] = 0.25*(pred1_ptr0[0x010] + 3* pred2_ptr1[0x010]);
				pred1_ptr0[0x011] = 0.25*(pred1_ptr0[0x011] + 3* pred2_ptr1[0x011]);
				pred1_ptr0[0x012] = 0.25*(pred1_ptr0[0x012] + 3* pred2_ptr1[0x012]);
				pred1_ptr0[0x013] = 0.25*(pred1_ptr0[0x013] + 3* pred2_ptr1[0x013]);
				pred1_ptr0[0x014] = 0.25*(pred1_ptr0[0x014] + 3* pred2_ptr1[0x014]);
				pred1_ptr0[0x015] = 0.25*(pred1_ptr0[0x015] + 3* pred2_ptr1[0x015]);
				pred1_ptr0[0x016] = 0.25*(pred1_ptr0[0x016] + 3* pred2_ptr1[0x016]);
				pred1_ptr0[0x017] = 0.25*(pred1_ptr0[0x017] + 3* pred2_ptr1[0x017]);
				pred1_ptr0[0x018] = 0.25*(pred1_ptr0[0x018] + 3* pred2_ptr1[0x018]);
				pred1_ptr0[0x019] = 0.25*(pred1_ptr0[0x019] + 3* pred2_ptr1[0x019]);
				pred1_ptr0[0x01a] = 0.25*(pred1_ptr0[0x01a] + 3* pred2_ptr1[0x01a]);
				pred1_ptr0[0x01b] = 0.25*(pred1_ptr0[0x01b] + 3* pred2_ptr1[0x01b]);
				pred1_ptr0[0x01c] = 0.25*(pred1_ptr0[0x01c] + 3* pred2_ptr1[0x01c]);
				pred1_ptr0[0x01d] = 0.25*(pred1_ptr0[0x01d] + 3* pred2_ptr1[0x01d]);
				pred1_ptr0[0x01e] = 0.25*(pred1_ptr0[0x01e] + 3* pred2_ptr1[0x01e]);
				pred1_ptr0[0x01f] = 0.25*(pred1_ptr0[0x01f] + 3* pred2_ptr1[0x01f]);
				pred1_ptr0[0x020] = 0.25*(pred1_ptr0[0x020] + 3* pred2_ptr1[0x020]);
				pred1_ptr0[0x021] = 0.25*(pred1_ptr0[0x021] + 3* pred2_ptr1[0x021]);
				pred1_ptr0[0x022] = 0.25*(pred1_ptr0[0x022] + 3* pred2_ptr1[0x022]);
				pred1_ptr0[0x023] = 0.25*(pred1_ptr0[0x023] + 3* pred2_ptr1[0x023]);
				pred1_ptr0[0x024] = 0.25*(pred1_ptr0[0x024] + 3* pred2_ptr1[0x024]);
				pred1_ptr0[0x025] = 0.25*(pred1_ptr0[0x025] + 3* pred2_ptr1[0x025]);
				pred1_ptr0[0x026] = 0.25*(pred1_ptr0[0x026] + 3* pred2_ptr1[0x026]);
				pred1_ptr0[0x027] = 0.25*(pred1_ptr0[0x027] + 3* pred2_ptr1[0x027]);
				pred1_ptr0[0x028] = 0.25*(pred1_ptr0[0x028] + 3* pred2_ptr1[0x028]);
				pred1_ptr0[0x029] = 0.25*(pred1_ptr0[0x029] + 3* pred2_ptr1[0x029]);
				pred1_ptr0[0x02a] = 0.25*(pred1_ptr0[0x02a] + 3* pred2_ptr1[0x02a]);
				pred1_ptr0[0x02b] = 0.25*(pred1_ptr0[0x02b] + 3* pred2_ptr1[0x02b]);
				pred1_ptr0[0x02c] = 0.25*(pred1_ptr0[0x02c] + 3* pred2_ptr1[0x02c]);
				pred1_ptr0[0x02d] = 0.25*(pred1_ptr0[0x02d] + 3* pred2_ptr1[0x02d]);
				pred1_ptr0[0x02e] = 0.25*(pred1_ptr0[0x02e] + 3* pred2_ptr1[0x02e]);
				pred1_ptr0[0x02f] = 0.25*(pred1_ptr0[0x02f] + 3* pred2_ptr1[0x02f]);
				pred1_ptr0[0x030] = 0.25*(pred1_ptr0[0x030] + 3* pred2_ptr1[0x030]);
				pred1_ptr0[0x031] = 0.25*(pred1_ptr0[0x031] + 3* pred2_ptr1[0x031]);
				pred1_ptr0[0x032] = 0.25*(pred1_ptr0[0x032] + 3* pred2_ptr1[0x032]);
				pred1_ptr0[0x033] = 0.25*(pred1_ptr0[0x033] + 3* pred2_ptr1[0x033]);
				pred1_ptr0[0x034] = 0.25*(pred1_ptr0[0x034] + 3* pred2_ptr1[0x034]);
				pred1_ptr0[0x035] = 0.25*(pred1_ptr0[0x035] + 3* pred2_ptr1[0x035]);
				pred1_ptr0[0x036] = 0.25*(pred1_ptr0[0x036] + 3* pred2_ptr1[0x036]);
				pred1_ptr0[0x037] = 0.25*(pred1_ptr0[0x037] + 3* pred2_ptr1[0x037]);
				pred1_ptr0[0x038] = 0.25*(pred1_ptr0[0x038] + 3* pred2_ptr1[0x038]);
				pred1_ptr0[0x039] = 0.25*(pred1_ptr0[0x039] + 3* pred2_ptr1[0x039]);
				pred1_ptr0[0x03a] = 0.25*(pred1_ptr0[0x03a] + 3* pred2_ptr1[0x03a]);
				pred1_ptr0[0x03b] = 0.25*(pred1_ptr0[0x03b] + 3* pred2_ptr1[0x03b]);
				pred1_ptr0[0x03c] = 0.25*(pred1_ptr0[0x03c] + 3* pred2_ptr1[0x03c]);
				pred1_ptr0[0x03d] = 0.25*(pred1_ptr0[0x03d] + 3* pred2_ptr1[0x03d]);
				pred1_ptr0[0x03e] = 0.25*(pred1_ptr0[0x03e] + 3* pred2_ptr1[0x03e]);
				pred1_ptr0[0x03f] = 0.25*(pred1_ptr0[0x03f] + 3* pred2_ptr1[0x03f]);
				pred1_ptr0[0x040] = 0.25*(pred1_ptr0[0x040] + 3* pred2_ptr1[0x040]);
				pred1_ptr0[0x041] = 0.25*(pred1_ptr0[0x041] + 3* pred2_ptr1[0x041]);
				pred1_ptr0[0x042] = 0.25*(pred1_ptr0[0x042] + 3* pred2_ptr1[0x042]);
				pred1_ptr0[0x043] = 0.25*(pred1_ptr0[0x043] + 3* pred2_ptr1[0x043]);
				pred1_ptr0[0x044] = 0.25*(pred1_ptr0[0x044] + 3* pred2_ptr1[0x044]);
				pred1_ptr0[0x045] = 0.25*(pred1_ptr0[0x045] + 3* pred2_ptr1[0x045]);
				pred1_ptr0[0x046] = 0.25*(pred1_ptr0[0x046] + 3* pred2_ptr1[0x046]);
				pred1_ptr0[0x047] = 0.25*(pred1_ptr0[0x047] + 3* pred2_ptr1[0x047]);
				pred1_ptr0[0x048] = 0.25*(pred1_ptr0[0x048] + 3* pred2_ptr1[0x048]);
				pred1_ptr0[0x049] = 0.25*(pred1_ptr0[0x049] + 3* pred2_ptr1[0x049]);
				pred1_ptr0[0x04a] = 0.25*(pred1_ptr0[0x04a] + 3* pred2_ptr1[0x04a]);
				pred1_ptr0[0x04b] = 0.25*(pred1_ptr0[0x04b] + 3* pred2_ptr1[0x04b]);
				pred1_ptr0[0x04c] = 0.25*(pred1_ptr0[0x04c] + 3* pred2_ptr1[0x04c]);
				pred1_ptr0[0x04d] = 0.25*(pred1_ptr0[0x04d] + 3* pred2_ptr1[0x04d]);
				pred1_ptr0[0x04e] = 0.25*(pred1_ptr0[0x04e] + 3* pred2_ptr1[0x04e]);
				pred1_ptr0[0x04f] = 0.25*(pred1_ptr0[0x04f] + 3* pred2_ptr1[0x04f]);
				pred1_ptr0[0x050] = 0.25*(pred1_ptr0[0x050] + 3* pred2_ptr1[0x050]);
				pred1_ptr0[0x051] = 0.25*(pred1_ptr0[0x051] + 3* pred2_ptr1[0x051]);
				pred1_ptr0[0x052] = 0.25*(pred1_ptr0[0x052] + 3* pred2_ptr1[0x052]);
				pred1_ptr0[0x053] = 0.25*(pred1_ptr0[0x053] + 3* pred2_ptr1[0x053]);
				pred1_ptr0[0x054] = 0.25*(pred1_ptr0[0x054] + 3* pred2_ptr1[0x054]);
				pred1_ptr0[0x055] = 0.25*(pred1_ptr0[0x055] + 3* pred2_ptr1[0x055]);
				pred1_ptr0[0x056] = 0.25*(pred1_ptr0[0x056] + 3* pred2_ptr1[0x056]);
				pred1_ptr0[0x057] = 0.25*(pred1_ptr0[0x057] + 3* pred2_ptr1[0x057]);
				pred1_ptr0[0x058] = 0.25*(pred1_ptr0[0x058] + 3* pred2_ptr1[0x058]);
				pred1_ptr0[0x059] = 0.25*(pred1_ptr0[0x059] + 3* pred2_ptr1[0x059]);
				pred1_ptr0[0x05a] = 0.25*(pred1_ptr0[0x05a] + 3* pred2_ptr1[0x05a]);
				pred1_ptr0[0x05b] = 0.25*(pred1_ptr0[0x05b] + 3* pred2_ptr1[0x05b]);
				pred1_ptr0[0x05c] = 0.25*(pred1_ptr0[0x05c] + 3* pred2_ptr1[0x05c]);
				pred1_ptr0[0x05d] = 0.25*(pred1_ptr0[0x05d] + 3* pred2_ptr1[0x05d]);
				pred1_ptr0[0x05e] = 0.25*(pred1_ptr0[0x05e] + 3* pred2_ptr1[0x05e]);
				pred1_ptr0[0x05f] = 0.25*(pred1_ptr0[0x05f] + 3* pred2_ptr1[0x05f]);
				pred1_ptr0[0x060] = 0.25*(pred1_ptr0[0x060] + 3* pred2_ptr1[0x060]);
				pred1_ptr0[0x061] = 0.25*(pred1_ptr0[0x061] + 3* pred2_ptr1[0x061]);
				pred1_ptr0[0x062] = 0.25*(pred1_ptr0[0x062] + 3* pred2_ptr1[0x062]);
				pred1_ptr0[0x063] = 0.25*(pred1_ptr0[0x063] + 3* pred2_ptr1[0x063]);
				pred1_ptr0[0x064] = 0.25*(pred1_ptr0[0x064] + 3* pred2_ptr1[0x064]);
				pred1_ptr0[0x065] = 0.25*(pred1_ptr0[0x065] + 3* pred2_ptr1[0x065]);
				pred1_ptr0[0x066] = 0.25*(pred1_ptr0[0x066] + 3* pred2_ptr1[0x066]);
				pred1_ptr0[0x067] = 0.25*(pred1_ptr0[0x067] + 3* pred2_ptr1[0x067]);
				pred1_ptr0[0x068] = 0.25*(pred1_ptr0[0x068] + 3* pred2_ptr1[0x068]);
				pred1_ptr0[0x069] = 0.25*(pred1_ptr0[0x069] + 3* pred2_ptr1[0x069]);
				pred1_ptr0[0x06a] = 0.25*(pred1_ptr0[0x06a] + 3* pred2_ptr1[0x06a]);
				pred1_ptr0[0x06b] = 0.25*(pred1_ptr0[0x06b] + 3* pred2_ptr1[0x06b]);
				pred1_ptr0[0x06c] = 0.25*(pred1_ptr0[0x06c] + 3* pred2_ptr1[0x06c]);
				pred1_ptr0[0x06d] = 0.25*(pred1_ptr0[0x06d] + 3* pred2_ptr1[0x06d]);
				pred1_ptr0[0x06e] = 0.25*(pred1_ptr0[0x06e] + 3* pred2_ptr1[0x06e]);
				pred1_ptr0[0x06f] = 0.25*(pred1_ptr0[0x06f] + 3* pred2_ptr1[0x06f]);
				pred1_ptr0[0x070] = 0.25*(pred1_ptr0[0x070] + 3* pred2_ptr1[0x070]);
				pred1_ptr0[0x071] = 0.25*(pred1_ptr0[0x071] + 3* pred2_ptr1[0x071]);
				pred1_ptr0[0x072] = 0.25*(pred1_ptr0[0x072] + 3* pred2_ptr1[0x072]);
				pred1_ptr0[0x073] = 0.25*(pred1_ptr0[0x073] + 3* pred2_ptr1[0x073]);
				pred1_ptr0[0x074] = 0.25*(pred1_ptr0[0x074] + 3* pred2_ptr1[0x074]);
				pred1_ptr0[0x075] = 0.25*(pred1_ptr0[0x075] + 3* pred2_ptr1[0x075]);
				pred1_ptr0[0x076] = 0.25*(pred1_ptr0[0x076] + 3* pred2_ptr1[0x076]);
				pred1_ptr0[0x077] = 0.25*(pred1_ptr0[0x077] + 3* pred2_ptr1[0x077]);
				pred1_ptr0[0x078] = 0.25*(pred1_ptr0[0x078] + 3* pred2_ptr1[0x078]);
				pred1_ptr0[0x079] = 0.25*(pred1_ptr0[0x079] + 3* pred2_ptr1[0x079]);
				pred1_ptr0[0x07a] = 0.25*(pred1_ptr0[0x07a] + 3* pred2_ptr1[0x07a]);
				pred1_ptr0[0x07b] = 0.25*(pred1_ptr0[0x07b] + 3* pred2_ptr1[0x07b]);
				pred1_ptr0[0x07c] = 0.25*(pred1_ptr0[0x07c] + 3* pred2_ptr1[0x07c]);
				pred1_ptr0[0x07d] = 0.25*(pred1_ptr0[0x07d] + 3* pred2_ptr1[0x07d]);
				pred1_ptr0[0x07e] = 0.25*(pred1_ptr0[0x07e] + 3* pred2_ptr1[0x07e]);
				pred1_ptr0[0x07f] = 0.25*(pred1_ptr0[0x07f] + 3* pred2_ptr1[0x07f]);
				pred1_ptr0[0x080] = 0.25*(pred1_ptr0[0x080] + 3* pred2_ptr1[0x080]);
				pred1_ptr0[0x081] = 0.25*(pred1_ptr0[0x081] + 3* pred2_ptr1[0x081]);
				pred1_ptr0[0x082] = 0.25*(pred1_ptr0[0x082] + 3* pred2_ptr1[0x082]);
				pred1_ptr0[0x083] = 0.25*(pred1_ptr0[0x083] + 3* pred2_ptr1[0x083]);
				pred1_ptr0[0x084] = 0.25*(pred1_ptr0[0x084] + 3* pred2_ptr1[0x084]);
				pred1_ptr0[0x085] = 0.25*(pred1_ptr0[0x085] + 3* pred2_ptr1[0x085]);
				pred1_ptr0[0x086] = 0.25*(pred1_ptr0[0x086] + 3* pred2_ptr1[0x086]);
				pred1_ptr0[0x087] = 0.25*(pred1_ptr0[0x087] + 3* pred2_ptr1[0x087]);
				pred1_ptr0[0x088] = 0.25*(pred1_ptr0[0x088] + 3* pred2_ptr1[0x088]);
				pred1_ptr0[0x089] = 0.25*(pred1_ptr0[0x089] + 3* pred2_ptr1[0x089]);
				pred1_ptr0[0x08a] = 0.25*(pred1_ptr0[0x08a] + 3* pred2_ptr1[0x08a]);
				pred1_ptr0[0x08b] = 0.25*(pred1_ptr0[0x08b] + 3* pred2_ptr1[0x08b]);
				pred1_ptr0[0x08c] = 0.25*(pred1_ptr0[0x08c] + 3* pred2_ptr1[0x08c]);
				pred1_ptr0[0x08d] = 0.25*(pred1_ptr0[0x08d] + 3* pred2_ptr1[0x08d]);
				pred1_ptr0[0x08e] = 0.25*(pred1_ptr0[0x08e] + 3* pred2_ptr1[0x08e]);
				pred1_ptr0[0x08f] = 0.25*(pred1_ptr0[0x08f] + 3* pred2_ptr1[0x08f]);
				pred1_ptr0[0x090] = 0.25*(pred1_ptr0[0x090] + 3* pred2_ptr1[0x090]);
				pred1_ptr0[0x091] = 0.25*(pred1_ptr0[0x091] + 3* pred2_ptr1[0x091]);
				pred1_ptr0[0x092] = 0.25*(pred1_ptr0[0x092] + 3* pred2_ptr1[0x092]);
				pred1_ptr0[0x093] = 0.25*(pred1_ptr0[0x093] + 3* pred2_ptr1[0x093]);
				pred1_ptr0[0x094] = 0.25*(pred1_ptr0[0x094] + 3* pred2_ptr1[0x094]);
				pred1_ptr0[0x095] = 0.25*(pred1_ptr0[0x095] + 3* pred2_ptr1[0x095]);
				pred1_ptr0[0x096] = 0.25*(pred1_ptr0[0x096] + 3* pred2_ptr1[0x096]);
				pred1_ptr0[0x097] = 0.25*(pred1_ptr0[0x097] + 3* pred2_ptr1[0x097]);
				pred1_ptr0[0x098] = 0.25*(pred1_ptr0[0x098] + 3* pred2_ptr1[0x098]);
				pred1_ptr0[0x099] = 0.25*(pred1_ptr0[0x099] + 3* pred2_ptr1[0x099]);
				pred1_ptr0[0x09a] = 0.25*(pred1_ptr0[0x09a] + 3* pred2_ptr1[0x09a]);
				pred1_ptr0[0x09b] = 0.25*(pred1_ptr0[0x09b] + 3* pred2_ptr1[0x09b]);
				pred1_ptr0[0x09c] = 0.25*(pred1_ptr0[0x09c] + 3* pred2_ptr1[0x09c]);
				pred1_ptr0[0x09d] = 0.25*(pred1_ptr0[0x09d] + 3* pred2_ptr1[0x09d]);
				pred1_ptr0[0x09e] = 0.25*(pred1_ptr0[0x09e] + 3* pred2_ptr1[0x09e]);
				pred1_ptr0[0x09f] = 0.25*(pred1_ptr0[0x09f] + 3* pred2_ptr1[0x09f]);
				pred1_ptr0[0x0a0] = 0.25*(pred1_ptr0[0x0a0] + 3* pred2_ptr1[0x0a0]);
				pred1_ptr0[0x0a1] = 0.25*(pred1_ptr0[0x0a1] + 3* pred2_ptr1[0x0a1]);
				pred1_ptr0[0x0a2] = 0.25*(pred1_ptr0[0x0a2] + 3* pred2_ptr1[0x0a2]);
				pred1_ptr0[0x0a3] = 0.25*(pred1_ptr0[0x0a3] + 3* pred2_ptr1[0x0a3]);
				pred1_ptr0[0x0a4] = 0.25*(pred1_ptr0[0x0a4] + 3* pred2_ptr1[0x0a4]);
				pred1_ptr0[0x0a5] = 0.25*(pred1_ptr0[0x0a5] + 3* pred2_ptr1[0x0a5]);
				pred1_ptr0[0x0a6] = 0.25*(pred1_ptr0[0x0a6] + 3* pred2_ptr1[0x0a6]);
				pred1_ptr0[0x0a7] = 0.25*(pred1_ptr0[0x0a7] + 3* pred2_ptr1[0x0a7]);
				pred1_ptr0[0x0a8] = 0.25*(pred1_ptr0[0x0a8] + 3* pred2_ptr1[0x0a8]);
				pred1_ptr0[0x0a9] = 0.25*(pred1_ptr0[0x0a9] + 3* pred2_ptr1[0x0a9]);
				pred1_ptr0[0x0aa] = 0.25*(pred1_ptr0[0x0aa] + 3* pred2_ptr1[0x0aa]);
				pred1_ptr0[0x0ab] = 0.25*(pred1_ptr0[0x0ab] + 3* pred2_ptr1[0x0ab]);
				pred1_ptr0[0x0ac] = 0.25*(pred1_ptr0[0x0ac] + 3* pred2_ptr1[0x0ac]);
				pred1_ptr0[0x0ad] = 0.25*(pred1_ptr0[0x0ad] + 3* pred2_ptr1[0x0ad]);
				pred1_ptr0[0x0ae] = 0.25*(pred1_ptr0[0x0ae] + 3* pred2_ptr1[0x0ae]);
				pred1_ptr0[0x0af] = 0.25*(pred1_ptr0[0x0af] + 3* pred2_ptr1[0x0af]);
				pred1_ptr0[0x0b0] = 0.25*(pred1_ptr0[0x0b0] + 3* pred2_ptr1[0x0b0]);
				pred1_ptr0[0x0b1] = 0.25*(pred1_ptr0[0x0b1] + 3* pred2_ptr1[0x0b1]);
				pred1_ptr0[0x0b2] = 0.25*(pred1_ptr0[0x0b2] + 3* pred2_ptr1[0x0b2]);
				pred1_ptr0[0x0b3] = 0.25*(pred1_ptr0[0x0b3] + 3* pred2_ptr1[0x0b3]);
				pred1_ptr0[0x0b4] = 0.25*(pred1_ptr0[0x0b4] + 3* pred2_ptr1[0x0b4]);
				pred1_ptr0[0x0b5] = 0.25*(pred1_ptr0[0x0b5] + 3* pred2_ptr1[0x0b5]);
				pred1_ptr0[0x0b6] = 0.25*(pred1_ptr0[0x0b6] + 3* pred2_ptr1[0x0b6]);
				pred1_ptr0[0x0b7] = 0.25*(pred1_ptr0[0x0b7] + 3* pred2_ptr1[0x0b7]);
				pred1_ptr0[0x0b8] = 0.25*(pred1_ptr0[0x0b8] + 3* pred2_ptr1[0x0b8]);
				pred1_ptr0[0x0b9] = 0.25*(pred1_ptr0[0x0b9] + 3* pred2_ptr1[0x0b9]);
				pred1_ptr0[0x0ba] = 0.25*(pred1_ptr0[0x0ba] + 3* pred2_ptr1[0x0ba]);
				pred1_ptr0[0x0bb] = 0.25*(pred1_ptr0[0x0bb] + 3* pred2_ptr1[0x0bb]);
				pred1_ptr0[0x0bc] = 0.25*(pred1_ptr0[0x0bc] + 3* pred2_ptr1[0x0bc]);
				pred1_ptr0[0x0bd] = 0.25*(pred1_ptr0[0x0bd] + 3* pred2_ptr1[0x0bd]);
				pred1_ptr0[0x0be] = 0.25*(pred1_ptr0[0x0be] + 3* pred2_ptr1[0x0be]);
				pred1_ptr0[0x0bf] = 0.25*(pred1_ptr0[0x0bf] + 3* pred2_ptr1[0x0bf]);
				pred1_ptr0[0x0c0] = 0.25*(pred1_ptr0[0x0c0] + 3* pred2_ptr1[0x0c0]);
				pred1_ptr0[0x0c1] = 0.25*(pred1_ptr0[0x0c1] + 3* pred2_ptr1[0x0c1]);
				pred1_ptr0[0x0c2] = 0.25*(pred1_ptr0[0x0c2] + 3* pred2_ptr1[0x0c2]);
				pred1_ptr0[0x0c3] = 0.25*(pred1_ptr0[0x0c3] + 3* pred2_ptr1[0x0c3]);
				pred1_ptr0[0x0c4] = 0.25*(pred1_ptr0[0x0c4] + 3* pred2_ptr1[0x0c4]);
				pred1_ptr0[0x0c5] = 0.25*(pred1_ptr0[0x0c5] + 3* pred2_ptr1[0x0c5]);
				pred1_ptr0[0x0c6] = 0.25*(pred1_ptr0[0x0c6] + 3* pred2_ptr1[0x0c6]);
				pred1_ptr0[0x0c7] = 0.25*(pred1_ptr0[0x0c7] + 3* pred2_ptr1[0x0c7]);
				pred1_ptr0[0x0c8] = 0.25*(pred1_ptr0[0x0c8] + 3* pred2_ptr1[0x0c8]);
				pred1_ptr0[0x0c9] = 0.25*(pred1_ptr0[0x0c9] + 3* pred2_ptr1[0x0c9]);
				pred1_ptr0[0x0ca] = 0.25*(pred1_ptr0[0x0ca] + 3* pred2_ptr1[0x0ca]);
				pred1_ptr0[0x0cb] = 0.25*(pred1_ptr0[0x0cb] + 3* pred2_ptr1[0x0cb]);
				pred1_ptr0[0x0cc] = 0.25*(pred1_ptr0[0x0cc] + 3* pred2_ptr1[0x0cc]);
				pred1_ptr0[0x0cd] = 0.25*(pred1_ptr0[0x0cd] + 3* pred2_ptr1[0x0cd]);
				pred1_ptr0[0x0ce] = 0.25*(pred1_ptr0[0x0ce] + 3* pred2_ptr1[0x0ce]);
				pred1_ptr0[0x0cf] = 0.25*(pred1_ptr0[0x0cf] + 3* pred2_ptr1[0x0cf]);
				pred1_ptr0[0x0d0] = 0.25*(pred1_ptr0[0x0d0] + 3* pred2_ptr1[0x0d0]);
				pred1_ptr0[0x0d1] = 0.25*(pred1_ptr0[0x0d1] + 3* pred2_ptr1[0x0d1]);
				pred1_ptr0[0x0d2] = 0.25*(pred1_ptr0[0x0d2] + 3* pred2_ptr1[0x0d2]);
				pred1_ptr0[0x0d3] = 0.25*(pred1_ptr0[0x0d3] + 3* pred2_ptr1[0x0d3]);
				pred1_ptr0[0x0d4] = 0.25*(pred1_ptr0[0x0d4] + 3* pred2_ptr1[0x0d4]);
				pred1_ptr0[0x0d5] = 0.25*(pred1_ptr0[0x0d5] + 3* pred2_ptr1[0x0d5]);
				pred1_ptr0[0x0d6] = 0.25*(pred1_ptr0[0x0d6] + 3* pred2_ptr1[0x0d6]);
				pred1_ptr0[0x0d7] = 0.25*(pred1_ptr0[0x0d7] + 3* pred2_ptr1[0x0d7]);
				pred1_ptr0[0x0d8] = 0.25*(pred1_ptr0[0x0d8] + 3* pred2_ptr1[0x0d8]);
				pred1_ptr0[0x0d9] = 0.25*(pred1_ptr0[0x0d9] + 3* pred2_ptr1[0x0d9]);
				pred1_ptr0[0x0da] = 0.25*(pred1_ptr0[0x0da] + 3* pred2_ptr1[0x0da]);
				pred1_ptr0[0x0db] = 0.25*(pred1_ptr0[0x0db] + 3* pred2_ptr1[0x0db]);
				pred1_ptr0[0x0dc] = 0.25*(pred1_ptr0[0x0dc] + 3* pred2_ptr1[0x0dc]);
				pred1_ptr0[0x0dd] = 0.25*(pred1_ptr0[0x0dd] + 3* pred2_ptr1[0x0dd]);
				pred1_ptr0[0x0de] = 0.25*(pred1_ptr0[0x0de] + 3* pred2_ptr1[0x0de]);
				pred1_ptr0[0x0df] = 0.25*(pred1_ptr0[0x0df] + 3* pred2_ptr1[0x0df]);
				pred1_ptr0[0x0e0] = 0.25*(pred1_ptr0[0x0e0] + 3* pred2_ptr1[0x0e0]);
				pred1_ptr0[0x0e1] = 0.25*(pred1_ptr0[0x0e1] + 3* pred2_ptr1[0x0e1]);
				pred1_ptr0[0x0e2] = 0.25*(pred1_ptr0[0x0e2] + 3* pred2_ptr1[0x0e2]);
				pred1_ptr0[0x0e3] = 0.25*(pred1_ptr0[0x0e3] + 3* pred2_ptr1[0x0e3]);
				pred1_ptr0[0x0e4] = 0.25*(pred1_ptr0[0x0e4] + 3* pred2_ptr1[0x0e4]);
				pred1_ptr0[0x0e5] = 0.25*(pred1_ptr0[0x0e5] + 3* pred2_ptr1[0x0e5]);
				pred1_ptr0[0x0e6] = 0.25*(pred1_ptr0[0x0e6] + 3* pred2_ptr1[0x0e6]);
				pred1_ptr0[0x0e7] = 0.25*(pred1_ptr0[0x0e7] + 3* pred2_ptr1[0x0e7]);
				pred1_ptr0[0x0e8] = 0.25*(pred1_ptr0[0x0e8] + 3* pred2_ptr1[0x0e8]);
				pred1_ptr0[0x0e9] = 0.25*(pred1_ptr0[0x0e9] + 3* pred2_ptr1[0x0e9]);
				pred1_ptr0[0x0ea] = 0.25*(pred1_ptr0[0x0ea] + 3* pred2_ptr1[0x0ea]);
				pred1_ptr0[0x0eb] = 0.25*(pred1_ptr0[0x0eb] + 3* pred2_ptr1[0x0eb]);
				pred1_ptr0[0x0ec] = 0.25*(pred1_ptr0[0x0ec] + 3* pred2_ptr1[0x0ec]);
				pred1_ptr0[0x0ed] = 0.25*(pred1_ptr0[0x0ed] + 3* pred2_ptr1[0x0ed]);
				pred1_ptr0[0x0ee] = 0.25*(pred1_ptr0[0x0ee] + 3* pred2_ptr1[0x0ee]);
				pred1_ptr0[0x0ef] = 0.25*(pred1_ptr0[0x0ef] + 3* pred2_ptr1[0x0ef]);
				pred1_ptr0[0x0f0] = 0.25*(pred1_ptr0[0x0f0] + 3* pred2_ptr1[0x0f0]);
				pred1_ptr0[0x0f1] = 0.25*(pred1_ptr0[0x0f1] + 3* pred2_ptr1[0x0f1]);
				pred1_ptr0[0x0f2] = 0.25*(pred1_ptr0[0x0f2] + 3* pred2_ptr1[0x0f2]);
				pred1_ptr0[0x0f3] = 0.25*(pred1_ptr0[0x0f3] + 3* pred2_ptr1[0x0f3]);
				pred1_ptr0[0x0f4] = 0.25*(pred1_ptr0[0x0f4] + 3* pred2_ptr1[0x0f4]);
				pred1_ptr0[0x0f5] = 0.25*(pred1_ptr0[0x0f5] + 3* pred2_ptr1[0x0f5]);
				pred1_ptr0[0x0f6] = 0.25*(pred1_ptr0[0x0f6] + 3* pred2_ptr1[0x0f6]);
				pred1_ptr0[0x0f7] = 0.25*(pred1_ptr0[0x0f7] + 3* pred2_ptr1[0x0f7]);
				pred1_ptr0[0x0f8] = 0.25*(pred1_ptr0[0x0f8] + 3* pred2_ptr1[0x0f8]);
				pred1_ptr0[0x0f9] = 0.25*(pred1_ptr0[0x0f9] + 3* pred2_ptr1[0x0f9]);
				pred1_ptr0[0x0fa] = 0.25*(pred1_ptr0[0x0fa] + 3* pred2_ptr1[0x0fa]);
				pred1_ptr0[0x0fb] = 0.25*(pred1_ptr0[0x0fb] + 3* pred2_ptr1[0x0fb]);
				pred1_ptr0[0x0fc] = 0.25*(pred1_ptr0[0x0fc] + 3* pred2_ptr1[0x0fc]);
				pred1_ptr0[0x0fd] = 0.25*(pred1_ptr0[0x0fd] + 3* pred2_ptr1[0x0fd]);
				pred1_ptr0[0x0fe] = 0.25*(pred1_ptr0[0x0fe] + 3* pred2_ptr1[0x0fe]);
				pred1_ptr0[0x0ff] = 0.25*(pred1_ptr0[0x0ff] + 3* pred2_ptr1[0x0ff]);
			}
		
			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,8);
			luma_index0 = ((luma_index0 + 4)&0x0f);
			luma_index1 = ((luma_index1 + 4)&0x0f);
		}
	}
}
void b_frame_x_x_x_0_0x00600_x_x_x_x_x_x_12_0(_fp16 *out, _fp16 *in1, _fp16 *in2, INT8 *mvx1, INT8 *mvy1, INT8 *mvx2, INT8 *mvy2, _fp16 *cof, UINT8 *luma_type){
	UINT8 luma_index0 = 12 ;
	UINT8 luma_index1 = 0 ;
	_fp16 pred1[0x100];
	_fp16 pred2[0x100];
	_fp16 cof_bar[0x100];
	for (UINT16 y= 0x610 ; y< 0xa10 ; y +=0x10){// 1080P, 4 slices
		for (UINT16 x= 0x10 ; x< 0x30 ; x +=0x10){
//			p_frame_mb(pred1, in1, x, y, luma_index0, mvx1, mvy1, luma_type);
	get_luma(luma_type[luma_index0], pred1, in1, x + mvx1[0] + 8, y + mvy1[0] + 8);
	get_luma(luma_type[luma_index0 + 1], pred1, in1, x + mvx1[1] + 16, y + mvy1[1] + 16);
	get_luma(luma_type[luma_index0 + 2], pred1, in1, x + mvx1[2] + 8, y + mvy1[2] + 24);
	get_luma(luma_type[luma_index0 + 3], pred1, in1, x + mvx1[3] + 16, y + mvy1[3] + 32);
//			p_frame_mb(pred2, in2, x, y, luma_index1, mvx2, mvy2, luma_type);
	get_luma(luma_type[luma_index1], pred2, in2, x + mvx2[0] + 8, y + mvy2[0] + 8);
	get_luma(luma_type[luma_index1 + 1], pred2, in2, x + mvx2[1] + 16, y + mvy2[1] + 16);
	get_luma(luma_type[luma_index1 + 2], pred2, in2, x + mvx2[2] + 8, y + mvy2[2] + 24);
	get_luma(luma_type[luma_index1 + 3], pred2, in2, x + mvx2[3] + 16, y + mvy2[3] + 32);
//			for (UINT l= 0 ; l< 0x100 ;l++){
				{	// 4 
				_fp16 *pred1_ptr0 = &pred1[0];
				_fp16 *pred2_ptr1 = &pred2[0];
				pred1_ptr0[0x000] = 0.25*(pred1_ptr0[0x000] + 3* pred2_ptr1[0x000]);
				pred1_ptr0[0x001] = 0.25*(pred1_ptr0[0x001] + 3* pred2_ptr1[0x001]);
				pred1_ptr0[0x002] = 0.25*(pred1_ptr0[0x002] + 3* pred2_ptr1[0x002]);
				pred1_ptr0[0x003] = 0.25*(pred1_ptr0[0x003] + 3* pred2_ptr1[0x003]);
				pred1_ptr0[0x004] = 0.25*(pred1_ptr0[0x004] + 3* pred2_ptr1[0x004]);
				pred1_ptr0[0x005] = 0.25*(pred1_ptr0[0x005] + 3* pred2_ptr1[0x005]);
				pred1_ptr0[0x006] = 0.25*(pred1_ptr0[0x006] + 3* pred2_ptr1[0x006]);
				pred1_ptr0[0x007] = 0.25*(pred1_ptr0[0x007] + 3* pred2_ptr1[0x007]);
				pred1_ptr0[0x008] = 0.25*(pred1_ptr0[0x008] + 3* pred2_ptr1[0x008]);
				pred1_ptr0[0x009] = 0.25*(pred1_ptr0[0x009] + 3* pred2_ptr1[0x009]);
				pred1_ptr0[0x00a] = 0.25*(pred1_ptr0[0x00a] + 3* pred2_ptr1[0x00a]);
				pred1_ptr0[0x00b] = 0.25*(pred1_ptr0[0x00b] + 3* pred2_ptr1[0x00b]);
				pred1_ptr0[0x00c] = 0.25*(pred1_ptr0[0x00c] + 3* pred2_ptr1[0x00c]);
				pred1_ptr0[0x00d] = 0.25*(pred1_ptr0[0x00d] + 3* pred2_ptr1[0x00d]);
				pred1_ptr0[0x00e] = 0.25*(pred1_ptr0[0x00e] + 3* pred2_ptr1[0x00e]);
				pred1_ptr0[0x00f] = 0.25*(pred1_ptr0[0x00f] + 3* pred2_ptr1[0x00f]);
				pred1_ptr0[0x010] = 0.25*(pred1_ptr0[0x010] + 3* pred2_ptr1[0x010]);
				pred1_ptr0[0x011] = 0.25*(pred1_ptr0[0x011] + 3* pred2_ptr1[0x011]);
				pred1_ptr0[0x012] = 0.25*(pred1_ptr0[0x012] + 3* pred2_ptr1[0x012]);
				pred1_ptr0[0x013] = 0.25*(pred1_ptr0[0x013] + 3* pred2_ptr1[0x013]);
				pred1_ptr0[0x014] = 0.25*(pred1_ptr0[0x014] + 3* pred2_ptr1[0x014]);
				pred1_ptr0[0x015] = 0.25*(pred1_ptr0[0x015] + 3* pred2_ptr1[0x015]);
				pred1_ptr0[0x016] = 0.25*(pred1_ptr0[0x016] + 3* pred2_ptr1[0x016]);
				pred1_ptr0[0x017] = 0.25*(pred1_ptr0[0x017] + 3* pred2_ptr1[0x017]);
				pred1_ptr0[0x018] = 0.25*(pred1_ptr0[0x018] + 3* pred2_ptr1[0x018]);
				pred1_ptr0[0x019] = 0.25*(pred1_ptr0[0x019] + 3* pred2_ptr1[0x019]);
				pred1_ptr0[0x01a] = 0.25*(pred1_ptr0[0x01a] + 3* pred2_ptr1[0x01a]);
				pred1_ptr0[0x01b] = 0.25*(pred1_ptr0[0x01b] + 3* pred2_ptr1[0x01b]);
				pred1_ptr0[0x01c] = 0.25*(pred1_ptr0[0x01c] + 3* pred2_ptr1[0x01c]);
				pred1_ptr0[0x01d] = 0.25*(pred1_ptr0[0x01d] + 3* pred2_ptr1[0x01d]);
				pred1_ptr0[0x01e] = 0.25*(pred1_ptr0[0x01e] + 3* pred2_ptr1[0x01e]);
				pred1_ptr0[0x01f] = 0.25*(pred1_ptr0[0x01f] + 3* pred2_ptr1[0x01f]);
				pred1_ptr0[0x020] = 0.25*(pred1_ptr0[0x020] + 3* pred2_ptr1[0x020]);
				pred1_ptr0[0x021] = 0.25*(pred1_ptr0[0x021] + 3* pred2_ptr1[0x021]);
				pred1_ptr0[0x022] = 0.25*(pred1_ptr0[0x022] + 3* pred2_ptr1[0x022]);
				pred1_ptr0[0x023] = 0.25*(pred1_ptr0[0x023] + 3* pred2_ptr1[0x023]);
				pred1_ptr0[0x024] = 0.25*(pred1_ptr0[0x024] + 3* pred2_ptr1[0x024]);
				pred1_ptr0[0x025] = 0.25*(pred1_ptr0[0x025] + 3* pred2_ptr1[0x025]);
				pred1_ptr0[0x026] = 0.25*(pred1_ptr0[0x026] + 3* pred2_ptr1[0x026]);
				pred1_ptr0[0x027] = 0.25*(pred1_ptr0[0x027] + 3* pred2_ptr1[0x027]);
				pred1_ptr0[0x028] = 0.25*(pred1_ptr0[0x028] + 3* pred2_ptr1[0x028]);
				pred1_ptr0[0x029] = 0.25*(pred1_ptr0[0x029] + 3* pred2_ptr1[0x029]);
				pred1_ptr0[0x02a] = 0.25*(pred1_ptr0[0x02a] + 3* pred2_ptr1[0x02a]);
				pred1_ptr0[0x02b] = 0.25*(pred1_ptr0[0x02b] + 3* pred2_ptr1[0x02b]);
				pred1_ptr0[0x02c] = 0.25*(pred1_ptr0[0x02c] + 3* pred2_ptr1[0x02c]);
				pred1_ptr0[0x02d] = 0.25*(pred1_ptr0[0x02d] + 3* pred2_ptr1[0x02d]);
				pred1_ptr0[0x02e] = 0.25*(pred1_ptr0[0x02e] + 3* pred2_ptr1[0x02e]);
				pred1_ptr0[0x02f] = 0.25*(pred1_ptr0[0x02f] + 3* pred2_ptr1[0x02f]);
				pred1_ptr0[0x030] = 0.25*(pred1_ptr0[0x030] + 3* pred2_ptr1[0x030]);
				pred1_ptr0[0x031] = 0.25*(pred1_ptr0[0x031] + 3* pred2_ptr1[0x031]);
				pred1_ptr0[0x032] = 0.25*(pred1_ptr0[0x032] + 3* pred2_ptr1[0x032]);
				pred1_ptr0[0x033] = 0.25*(pred1_ptr0[0x033] + 3* pred2_ptr1[0x033]);
				pred1_ptr0[0x034] = 0.25*(pred1_ptr0[0x034] + 3* pred2_ptr1[0x034]);
				pred1_ptr0[0x035] = 0.25*(pred1_ptr0[0x035] + 3* pred2_ptr1[0x035]);
				pred1_ptr0[0x036] = 0.25*(pred1_ptr0[0x036] + 3* pred2_ptr1[0x036]);
				pred1_ptr0[0x037] = 0.25*(pred1_ptr0[0x037] + 3* pred2_ptr1[0x037]);
				pred1_ptr0[0x038] = 0.25*(pred1_ptr0[0x038] + 3* pred2_ptr1[0x038]);
				pred1_ptr0[0x039] = 0.25*(pred1_ptr0[0x039] + 3* pred2_ptr1[0x039]);
				pred1_ptr0[0x03a] = 0.25*(pred1_ptr0[0x03a] + 3* pred2_ptr1[0x03a]);
				pred1_ptr0[0x03b] = 0.25*(pred1_ptr0[0x03b] + 3* pred2_ptr1[0x03b]);
				pred1_ptr0[0x03c] = 0.25*(pred1_ptr0[0x03c] + 3* pred2_ptr1[0x03c]);
				pred1_ptr0[0x03d] = 0.25*(pred1_ptr0[0x03d] + 3* pred2_ptr1[0x03d]);
				pred1_ptr0[0x03e] = 0.25*(pred1_ptr0[0x03e] + 3* pred2_ptr1[0x03e]);
				pred1_ptr0[0x03f] = 0.25*(pred1_ptr0[0x03f] + 3* pred2_ptr1[0x03f]);
				pred1_ptr0[0x040] = 0.25*(pred1_ptr0[0x040] + 3* pred2_ptr1[0x040]);
				pred1_ptr0[0x041] = 0.25*(pred1_ptr0[0x041] + 3* pred2_ptr1[0x041]);
				pred1_ptr0[0x042] = 0.25*(pred1_ptr0[0x042] + 3* pred2_ptr1[0x042]);
				pred1_ptr0[0x043] = 0.25*(pred1_ptr0[0x043] + 3* pred2_ptr1[0x043]);
				pred1_ptr0[0x044] = 0.25*(pred1_ptr0[0x044] + 3* pred2_ptr1[0x044]);
				pred1_ptr0[0x045] = 0.25*(pred1_ptr0[0x045] + 3* pred2_ptr1[0x045]);
				pred1_ptr0[0x046] = 0.25*(pred1_ptr0[0x046] + 3* pred2_ptr1[0x046]);
				pred1_ptr0[0x047] = 0.25*(pred1_ptr0[0x047] + 3* pred2_ptr1[0x047]);
				pred1_ptr0[0x048] = 0.25*(pred1_ptr0[0x048] + 3* pred2_ptr1[0x048]);
				pred1_ptr0[0x049] = 0.25*(pred1_ptr0[0x049] + 3* pred2_ptr1[0x049]);
				pred1_ptr0[0x04a] = 0.25*(pred1_ptr0[0x04a] + 3* pred2_ptr1[0x04a]);
				pred1_ptr0[0x04b] = 0.25*(pred1_ptr0[0x04b] + 3* pred2_ptr1[0x04b]);
				pred1_ptr0[0x04c] = 0.25*(pred1_ptr0[0x04c] + 3* pred2_ptr1[0x04c]);
				pred1_ptr0[0x04d] = 0.25*(pred1_ptr0[0x04d] + 3* pred2_ptr1[0x04d]);
				pred1_ptr0[0x04e] = 0.25*(pred1_ptr0[0x04e] + 3* pred2_ptr1[0x04e]);
				pred1_ptr0[0x04f] = 0.25*(pred1_ptr0[0x04f] + 3* pred2_ptr1[0x04f]);
				pred1_ptr0[0x050] = 0.25*(pred1_ptr0[0x050] + 3* pred2_ptr1[0x050]);
				pred1_ptr0[0x051] = 0.25*(pred1_ptr0[0x051] + 3* pred2_ptr1[0x051]);
				pred1_ptr0[0x052] = 0.25*(pred1_ptr0[0x052] + 3* pred2_ptr1[0x052]);
				pred1_ptr0[0x053] = 0.25*(pred1_ptr0[0x053] + 3* pred2_ptr1[0x053]);
				pred1_ptr0[0x054] = 0.25*(pred1_ptr0[0x054] + 3* pred2_ptr1[0x054]);
				pred1_ptr0[0x055] = 0.25*(pred1_ptr0[0x055] + 3* pred2_ptr1[0x055]);
				pred1_ptr0[0x056] = 0.25*(pred1_ptr0[0x056] + 3* pred2_ptr1[0x056]);
				pred1_ptr0[0x057] = 0.25*(pred1_ptr0[0x057] + 3* pred2_ptr1[0x057]);
				pred1_ptr0[0x058] = 0.25*(pred1_ptr0[0x058] + 3* pred2_ptr1[0x058]);
				pred1_ptr0[0x059] = 0.25*(pred1_ptr0[0x059] + 3* pred2_ptr1[0x059]);
				pred1_ptr0[0x05a] = 0.25*(pred1_ptr0[0x05a] + 3* pred2_ptr1[0x05a]);
				pred1_ptr0[0x05b] = 0.25*(pred1_ptr0[0x05b] + 3* pred2_ptr1[0x05b]);
				pred1_ptr0[0x05c] = 0.25*(pred1_ptr0[0x05c] + 3* pred2_ptr1[0x05c]);
				pred1_ptr0[0x05d] = 0.25*(pred1_ptr0[0x05d] + 3* pred2_ptr1[0x05d]);
				pred1_ptr0[0x05e] = 0.25*(pred1_ptr0[0x05e] + 3* pred2_ptr1[0x05e]);
				pred1_ptr0[0x05f] = 0.25*(pred1_ptr0[0x05f] + 3* pred2_ptr1[0x05f]);
				pred1_ptr0[0x060] = 0.25*(pred1_ptr0[0x060] + 3* pred2_ptr1[0x060]);
				pred1_ptr0[0x061] = 0.25*(pred1_ptr0[0x061] + 3* pred2_ptr1[0x061]);
				pred1_ptr0[0x062] = 0.25*(pred1_ptr0[0x062] + 3* pred2_ptr1[0x062]);
				pred1_ptr0[0x063] = 0.25*(pred1_ptr0[0x063] + 3* pred2_ptr1[0x063]);
				pred1_ptr0[0x064] = 0.25*(pred1_ptr0[0x064] + 3* pred2_ptr1[0x064]);
				pred1_ptr0[0x065] = 0.25*(pred1_ptr0[0x065] + 3* pred2_ptr1[0x065]);
				pred1_ptr0[0x066] = 0.25*(pred1_ptr0[0x066] + 3* pred2_ptr1[0x066]);
				pred1_ptr0[0x067] = 0.25*(pred1_ptr0[0x067] + 3* pred2_ptr1[0x067]);
				pred1_ptr0[0x068] = 0.25*(pred1_ptr0[0x068] + 3* pred2_ptr1[0x068]);
				pred1_ptr0[0x069] = 0.25*(pred1_ptr0[0x069] + 3* pred2_ptr1[0x069]);
				pred1_ptr0[0x06a] = 0.25*(pred1_ptr0[0x06a] + 3* pred2_ptr1[0x06a]);
				pred1_ptr0[0x06b] = 0.25*(pred1_ptr0[0x06b] + 3* pred2_ptr1[0x06b]);
				pred1_ptr0[0x06c] = 0.25*(pred1_ptr0[0x06c] + 3* pred2_ptr1[0x06c]);
				pred1_ptr0[0x06d] = 0.25*(pred1_ptr0[0x06d] + 3* pred2_ptr1[0x06d]);
				pred1_ptr0[0x06e] = 0.25*(pred1_ptr0[0x06e] + 3* pred2_ptr1[0x06e]);
				pred1_ptr0[0x06f] = 0.25*(pred1_ptr0[0x06f] + 3* pred2_ptr1[0x06f]);
				pred1_ptr0[0x070] = 0.25*(pred1_ptr0[0x070] + 3* pred2_ptr1[0x070]);
				pred1_ptr0[0x071] = 0.25*(pred1_ptr0[0x071] + 3* pred2_ptr1[0x071]);
				pred1_ptr0[0x072] = 0.25*(pred1_ptr0[0x072] + 3* pred2_ptr1[0x072]);
				pred1_ptr0[0x073] = 0.25*(pred1_ptr0[0x073] + 3* pred2_ptr1[0x073]);
				pred1_ptr0[0x074] = 0.25*(pred1_ptr0[0x074] + 3* pred2_ptr1[0x074]);
				pred1_ptr0[0x075] = 0.25*(pred1_ptr0[0x075] + 3* pred2_ptr1[0x075]);
				pred1_ptr0[0x076] = 0.25*(pred1_ptr0[0x076] + 3* pred2_ptr1[0x076]);
				pred1_ptr0[0x077] = 0.25*(pred1_ptr0[0x077] + 3* pred2_ptr1[0x077]);
				pred1_ptr0[0x078] = 0.25*(pred1_ptr0[0x078] + 3* pred2_ptr1[0x078]);
				pred1_ptr0[0x079] = 0.25*(pred1_ptr0[0x079] + 3* pred2_ptr1[0x079]);
				pred1_ptr0[0x07a] = 0.25*(pred1_ptr0[0x07a] + 3* pred2_ptr1[0x07a]);
				pred1_ptr0[0x07b] = 0.25*(pred1_ptr0[0x07b] + 3* pred2_ptr1[0x07b]);
				pred1_ptr0[0x07c] = 0.25*(pred1_ptr0[0x07c] + 3* pred2_ptr1[0x07c]);
				pred1_ptr0[0x07d] = 0.25*(pred1_ptr0[0x07d] + 3* pred2_ptr1[0x07d]);
				pred1_ptr0[0x07e] = 0.25*(pred1_ptr0[0x07e] + 3* pred2_ptr1[0x07e]);
				pred1_ptr0[0x07f] = 0.25*(pred1_ptr0[0x07f] + 3* pred2_ptr1[0x07f]);
				pred1_ptr0[0x080] = 0.25*(pred1_ptr0[0x080] + 3* pred2_ptr1[0x080]);
				pred1_ptr0[0x081] = 0.25*(pred1_ptr0[0x081] + 3* pred2_ptr1[0x081]);
				pred1_ptr0[0x082] = 0.25*(pred1_ptr0[0x082] + 3* pred2_ptr1[0x082]);
				pred1_ptr0[0x083] = 0.25*(pred1_ptr0[0x083] + 3* pred2_ptr1[0x083]);
				pred1_ptr0[0x084] = 0.25*(pred1_ptr0[0x084] + 3* pred2_ptr1[0x084]);
				pred1_ptr0[0x085] = 0.25*(pred1_ptr0[0x085] + 3* pred2_ptr1[0x085]);
				pred1_ptr0[0x086] = 0.25*(pred1_ptr0[0x086] + 3* pred2_ptr1[0x086]);
				pred1_ptr0[0x087] = 0.25*(pred1_ptr0[0x087] + 3* pred2_ptr1[0x087]);
				pred1_ptr0[0x088] = 0.25*(pred1_ptr0[0x088] + 3* pred2_ptr1[0x088]);
				pred1_ptr0[0x089] = 0.25*(pred1_ptr0[0x089] + 3* pred2_ptr1[0x089]);
				pred1_ptr0[0x08a] = 0.25*(pred1_ptr0[0x08a] + 3* pred2_ptr1[0x08a]);
				pred1_ptr0[0x08b] = 0.25*(pred1_ptr0[0x08b] + 3* pred2_ptr1[0x08b]);
				pred1_ptr0[0x08c] = 0.25*(pred1_ptr0[0x08c] + 3* pred2_ptr1[0x08c]);
				pred1_ptr0[0x08d] = 0.25*(pred1_ptr0[0x08d] + 3* pred2_ptr1[0x08d]);
				pred1_ptr0[0x08e] = 0.25*(pred1_ptr0[0x08e] + 3* pred2_ptr1[0x08e]);
				pred1_ptr0[0x08f] = 0.25*(pred1_ptr0[0x08f] + 3* pred2_ptr1[0x08f]);
				pred1_ptr0[0x090] = 0.25*(pred1_ptr0[0x090] + 3* pred2_ptr1[0x090]);
				pred1_ptr0[0x091] = 0.25*(pred1_ptr0[0x091] + 3* pred2_ptr1[0x091]);
				pred1_ptr0[0x092] = 0.25*(pred1_ptr0[0x092] + 3* pred2_ptr1[0x092]);
				pred1_ptr0[0x093] = 0.25*(pred1_ptr0[0x093] + 3* pred2_ptr1[0x093]);
				pred1_ptr0[0x094] = 0.25*(pred1_ptr0[0x094] + 3* pred2_ptr1[0x094]);
				pred1_ptr0[0x095] = 0.25*(pred1_ptr0[0x095] + 3* pred2_ptr1[0x095]);
				pred1_ptr0[0x096] = 0.25*(pred1_ptr0[0x096] + 3* pred2_ptr1[0x096]);
				pred1_ptr0[0x097] = 0.25*(pred1_ptr0[0x097] + 3* pred2_ptr1[0x097]);
				pred1_ptr0[0x098] = 0.25*(pred1_ptr0[0x098] + 3* pred2_ptr1[0x098]);
				pred1_ptr0[0x099] = 0.25*(pred1_ptr0[0x099] + 3* pred2_ptr1[0x099]);
				pred1_ptr0[0x09a] = 0.25*(pred1_ptr0[0x09a] + 3* pred2_ptr1[0x09a]);
				pred1_ptr0[0x09b] = 0.25*(pred1_ptr0[0x09b] + 3* pred2_ptr1[0x09b]);
				pred1_ptr0[0x09c] = 0.25*(pred1_ptr0[0x09c] + 3* pred2_ptr1[0x09c]);
				pred1_ptr0[0x09d] = 0.25*(pred1_ptr0[0x09d] + 3* pred2_ptr1[0x09d]);
				pred1_ptr0[0x09e] = 0.25*(pred1_ptr0[0x09e] + 3* pred2_ptr1[0x09e]);
				pred1_ptr0[0x09f] = 0.25*(pred1_ptr0[0x09f] + 3* pred2_ptr1[0x09f]);
				pred1_ptr0[0x0a0] = 0.25*(pred1_ptr0[0x0a0] + 3* pred2_ptr1[0x0a0]);
				pred1_ptr0[0x0a1] = 0.25*(pred1_ptr0[0x0a1] + 3* pred2_ptr1[0x0a1]);
				pred1_ptr0[0x0a2] = 0.25*(pred1_ptr0[0x0a2] + 3* pred2_ptr1[0x0a2]);
				pred1_ptr0[0x0a3] = 0.25*(pred1_ptr0[0x0a3] + 3* pred2_ptr1[0x0a3]);
				pred1_ptr0[0x0a4] = 0.25*(pred1_ptr0[0x0a4] + 3* pred2_ptr1[0x0a4]);
				pred1_ptr0[0x0a5] = 0.25*(pred1_ptr0[0x0a5] + 3* pred2_ptr1[0x0a5]);
				pred1_ptr0[0x0a6] = 0.25*(pred1_ptr0[0x0a6] + 3* pred2_ptr1[0x0a6]);
				pred1_ptr0[0x0a7] = 0.25*(pred1_ptr0[0x0a7] + 3* pred2_ptr1[0x0a7]);
				pred1_ptr0[0x0a8] = 0.25*(pred1_ptr0[0x0a8] + 3* pred2_ptr1[0x0a8]);
				pred1_ptr0[0x0a9] = 0.25*(pred1_ptr0[0x0a9] + 3* pred2_ptr1[0x0a9]);
				pred1_ptr0[0x0aa] = 0.25*(pred1_ptr0[0x0aa] + 3* pred2_ptr1[0x0aa]);
				pred1_ptr0[0x0ab] = 0.25*(pred1_ptr0[0x0ab] + 3* pred2_ptr1[0x0ab]);
				pred1_ptr0[0x0ac] = 0.25*(pred1_ptr0[0x0ac] + 3* pred2_ptr1[0x0ac]);
				pred1_ptr0[0x0ad] = 0.25*(pred1_ptr0[0x0ad] + 3* pred2_ptr1[0x0ad]);
				pred1_ptr0[0x0ae] = 0.25*(pred1_ptr0[0x0ae] + 3* pred2_ptr1[0x0ae]);
				pred1_ptr0[0x0af] = 0.25*(pred1_ptr0[0x0af] + 3* pred2_ptr1[0x0af]);
				pred1_ptr0[0x0b0] = 0.25*(pred1_ptr0[0x0b0] + 3* pred2_ptr1[0x0b0]);
				pred1_ptr0[0x0b1] = 0.25*(pred1_ptr0[0x0b1] + 3* pred2_ptr1[0x0b1]);
				pred1_ptr0[0x0b2] = 0.25*(pred1_ptr0[0x0b2] + 3* pred2_ptr1[0x0b2]);
				pred1_ptr0[0x0b3] = 0.25*(pred1_ptr0[0x0b3] + 3* pred2_ptr1[0x0b3]);
				pred1_ptr0[0x0b4] = 0.25*(pred1_ptr0[0x0b4] + 3* pred2_ptr1[0x0b4]);
				pred1_ptr0[0x0b5] = 0.25*(pred1_ptr0[0x0b5] + 3* pred2_ptr1[0x0b5]);
				pred1_ptr0[0x0b6] = 0.25*(pred1_ptr0[0x0b6] + 3* pred2_ptr1[0x0b6]);
				pred1_ptr0[0x0b7] = 0.25*(pred1_ptr0[0x0b7] + 3* pred2_ptr1[0x0b7]);
				pred1_ptr0[0x0b8] = 0.25*(pred1_ptr0[0x0b8] + 3* pred2_ptr1[0x0b8]);
				pred1_ptr0[0x0b9] = 0.25*(pred1_ptr0[0x0b9] + 3* pred2_ptr1[0x0b9]);
				pred1_ptr0[0x0ba] = 0.25*(pred1_ptr0[0x0ba] + 3* pred2_ptr1[0x0ba]);
				pred1_ptr0[0x0bb] = 0.25*(pred1_ptr0[0x0bb] + 3* pred2_ptr1[0x0bb]);
				pred1_ptr0[0x0bc] = 0.25*(pred1_ptr0[0x0bc] + 3* pred2_ptr1[0x0bc]);
				pred1_ptr0[0x0bd] = 0.25*(pred1_ptr0[0x0bd] + 3* pred2_ptr1[0x0bd]);
				pred1_ptr0[0x0be] = 0.25*(pred1_ptr0[0x0be] + 3* pred2_ptr1[0x0be]);
				pred1_ptr0[0x0bf] = 0.25*(pred1_ptr0[0x0bf] + 3* pred2_ptr1[0x0bf]);
				pred1_ptr0[0x0c0] = 0.25*(pred1_ptr0[0x0c0] + 3* pred2_ptr1[0x0c0]);
				pred1_ptr0[0x0c1] = 0.25*(pred1_ptr0[0x0c1] + 3* pred2_ptr1[0x0c1]);
				pred1_ptr0[0x0c2] = 0.25*(pred1_ptr0[0x0c2] + 3* pred2_ptr1[0x0c2]);
				pred1_ptr0[0x0c3] = 0.25*(pred1_ptr0[0x0c3] + 3* pred2_ptr1[0x0c3]);
				pred1_ptr0[0x0c4] = 0.25*(pred1_ptr0[0x0c4] + 3* pred2_ptr1[0x0c4]);
				pred1_ptr0[0x0c5] = 0.25*(pred1_ptr0[0x0c5] + 3* pred2_ptr1[0x0c5]);
				pred1_ptr0[0x0c6] = 0.25*(pred1_ptr0[0x0c6] + 3* pred2_ptr1[0x0c6]);
				pred1_ptr0[0x0c7] = 0.25*(pred1_ptr0[0x0c7] + 3* pred2_ptr1[0x0c7]);
				pred1_ptr0[0x0c8] = 0.25*(pred1_ptr0[0x0c8] + 3* pred2_ptr1[0x0c8]);
				pred1_ptr0[0x0c9] = 0.25*(pred1_ptr0[0x0c9] + 3* pred2_ptr1[0x0c9]);
				pred1_ptr0[0x0ca] = 0.25*(pred1_ptr0[0x0ca] + 3* pred2_ptr1[0x0ca]);
				pred1_ptr0[0x0cb] = 0.25*(pred1_ptr0[0x0cb] + 3* pred2_ptr1[0x0cb]);
				pred1_ptr0[0x0cc] = 0.25*(pred1_ptr0[0x0cc] + 3* pred2_ptr1[0x0cc]);
				pred1_ptr0[0x0cd] = 0.25*(pred1_ptr0[0x0cd] + 3* pred2_ptr1[0x0cd]);
				pred1_ptr0[0x0ce] = 0.25*(pred1_ptr0[0x0ce] + 3* pred2_ptr1[0x0ce]);
				pred1_ptr0[0x0cf] = 0.25*(pred1_ptr0[0x0cf] + 3* pred2_ptr1[0x0cf]);
				pred1_ptr0[0x0d0] = 0.25*(pred1_ptr0[0x0d0] + 3* pred2_ptr1[0x0d0]);
				pred1_ptr0[0x0d1] = 0.25*(pred1_ptr0[0x0d1] + 3* pred2_ptr1[0x0d1]);
				pred1_ptr0[0x0d2] = 0.25*(pred1_ptr0[0x0d2] + 3* pred2_ptr1[0x0d2]);
				pred1_ptr0[0x0d3] = 0.25*(pred1_ptr0[0x0d3] + 3* pred2_ptr1[0x0d3]);
				pred1_ptr0[0x0d4] = 0.25*(pred1_ptr0[0x0d4] + 3* pred2_ptr1[0x0d4]);
				pred1_ptr0[0x0d5] = 0.25*(pred1_ptr0[0x0d5] + 3* pred2_ptr1[0x0d5]);
				pred1_ptr0[0x0d6] = 0.25*(pred1_ptr0[0x0d6] + 3* pred2_ptr1[0x0d6]);
				pred1_ptr0[0x0d7] = 0.25*(pred1_ptr0[0x0d7] + 3* pred2_ptr1[0x0d7]);
				pred1_ptr0[0x0d8] = 0.25*(pred1_ptr0[0x0d8] + 3* pred2_ptr1[0x0d8]);
				pred1_ptr0[0x0d9] = 0.25*(pred1_ptr0[0x0d9] + 3* pred2_ptr1[0x0d9]);
				pred1_ptr0[0x0da] = 0.25*(pred1_ptr0[0x0da] + 3* pred2_ptr1[0x0da]);
				pred1_ptr0[0x0db] = 0.25*(pred1_ptr0[0x0db] + 3* pred2_ptr1[0x0db]);
				pred1_ptr0[0x0dc] = 0.25*(pred1_ptr0[0x0dc] + 3* pred2_ptr1[0x0dc]);
				pred1_ptr0[0x0dd] = 0.25*(pred1_ptr0[0x0dd] + 3* pred2_ptr1[0x0dd]);
				pred1_ptr0[0x0de] = 0.25*(pred1_ptr0[0x0de] + 3* pred2_ptr1[0x0de]);
				pred1_ptr0[0x0df] = 0.25*(pred1_ptr0[0x0df] + 3* pred2_ptr1[0x0df]);
				pred1_ptr0[0x0e0] = 0.25*(pred1_ptr0[0x0e0] + 3* pred2_ptr1[0x0e0]);
				pred1_ptr0[0x0e1] = 0.25*(pred1_ptr0[0x0e1] + 3* pred2_ptr1[0x0e1]);
				pred1_ptr0[0x0e2] = 0.25*(pred1_ptr0[0x0e2] + 3* pred2_ptr1[0x0e2]);
				pred1_ptr0[0x0e3] = 0.25*(pred1_ptr0[0x0e3] + 3* pred2_ptr1[0x0e3]);
				pred1_ptr0[0x0e4] = 0.25*(pred1_ptr0[0x0e4] + 3* pred2_ptr1[0x0e4]);
				pred1_ptr0[0x0e5] = 0.25*(pred1_ptr0[0x0e5] + 3* pred2_ptr1[0x0e5]);
				pred1_ptr0[0x0e6] = 0.25*(pred1_ptr0[0x0e6] + 3* pred2_ptr1[0x0e6]);
				pred1_ptr0[0x0e7] = 0.25*(pred1_ptr0[0x0e7] + 3* pred2_ptr1[0x0e7]);
				pred1_ptr0[0x0e8] = 0.25*(pred1_ptr0[0x0e8] + 3* pred2_ptr1[0x0e8]);
				pred1_ptr0[0x0e9] = 0.25*(pred1_ptr0[0x0e9] + 3* pred2_ptr1[0x0e9]);
				pred1_ptr0[0x0ea] = 0.25*(pred1_ptr0[0x0ea] + 3* pred2_ptr1[0x0ea]);
				pred1_ptr0[0x0eb] = 0.25*(pred1_ptr0[0x0eb] + 3* pred2_ptr1[0x0eb]);
				pred1_ptr0[0x0ec] = 0.25*(pred1_ptr0[0x0ec] + 3* pred2_ptr1[0x0ec]);
				pred1_ptr0[0x0ed] = 0.25*(pred1_ptr0[0x0ed] + 3* pred2_ptr1[0x0ed]);
				pred1_ptr0[0x0ee] = 0.25*(pred1_ptr0[0x0ee] + 3* pred2_ptr1[0x0ee]);
				pred1_ptr0[0x0ef] = 0.25*(pred1_ptr0[0x0ef] + 3* pred2_ptr1[0x0ef]);
				pred1_ptr0[0x0f0] = 0.25*(pred1_ptr0[0x0f0] + 3* pred2_ptr1[0x0f0]);
				pred1_ptr0[0x0f1] = 0.25*(pred1_ptr0[0x0f1] + 3* pred2_ptr1[0x0f1]);
				pred1_ptr0[0x0f2] = 0.25*(pred1_ptr0[0x0f2] + 3* pred2_ptr1[0x0f2]);
				pred1_ptr0[0x0f3] = 0.25*(pred1_ptr0[0x0f3] + 3* pred2_ptr1[0x0f3]);
				pred1_ptr0[0x0f4] = 0.25*(pred1_ptr0[0x0f4] + 3* pred2_ptr1[0x0f4]);
				pred1_ptr0[0x0f5] = 0.25*(pred1_ptr0[0x0f5] + 3* pred2_ptr1[0x0f5]);
				pred1_ptr0[0x0f6] = 0.25*(pred1_ptr0[0x0f6] + 3* pred2_ptr1[0x0f6]);
				pred1_ptr0[0x0f7] = 0.25*(pred1_ptr0[0x0f7] + 3* pred2_ptr1[0x0f7]);
				pred1_ptr0[0x0f8] = 0.25*(pred1_ptr0[0x0f8] + 3* pred2_ptr1[0x0f8]);
				pred1_ptr0[0x0f9] = 0.25*(pred1_ptr0[0x0f9] + 3* pred2_ptr1[0x0f9]);
				pred1_ptr0[0x0fa] = 0.25*(pred1_ptr0[0x0fa] + 3* pred2_ptr1[0x0fa]);
				pred1_ptr0[0x0fb] = 0.25*(pred1_ptr0[0x0fb] + 3* pred2_ptr1[0x0fb]);
				pred1_ptr0[0x0fc] = 0.25*(pred1_ptr0[0x0fc] + 3* pred2_ptr1[0x0fc]);
				pred1_ptr0[0x0fd] = 0.25*(pred1_ptr0[0x0fd] + 3* pred2_ptr1[0x0fd]);
				pred1_ptr0[0x0fe] = 0.25*(pred1_ptr0[0x0fe] + 3* pred2_ptr1[0x0fe]);
				pred1_ptr0[0x0ff] = 0.25*(pred1_ptr0[0x0ff] + 3* pred2_ptr1[0x0ff]);
			}
		
			inverse8x8(cof_bar,cof, 0 ,0);
			inverse8x8(cof_bar,cof, 0 ,8);
			inverse8x8(cof_bar,cof, 8 ,0);
			inverse8x8(cof_bar,cof, 8 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 0 ,8);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,0);
			write_out_buffer(out, pred1, cof_bar, x, y, 8 ,8);
			luma_index0 = ((luma_index0 + 4)&0x0f);
			luma_index1 = ((luma_index1 + 4)&0x0f);
		}
	}
}

void main(){
	parallel_invoke(// (tp): ra, gp, sp, tp, argc, argp
		[&]{	p_frame_x_x_0_0x00000_x_x_x_x_0(out, in1, mvx0, mvy, cof, luma_type);	}//name, ptr, argc, argp
		[&]{	p_frame_x_x_0_0x00200_x_x_x_x_0(out, in1, mvx1, mvy1, cof, luma_type);	}//name, ptr, argc, argp
		[&]{	p_frame_x_x_0_0x00400_x_x_x_x_0(out, in1, mvx6, mvy6, cof, luma_type);	}//name, ptr, argc, argp
		[&]{	p_frame_x_x_0_0x00600_x_x_x_x_0(out, in1, mvx7, mvy5, cof, luma_type);	}//name, ptr, argc, argp
		[&]{	b_frame_x_x_x_0_0x00000_x_x_x_x_x_x_4_8(out, in1, in2, mvx0, mvy, mvx1, mvy, cof, luma_type);	}//name, ptr, argc, argp
		[&]{	b_frame_x_x_x_0_0x00200_x_x_x_x_x_x_4_8(out, in1, in2, mvx2, mvy7, mvx3, mvy6, cof, luma_type);	}//name, ptr, argc, argp
		[&]{	b_frame_x_x_x_0_0x00400_x_x_x_x_x_x_4_8(out, in1, in2, mvx4, mvy5, mvx5, mvy4, cof, luma_type);	}//name, ptr, argc, argp
		[&]{	b_frame_x_x_x_0_0x00600_x_x_x_x_x_x_4_8(out, in1, in2, mvx6, mvy3, mvx7, mvy2, cof, luma_type);	}//name, ptr, argc, argp
		[&]{	b_frame_x_x_x_0_0x00000_x_x_x_x_x_x_12_0(out, in2, in1, mvx0, mvy, mvx1, mvy, cof, luma_type);	}//name, ptr, argc, argp
		[&]{	b_frame_x_x_x_0_0x00200_x_x_x_x_x_x_12_0(out, in2, in1, mvx2, mvy1, mvx3, mvy0, cof, luma_type);	}//name, ptr, argc, argp
		[&]{	b_frame_x_x_x_0_0x00400_x_x_x_x_x_x_12_0(out, in2, in1, mvx4, mvy7, mvx5, mvy6, cof, luma_type);	}//name, ptr, argc, argp
		[&]{	b_frame_x_x_x_0_0x00600_x_x_x_x_x_x_12_0(out, in2, in1, mvx5, mvy5, mvx7, mvy4, cof, luma_type);	}//name, ptr, argc, argp
	);// ecall(mhartid);
}